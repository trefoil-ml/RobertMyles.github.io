<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggplot2 on Lithium Theme</title>
    <link>/tags/ggplot2/</link>
    <description>Recent content in Ggplot2 on Lithium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bayesian IRT in R and Stan</title>
      <link>/1/01/01/bayesian-irt-in-r-and-stan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/bayesian-irt-in-r-and-stan/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/v7y6SVt.png?3&#34; align=&#34;middle&#34; style=&#34;width:300px; height:250px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The code below on Stan is also available as an &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;&lt;code&gt;RPub webpage&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;d rather work through the examples than read all of the post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;One of the first areas where Bayesian modelling gained an entry point into the social sciences (and in particular political science) was in the area of legislator ideal points, with the use of the Item-Response Theory (IRT) models from the educational testing literature in psychology. This topic proved to be the perfect subject for the comparison of Bayesian and frequentist methods, since ideal point creation usually depends on nominal voting data, which may contain a lot of missing data (legislators who miss votes or abstain) and a huge number of parameters (hundreds of roll-calls by hundreds of legislators). The benefits of Bayesian methods over frequentist techniques for ideal point analysis is discussed at length elsewhere&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but here I&amp;rsquo;ll talk about a side-effect of using Bayesian methods for creating ideal points from roll-call data, that is, the long time it can take to run these models on a desktop computer. (In the following discussion, I refer to &amp;lsquo;legislators&amp;rsquo;, but these IRT models apply to all types of response to a question, whether the &amp;lsquo;question&amp;rsquo; is a vote by a politician or a judge or questions on a test or survey.)&lt;/p&gt;

&lt;p&gt;To create ideal points in &lt;code&gt;R&lt;/code&gt;, you have three or four main options if you want to use ol&amp;rsquo; &lt;a href=&#34;http://robertmyles.github.io//Books-on-Bayes-Stats.html&#34;&gt;Bayes&lt;/a&gt;. First, there is the ready-made &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; command of the package &lt;a href=&#34;https://cran.r-project.org/web/packages/pscl/index.html&#34;&gt;pscl&lt;/a&gt; by Simon Jackman &amp;amp; co. &lt;code&gt;pscl&lt;/code&gt; includes some very handy little functions for those interested in generating ideal points from legislative voting data &amp;ndash; summary statistics and plots are all easy to make, and come ready-made, such as party loyalty statistics, for example. However, &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; suffers somewhat from being so &amp;lsquo;ready&amp;rsquo;: it is a bit unsuited for more complex or indivualistic models compared to some of the options mentioned later. I&amp;rsquo;ve also repeatedly run into problems with &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; when trying to use some of the &lt;code&gt;pscl&lt;/code&gt; package options (&lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;dropList()&lt;/bdi&gt;, for example), or when estimating multidimensional models. In terms of &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&#34;&gt;MCMC&lt;/a&gt;, only one chain at a time may be run. In fact, it is what it says on the tin: it&amp;rsquo;s a Bayesian version of W-NOMINATE, which means it has the advantages of that program (easy to use) and the disadvantages (when it doesn&amp;rsquo;t work you&amp;rsquo;re not sure why&amp;hellip;a bit &amp;lsquo;black-box&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MCMCpack&lt;/code&gt; package also allows for the creation of ideal points, although its output is slightly less friendly to the beginner (an &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;mcmclist&lt;/bdi&gt; object). Its &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;MCMCirt1d()&lt;/bdi&gt; command is pretty similar to &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; but allows for setting &amp;lsquo;soft&amp;rsquo; constraints rather than the spike prior that pscl uses to pin down the position of (at least) two legislators. This is better for two reasons, in my opinion. First, it avoids a hard constraint on legislators for legislatures in which we do not have strong &lt;em&gt;a priori&lt;/em&gt; evidence to suppose that, for example, Legislator X is an extremist to the right, or Legislator Y to the left (the use of extremist legislators on either end of the supposed scale &amp;lsquo;anchors&amp;rsquo; it). With &lt;code&gt;MCMCpack&lt;/code&gt;, the ideal points of the constrained legislators are drawn from a truncated normal distribution (truncated at zero) and so Legislator X (our extremist to the right) simply cannot have an ideal point on the left side of the scale and the opposite for our left-side extremist legislator (the use of these soft constraints obviates the need for them actually &lt;em&gt;being&lt;/em&gt; extremists too). I&amp;rsquo;ve also found &lt;code&gt;MCMCpack&lt;/code&gt; to be faster, although I haven&amp;rsquo;t tested that formally. In either case, both functions are quite similar. &lt;code&gt;MCMCpack&lt;/code&gt; also has functions for dynamic models, robust &amp;amp; multidimensional models, and Ordinal IRT. They&amp;rsquo;ve all worked well for me with the exception of &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;MCMCirtkd()&lt;/bdi&gt;, the multidimensional model function, which never seems to get started.&lt;/p&gt;

&lt;p&gt;The next option is to use the &lt;code&gt;BUGS&lt;/code&gt; modelling language, either with &lt;code&gt;BUGS&lt;/code&gt; itself or its cousin &lt;code&gt;JAGS&lt;/code&gt;, both of which have been heavily used in the literature but can be &lt;strong&gt;extremely&lt;/strong&gt; slow, for reasons outlined in &lt;a href=&#34;http://robertmyles.github.io//Stan-JAGS.html&#34;&gt;this blog post&lt;/a&gt;. I don&amp;rsquo;t recommend their use for ideal points.&lt;/p&gt;

&lt;p&gt;Next, we have &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt;, which doesn&amp;rsquo;t have the simpler syntax of &lt;code&gt;JAGS&lt;/code&gt; &amp;amp; &lt;code&gt;BUGS&lt;/code&gt;, but is simply incomparably better in terms of speed. However, since it&amp;rsquo;s newer, you won&amp;rsquo;t find the amount of resources available for &lt;code&gt;BUGS&lt;/code&gt;, for example (like &lt;a href=&#34;https://www.jstatsoft.org/article/view/v036c01&#34;&gt;here&lt;/a&gt;). There are a few resources: a simple one-dimensional model can be seen on Pablo Barber√°&amp;rsquo;s &lt;a href=&#34;https://github.com/pablobarbera/quant3materials/blob/master/bayesian/lab14_IRT_issues.R&#34;&gt;github&lt;/a&gt;; a friend of mine, Guilherme Duarte, has an example of a dynamic model on his github &lt;a href=&#34;https://github.com/duarteguilherme/Quinn-Martin-Replication&#34;&gt;too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some other resources available, but relate to slightly different IRT models, more common in the educational-testing literature, and less so in ideal point studies: the &amp;lsquo;Rasch&amp;rsquo; &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/research/unpublished/stan_v_stata.pdf&#34;&gt;model&lt;/a&gt;; the &lt;a href=&#34;https://rpubs.com/rfarouni/64284&#34;&gt;2PL model&lt;/a&gt; (in which a &amp;lsquo;yes&amp;rsquo; answer has a specific associated movement in the dimensional space and the discrimination parameter only takes on postive values; in the ideal-point model of &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/Jackman2001.pdf&#34;&gt;Jackman&lt;/a&gt; it can possess negative and positive values).&lt;/p&gt;

&lt;p&gt;Since there are so few Stan resources for ideal point IRT models, I thought I&amp;rsquo;d post a few models here. The code is also available as an &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;RPub webpage&lt;/a&gt;, as mentioned earlier. The statistical model we&amp;rsquo;ll employ is:
{% raw %}
  $$y_{ij} = \beta_j\bf{x_i} - \alpha&lt;em&gt;j,$$
 {% endraw %}
where ({% raw %}\(y&lt;/em&gt;{ij}\){% endraw %}) are the votes, in binary form (1 = &amp;lsquo;Yes&amp;rsquo;; 2 = &amp;lsquo;No&amp;rsquo;); the {% raw %}\(\bf x_i\){% endraw %} are the ideal points of the legislators; and  {% raw %} \(\beta_j\){% endraw %} and {% raw %}\(\alpha_j\){% endraw %} are the discrimination and difficulty parameters of the model.&lt;/p&gt;

&lt;p&gt;Starting from scratch in &lt;code&gt;R&lt;/code&gt; in a new session (you&amp;rsquo;ll need a C++ compiler if you don&amp;rsquo;t have one, see &lt;a href=&#34;https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
install.packages(&amp;ldquo;RStan&amp;rdquo;)
library(&amp;ldquo;RStan&amp;rdquo;)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Ideal points are created from a &lt;em&gt;j&lt;/em&gt; {% raw %}\(\times\){% endraw %} &lt;em&gt;m&lt;/em&gt; matrix of voting data (&lt;em&gt;j&lt;/em&gt; legislators voting on &lt;em&gt;m&lt;/em&gt; votes), coded &lt;bdi style=&#34;font-family:courier&#34;&gt;1&lt;/bdi&gt; for &amp;lsquo;yes&amp;rsquo; and &lt;bdi style=&#34;font-family:courier&#34;&gt;0&lt;/bdi&gt; for &amp;lsquo;no&amp;rsquo; and abstentions. Missing data are &lt;bdi style=&#34;font-family:courier&#34;&gt;NA&lt;/bdi&gt;, and are deleted out before running in Stan. We can easily simulate data for this type of thing, but let&amp;rsquo;s use a real database. This data is from the 53rd legislature of the Brazilian Federal Senate (with thanks to &lt;a href=&#34;http://www.cebrap.org.br/v2/pages/home&#34;&gt;CEBRAP&lt;/a&gt;, who built the original database, this comes from an extended version I created), we&amp;rsquo;ll download it from my Github repo. You&amp;rsquo;ll need to install &lt;code&gt;readr&lt;/code&gt; if you don&amp;rsquo;t have it. (I also have the bad habit of naming my data as &amp;ldquo;data&amp;rdquo;&amp;hellip; not generally a great idea. It&amp;rsquo;ll be ok here, though.)&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
library(readr)
data &amp;lt;- read_csv(&amp;ldquo;&lt;a href=&#34;https://raw.githubusercontent.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models/master/Senate_Example.csv&amp;quot;&#34;&gt;https://raw.githubusercontent.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models/master/Senate_Example.csv&amp;quot;&lt;/a&gt;)
colnames(data)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s take a look at the data. You&amp;rsquo;ll see the column names are &amp;ldquo;VoteNumber&amp;rdquo;, &amp;ldquo;SenNumber&amp;rdquo;, &amp;ldquo;SenatorUpper&amp;rdquo;, &amp;ldquo;Vote&amp;rdquo;, &amp;ldquo;Party&amp;rdquo;, &amp;ldquo;GovCoalition&amp;rdquo;, &amp;ldquo;State&amp;rdquo;, &amp;ldquo;FP&amp;rdquo;, &amp;ldquo;Origin&amp;rdquo;, &amp;ldquo;Contentious&amp;rdquo;, &amp;ldquo;IndGov&amp;rdquo;, and &amp;ldquo;VoteType&amp;rdquo;. I&amp;rsquo;ve kept them in this state so that we can tidy things up and manipulate things a little, stuff you&amp;rsquo;ll probably have to do any time you deal with real data of this sort. We can also have a look later at different plotting options using some of these variables. First, let&amp;rsquo;s change the votes, which are in the format &amp;ldquo;S&amp;rdquo; (&lt;em&gt;Sim&lt;/em&gt;, &amp;lsquo;Yes&amp;rsquo;), &amp;ldquo;N&amp;rdquo; (&amp;lsquo;No&amp;rsquo;), &amp;ldquo;A&amp;rdquo; (Abstention), and &amp;ldquo;O&amp;rdquo; (Obstruction), to numeric format.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
data$Vote[data$Vote==&amp;ldquo;S&amp;rdquo;] &amp;lt;- 1
data$Vote[data$Vote==&amp;ldquo;N&amp;rdquo;] &amp;lt;- 0
data$Vote[data$Vote  %in% c(NA,&amp;ldquo;O&amp;rdquo;,&amp;ldquo;A&amp;rdquo;)] &amp;lt;- NA
data$Vote &amp;lt;- as.numeric(data$Vote)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Next, we&amp;rsquo;ll create the &amp;lsquo;vote matrix&amp;rsquo;. This is the &lt;em&gt;j&lt;/em&gt; {% raw %}\(\times\){% endraw %} &lt;em&gt;m&lt;/em&gt; matrix that we will use to create the ideal points with Stan. The rows will be the legislators and the columns the votes. We will also need to deal with the issue of &lt;a href=&#34;http://polmeth.wustl.edu/files/polmeth/river03.pdf&#34;&gt;&amp;lsquo;constraints&amp;rsquo;&lt;/a&gt;: we need to identify &lt;em&gt;d(d + 1)&lt;/em&gt; legislators in &lt;em&gt;d&lt;/em&gt; dimensions and constrain their ideal points in some way. For now, we&amp;rsquo;ll just organise our vote matrix in such a way that the two legislators that will be constrained are placed in rows 1 and 2 of the matrix. For this example, we can use Senators Agripino and Suplicy, who belong to two parties that are generally considered to be on opposite sides of the political &amp;lsquo;space&amp;rsquo; that we will place our ideal points upon. Organizing things in this way is not necessary but makes the Stan model code cleaner later on.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
{% highlight R linenos=table %}
data$FullID &amp;lt;- paste(data$SenatorUpper, data$Party, sep=&amp;rdquo;:&amp;ldquo;)
NameID &amp;lt;- unique(data$FullID)
J &amp;lt;- length(unique(NameID))
M &amp;lt;- length(unique(data$VoteNumber))
grep(&amp;ldquo;JOSE AGRIPINO:PFL&amp;rdquo;, NameID)  #34
grep(&amp;ldquo;EDUARDO SUPLICY:PT&amp;rdquo;, NameID) #12
NameID &amp;lt;- NameID[c(34, 12, 1:11, 13:33, 35:J)]&lt;/p&gt;

&lt;p&gt;y &amp;lt;- matrix(NA,J,M)
Rows &amp;lt;- match(data$FullID, NameID)
Cols &amp;lt;- unique(data$VoteNumber)
Columns &amp;lt;- match(data$VoteNumber, Cols)&lt;/p&gt;

&lt;p&gt;for(i in 1:dim(data)[1]){
  y[Rows[i],Columns[i]] &amp;lt;- data$Vote[i]
}&lt;/p&gt;

&lt;p&gt;dimnames(y) &amp;lt;- list(unique(NameID), unique(data$VoteNumber))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I presume you&amp;rsquo;re using RStudio. Clicking on the viewer should show you the vote matrix, which should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/iOh3lfY.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Next we&amp;rsquo;ll make a dataframe of legislator variables which we&amp;rsquo;ll use later on, and one of vote characteristics.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
ldata &amp;lt;- data.frame(FullID=unique(NameID),
                    Party=data$Party[match(unique(NameID), data$FullID)],
                    GovCoalition=data$GovCoalition[match(unique(NameID), data$FullID)],
                    Name=data$SenatorUpper[match(unique(NameID), data$FullID)],
                    State=data$State[match(unique(NameID), data$FullID)],
                    row.names=NULL, stringsAsFactors=FALSE)&lt;/p&gt;

&lt;p&gt;vdata &amp;lt;- data.frame(VoteNumber=unique(data$VoteNumber),
        VoteType=data$VoteType[match(unique(data$VoteNumber), data$VoteNumber)],
        SenNumber=data$SenNumber[match(unique(data$VoteNumber), data$VoteNumber)],
        Origin=data$Origin[match(unique(data$VoteNumber), data$VoteNumber)],
        Contentious=data$Contentious[match(unique(data$VoteNumber),
                    data$VoteNumber)],
        IndGov=data$IndGov[match(unique(data$VoteNumber), data$VoteNumber)],
        stringsAsFactors=F)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Stan is not like &lt;code&gt;JAGS&lt;/code&gt; and &lt;code&gt;BUGS&lt;/code&gt; in that &lt;bdi style=&#34;font-family:courier&#34;&gt;NA&lt;/bdi&gt; is unwieldy to incorporate. The best thing to do is to delete missing data out, as can be seen in Barber√°&amp;rsquo;s script linked to earlier, which I&amp;rsquo;ll copy here.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
N &amp;lt;- length(y)
j &amp;lt;- rep(1:J, times=M)
m &amp;lt;- rep(1:M, each=J)&lt;/p&gt;

&lt;p&gt;miss &amp;lt;- which(is.na(y))
N &amp;lt;- N - length(miss)
j &amp;lt;- j[-miss]
m &amp;lt;- m[-miss]
y &amp;lt;- y[-miss]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we&amp;rsquo;ll set our initial values. There are various ways to do this, ranging from leaving it up to Stan (i.e. not setting any values) to creating lists with specific starting values for each parameter. What we&amp;rsquo;ll do here is use the starting values as a way to start the parties off in separate places. This has several advantages: we already know that these parties don&amp;rsquo;t vote together very often (i.e., they are parties of the government and the opposition) and so we can speed up the model by starting the legislators off where we already know they&amp;rsquo;ll be (i.e. right-wing parties on the right etc.). This also has the benefit of making it less likely that we&amp;rsquo;ll end up with &amp;lsquo;sign-flips&amp;rsquo;, where a legislator with a bi-modal posterior distribution has an ideal point from the &amp;lsquo;wrong&amp;rsquo; mode.&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; For the discrimination and difficulty paramters, we&amp;rsquo;ll use a random sample from normal distributions. We&amp;rsquo;ll also save all this information as &lt;code&gt;stan.data&lt;/code&gt;, which is the list of data we&amp;rsquo;ll use with Stan.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
ldata$ThetaStart &amp;lt;- rnorm(J, 0, 1)
ldata$ThetaStart[ldata$Party==&amp;ldquo;PFL&amp;rdquo; | ldata$Party==&amp;ldquo;PTB&amp;rdquo; | ldata$Party==&amp;ldquo;PSDB&amp;rdquo; | ldata$Party==&amp;ldquo;PPB&amp;rdquo;] &amp;lt;- 2
ldata$ThetaStart[ldata$Party==&amp;ldquo;PT&amp;rdquo; | ldata$Party==&amp;ldquo;PSOL&amp;rdquo; | ldata$Party==&amp;ldquo;PCdoB&amp;rdquo;] &amp;lt;- -2
ThetaStart &amp;lt;- ldata$ThetaStart&lt;/p&gt;

&lt;p&gt;initF &amp;lt;- function() {
  list(theta=ThetaStart, beta=rnorm(M, 0, 2), alpha=rnorm(M, 0, 2))
}&lt;/p&gt;

&lt;p&gt;stan.data &amp;lt;- list(J=J, M=M, N=N, j=j, m=m, y=y, ThetaStart=ThetaStart)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Stan model code differs from those mentioned above in a few aspects. Firstly, variables need to be declared, along with their type. For example, &lt;em&gt;J&lt;/em&gt;, which is our index for the number of senators, is declared in the following code as an integer. The parameters are likewise declared, as real numbers. The model code has three blocks: data, parameters and the model itself (there are other blocks possible, such as&lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;generated data&lt;/bdi&gt;, see the Stan &lt;a href=&#34;http://mc-stan.org/documentation/&#34;&gt;manual&lt;/a&gt;. Stan code is also imperative &amp;ndash; the order of the blocks matters.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
stan.code &amp;lt;- &amp;ldquo;
    data {
    int&lt;lower=1&gt; J; //Senators
    int&lt;lower=1&gt; M; //Proposals
    int&lt;lower=1&gt; N; //no. of observations
    int&lt;lower=1, upper=J&gt; j[N]; //Senator for observation n
    int&lt;lower=1, upper=M&gt; m[N]; //Proposal for observation n
    int&lt;lower=0, upper=1&gt; y[N]; //vote of observation n
    }
    parameters {
    real alpha[M];
    real beta[M];
    real theta[J];
    }
    model {
    alpha ~ normal(0,5);
    beta ~ normal(0,5);
    theta ~ normal(0,1);
    theta[1] ~ normal(1, .01);
    theta[2] ~ normal(-1, .01);&lt;br /&gt;
    for (n in 1:N)
    y[n] ~ bernoulli_logit(theta[j[n]] * beta[m[n]] - alpha[m[n]]);
    }&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;This IRT model can be run using either the logistic or probit link function, however, since Stan has a built in &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;bernoulli_logit&lt;/bdi&gt;, we&amp;rsquo;ll use that. You can see from the model block above that we have specified specific prior distributions for &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[1]&lt;/bdi&gt; and &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[2]&lt;/bdi&gt;. These are our constrained legislators &amp;ndash; Agripino and Suplicy. We can do this using truncated normal distributions in Stan (i.e. &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[1] ~ normal(1, .01)T[0,]&lt;/bdi&gt;, for example), but in my experience this makes things slower and increases the number of divergent transitions reported by Stan. We then use the &lt;code&gt;stan()&lt;/code&gt; command to run our model in Stan. Here, I&amp;rsquo;m using 1000 iterations just to show (as it doesn&amp;rsquo;t take too long); these IRT models generally need more iterations than other models, for good estimates from this data, I run 5000 iterations with 2500 burn-in. A couple of hundred iterations usually suffices in Stan, depending on the model. The number of chains and cores are linked to what I have available on my computer. You can check this with the parallel package using &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;detectCores()&lt;/bdi&gt;. A quick way to check convergence of the chains is with a graph of Rhat, shown below.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;stan.fit &amp;lt;- stan(model_code=stan.code, data=stan.data, iter=3000, warmup=1500, chains=4, thin=5, init=initF, verbose=TRUE, cores=4, seed=1234)&lt;/p&gt;

&lt;p&gt;stan_rhat(stan.fit, bins=60)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/YNBevMV.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;Values of Rhat should be 1.03 or lower. As you can see, even from 1000 iterations, we can be confident these chains are converging.&lt;/p&gt;

&lt;h2 id=&#34;graphing-ideal-points&#34;&gt;Graphing Ideal Points&lt;/h2&gt;

&lt;p&gt;I find the best way to plot ideal points is by using ggplot2. It&amp;rsquo;s automatically loaded as part of rstan. I also prefer to use an mcmc.list object, simply because I&amp;rsquo;m more used to it. But you can use the &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;stan.fit&lt;/bdi&gt; object directly if you prefer.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
MS &amp;lt;- As.mcmc.list(stan.fit)
sMS &amp;lt;- summary(MS)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There are various things we can plot from the summary above. Of main interest is usually the ideal points, so we&amp;rsquo;ll start with those first. First, let&amp;rsquo;s extract the ideal points (&amp;ldquo;theta&amp;rdquo;) from the summary, along with the lower and upper ends of the 95% credible interval:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
Theta &amp;lt;- sMS$statistics[grep(&amp;ldquo;theta&amp;rdquo;, row.names(sMS$statistics)),1]
ThetaQ &amp;lt;- sMS$quantiles[grep(&amp;ldquo;theta&amp;rdquo;, row.names(sMS$statistics)),c(1,5)]
Theta &amp;lt;- as.data.frame(cbind(Theta, ThetaQ))
rm(ThetaQ)
Theta$FullID &amp;lt;- ldata$FullID
row.names(Theta) &amp;lt;- NULL
colnames(Theta)[1:3] &amp;lt;- c(&amp;ldquo;Mean&amp;rdquo;, &amp;ldquo;Lower&amp;rdquo;, &amp;ldquo;Upper&amp;rdquo;)
Theta &amp;lt;- merge(Theta, ldata, by=&amp;ldquo;FullID&amp;rdquo;)
Theta &amp;lt;- Theta[order(Theta$Mean),]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we have a dataframe of legislator characteristics alng with their ideal points. Since we&amp;rsquo;re dealing with a one-dimensional model here, the most straight-forward way to plot is along a scale ranging from the lowest ideal point to the highest. Here, I&amp;rsquo;ll colour the ideal points and their intervals by membership of the government coalition. I&amp;rsquo;ve used some other plotting options to make this plot the way I like it, but it&amp;rsquo;s easy to change things to your taste in ggplot2.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
Y &amp;lt;- seq(from=1, to=length(Theta$Mean), by=1)&lt;/p&gt;

&lt;p&gt;ggplot(Theta, aes(x=Mean, y=Y)) + geom_point(aes(colour=GovCoalition),
    shape=19, size=3) + geom_errorbarh(aes(xmin=Lower, xmax=Upper,colour=GovCoalition), height=0) + geom_text(aes(x=Upper, label=FullID, colour=GovCoalition), size=2.5, hjust=-.05)+ scale_colour_manual(values=c(&amp;ldquo;red&amp;rdquo;, &amp;ldquo;blue&amp;rdquo;)) + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.title=element_blank(), legend.position=&amp;ldquo;none&amp;rdquo;, panel.grid.major.y = element_blank(), panel.grid.major.x=element_line(linetype=1, colour=&amp;ldquo;grey&amp;rdquo;), panel.grid.minor=element_blank(), panel.background=element_rect(fill=&amp;ldquo;white&amp;rdquo;), panel.border = element_rect(colour=&amp;ldquo;black&amp;rdquo;, fill=NA, size=.4)) + scale_x_continuous(limits=c(-2.7, 4))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/fE2LY5L.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;Of course, that‚Äôs not all the information we have in our ldata dataframe. We could plot things by party or by state. Let‚Äôs plot something by region (since there are a lot of states):&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
St &amp;lt;- Theta[is.na(Theta$State)==FALSE,]  # take out president
St$Region &amp;lt;- NA
SE &amp;lt;- c(&amp;ldquo;SP&amp;rdquo;, &amp;ldquo;RJ&amp;rdquo;, &amp;ldquo;ES&amp;rdquo;, &amp;ldquo;MG&amp;rdquo;)
S &amp;lt;- c(&amp;ldquo;RS&amp;rdquo;, &amp;ldquo;PR&amp;rdquo;, &amp;ldquo;SC&amp;rdquo;)
N &amp;lt;- c(&amp;ldquo;AM&amp;rdquo;, &amp;ldquo;RO&amp;rdquo;, &amp;ldquo;RR&amp;rdquo;, &amp;ldquo;TO&amp;rdquo;, &amp;ldquo;PA&amp;rdquo;, &amp;ldquo;AC&amp;rdquo;, &amp;ldquo;AP&amp;rdquo;)
CW &amp;lt;- c(&amp;ldquo;DF&amp;rdquo;, &amp;ldquo;GO&amp;rdquo;, &amp;ldquo;MT&amp;rdquo;, &amp;ldquo;MS&amp;rdquo;)
NE &amp;lt;- c(&amp;ldquo;CE&amp;rdquo;, &amp;ldquo;MA&amp;rdquo;, &amp;ldquo;AL&amp;rdquo;, &amp;ldquo;RN&amp;rdquo;, &amp;ldquo;PB&amp;rdquo;, &amp;ldquo;SE&amp;rdquo;, &amp;ldquo;PI&amp;rdquo;, &amp;ldquo;BA&amp;rdquo;, &amp;ldquo;PE&amp;rdquo;)
St$Region[St$State %in% SE] &amp;lt;- &amp;ldquo;South-East&amp;rdquo;
St$Region[St$State %in% S] &amp;lt;- &amp;ldquo;South&amp;rdquo;
St$Region[St$State %in% NE] &amp;lt;- &amp;ldquo;North-East&amp;rdquo;
St$Region[St$State %in% CW] &amp;lt;- &amp;ldquo;Centre-West&amp;rdquo;
St$Region[St$State %in% N] &amp;lt;- &amp;ldquo;North&amp;rdquo;&lt;/p&gt;

&lt;p&gt;nameorder &amp;lt;- St$FullID[order(St$Region, St$Mean)]
St$FullID &amp;lt;- factor(St$FullID, levels=nameorder)&lt;/p&gt;

&lt;p&gt;ggplot(St, aes(x=Mean, y=FullID)) + geom_point(size=3, aes(colour=Region)) + geom_errorbarh(aes(xmin=Lower, xmax=Upper, colour=Region), height=0) + facet_grid(Region ~ ., scales=&amp;ldquo;free_y&amp;rdquo;) + scale_colour_manual(values=c(&amp;ldquo;orange&amp;rdquo;, &amp;ldquo;black&amp;rdquo;, &amp;ldquo;red&amp;rdquo;, &amp;ldquo;blue&amp;rdquo;, &amp;ldquo;darkgreen&amp;rdquo;)) + theme_bw()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/M4sx2az.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;We can also analyse the other parameters of the model, and run multidimensional models too. See the &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;RPub&lt;/a&gt; for the code for these.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; There are many discussions on this topic, but &lt;a href=&#34;https://my.vanderbilt.edu/joshclinton/files/2011/10/CJ_LSQ2009.pdf&#34;&gt;Clinton &amp;amp; Jackman (2009)&lt;/a&gt; is a good place to start. An earlier &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/ClintonJackmanRivers2004.pdf&#34;&gt;paper&lt;/a&gt; by Clinton, Jackman &amp;amp; Rivers makes the point somewhat more forcefully. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt; For more on this point, see &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/Jackman2001.pdf&#34;&gt;Jackman&lt;/a&gt; 2001, &lt;a href=&#34;http://polmeth.wustl.edu/files/polmeth/river03.pdf&#34;&gt;Rivers 2003&lt;/a&gt; paper cited in the main text, or the Appendix of my PhD &lt;a href=&#34;http://robertmyles.github.io//assets/Explaining%20the%20Determinants%20of%20Foreign%20Policy%20Voting%20Behaviour%20in%20the%20Brazilian%20Houses%20of%20Legislature.pdf&#34;&gt;thesis&lt;/a&gt;. &lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/VuCDpaX.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make a colour table in R with ggplot2</title>
      <link>/1/01/01/make-a-colour-table-in-r-with-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/make-a-colour-table-in-r-with-ggplot2/</guid>
      <description>

&lt;p&gt;I loved &lt;a href=&#34;https://github.com/hdugan/rColorTable/blob/master/rColorTable.R&#34;&gt;this&lt;/a&gt; R script from hdugan when I first saw it a while ago. The script makes a 2-page pdf of all the colors available in R, using R. Nice.&lt;/p&gt;

&lt;p&gt;The other day, I thought about making a tidyverse version of it, using dplyr to get the data ready and ggplot2 to visualize it. I won&amp;rsquo;t for a second pretend that this code is as short and tidy as the original, and in fact it may be a good example of when base R can be really useful, but anyway here it is. (The pdf it produces follows.) The table shows all the colours available in R, from the base colour on the left hand side, and then a scale of increasingly darker hues (from 1 to 4) for colours that have them. The basic idea was to create six plots and place them side by side using &lt;code&gt;cowplot::plot_grid()&lt;/code&gt;. (&lt;code&gt;grid.arrange()&lt;/code&gt; from the gridExtra package was a little less customizable.) So here you go: a tidyverse R Colour Table. (Using RColorBrewer you could add some purdy palette extensions). It&amp;rsquo;s a one-page pdf, you could split into smaller images by subsetting the data and so on.&lt;/p&gt;

&lt;p&gt;{% highlight r %}&lt;/p&gt;

&lt;h1 id=&#34;r-colors-minus-100-shades-of-grey&#34;&gt;R colors minus 100 shades of grey&lt;/h1&gt;

&lt;p&gt;library(stringr)
library(tidyverse)&lt;/p&gt;

&lt;h1 id=&#34;get-data&#34;&gt;get &amp;lsquo;data&amp;rsquo;:&lt;/h1&gt;

&lt;p&gt;colour &amp;lt;- data_frame(colours = colors()) %&amp;gt;%
  filter(!grepl(&amp;ldquo;gray&amp;rdquo;, colours),
         !grepl(&amp;ldquo;grey&amp;rdquo;, colours)) %&amp;gt;%
  mutate(general_colour = gsub(&amp;rdquo;[0-9]&amp;ldquo;, &amp;ldquo;&amp;rdquo;, colours),
         c1 = ifelse(grepl(&amp;ldquo;1&amp;rdquo;, colours), 1, 0),
         c2 = ifelse(grepl(&amp;ldquo;2&amp;rdquo;, colours), 1, 0),
         c3 = ifelse(grepl(&amp;ldquo;3&amp;rdquo;, colours), 1, 0),
         c4 = ifelse(grepl(&amp;ldquo;4&amp;rdquo;, colours), 1, 0)) %&amp;gt;%
  select(-1) %&amp;gt;%
  group_by(general_colour) %&amp;gt;%
  summarise_each(funs(sum)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(c1 = ifelse(grepl(1, c1), paste0(general_colour, c1), NA),
         c2 = ifelse(grepl(1, c2), paste0(general_colour, &amp;ldquo;2&amp;rdquo;), NA),
         c3 = ifelse(grepl(1, c3), paste0(general_colour, &amp;ldquo;3&amp;rdquo;), NA),
         c4 = ifelse(grepl(1, c4), paste0(general_colour, &amp;ldquo;4&amp;rdquo;), NA),
         c1 = ifelse(is.na(c1), general_colour, c1),
         c2 = ifelse(is.na(c2), general_colour, c2),
         c3 = ifelse(is.na(c3), general_colour, c3),
         c4 = ifelse(is.na(c4), general_colour, c4))&lt;/p&gt;

&lt;h2 id=&#34;create-six-plots&#34;&gt;create six plots:&lt;/h2&gt;

&lt;h1 id=&#34;just-the-names-by-setting-alpha-to-0&#34;&gt;Just the names, by setting alpha to 0:&lt;/h1&gt;

&lt;p&gt;g0 &amp;lt;- ggplot(colour, aes(x = general_colour)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;, alpha = 0) +
  coord_flip() +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        axis.title.x = element_blank(), panel.grid = element_blank(),
        axis.title.y = element_blank())&lt;/p&gt;

&lt;p&gt;g &amp;lt;- ggplot(colour, aes(x = general_colour, color = general_colour,
                   fill = general_colour)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$general_colour) +
  scale_fill_manual(values = colour$general_colour) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_1 &amp;lt;- ggplot(colour, aes(x = c1, color = c1,
                        fill = c1)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c1) +
  scale_fill_manual(values = colour$c1) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_2 &amp;lt;- ggplot(colour, aes(x = c2, color = c2,
                        fill = c2)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c2) +
  scale_fill_manual(values = colour$c2) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_3 &amp;lt;- ggplot(colour, aes(x = c3, color = c3,
                        fill = c3)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c3) +
  scale_fill_manual(values = colour$c3) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_4 &amp;lt;- ggplot(colour, aes(x = c4, color = c4,
                        fill = c4)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c4) +
  scale_fill_manual(values = colour$c4) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;library(cowplot)&lt;/p&gt;

&lt;h1 id=&#34;here-i-create-a-pdf-but-you-can-just-as-easily-create-a&#34;&gt;Here I create a pdf, but you can just as easily create a&lt;/h1&gt;

&lt;h1 id=&#34;png-or-a-jpeg&#34;&gt;png or a jpeg.&lt;/h1&gt;

&lt;p&gt;pdf(file = &amp;ldquo;color_chart_dplyr.pdf&amp;rdquo;, height = 35, width = 8)
plot_grid(g0, g, g_1, g_2, g_3, g_4, align = &amp;ldquo;h&amp;rdquo;, ncol = 6,
          rel_widths = c(.75, 1.05, 1.05, 1.05, 1.05, 1.05))
dev.off()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src = &#34;http://i.imgur.com/JVXhXyj.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ranking Brad Pitt‚Äôs Movies in R</title>
      <link>/1/01/01/ranking-brad-pitts-movies-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/ranking-brad-pitts-movies-in-r/</guid>
      <description>

&lt;p&gt;So I saw &lt;a href=&#34;http://movies.prettyfamous.com/stories/24289/ranking-every-brad-pitt-movie-from-worst-to-first&#34;&gt;this&lt;/a&gt; blog post, in which &lt;a href=&#34;http://www.prettyfamous.com/&#34;&gt;Pretty Famous&lt;/a&gt; ranked every one of Brad Pitt&amp;rsquo;s movies (I have no idea how I came across it, I&amp;rsquo;m not particularly a movie buff or a fan of Se√±or Pitt, but anyway). Then I wondered how easy/hard it would be to do something like that in R. Pretty Famous used a few sources, but here I&amp;rsquo;m going to stick to Rotten Tomatoes, since it&amp;rsquo;s a pretty well-known movie ratings site, maybe the most well-known. Pretty famous, you could say (ugh, apologies).&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t have much experience scraping information from the web, we first need to find the unique url for Brad Pitt. In other words, his &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/brad_pitt/&#34;&gt;personal page&lt;/a&gt;&amp;rdquo; on Rotten Tomatoes. Once we&amp;rsquo;ve done that, we need to identify what part of the page we want to scrape. In this case, that is the &amp;ldquo;Movies&amp;rdquo; table. You can right-click on this table and click &amp;ldquo;Inspect&amp;rdquo; or &amp;ldquo;Inspect Element&amp;rdquo; on your browser (I&amp;rsquo;m using Chrome on a macbook, but it should be pretty similar on other browsers). Once you find the &lt;em&gt;actual&lt;/em&gt; table, instead of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element holding it, or just a title, then copy the selector of that element. This can be done on Chrome by right clicking the line in the &amp;lsquo;Elements&amp;rsquo; panel that comes up when you right-click and click &amp;lsquo;Inspect&amp;rsquo;. You will have an option to &amp;lsquo;Copy&amp;rsquo;, then choose &amp;lsquo;Copy selector&amp;rsquo; (you can choose xpath if you want, but css is simpler). In any case, the elements will be highlighted on the page as you click on them.&lt;/p&gt;

&lt;p&gt;In R, we can use the &lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt; package to read the page, store the nodes of the web document that we want and then extract the table from this node set. The &amp;lsquo;table&amp;rsquo; ends up as a list of two dataframes, Brad Pitt&amp;rsquo;s films and TV appearances. His movies are in the first dataframe and so we extract that one out, as a dataframe called &amp;lsquo;movies&amp;rsquo;. Of course, in some of these movies he had a larger role than others, and can be said to have had a bigger impact on the rating score. But, hey, this is informal analysis.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(tidyverse)
library(rvest)
library(lubridate)&lt;/p&gt;

&lt;p&gt;url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/brad_pitt/&amp;quot;&#34;&gt;https://www.rottentomatoes.com/celebrity/brad_pitt/&amp;quot;&lt;/a&gt;
page &amp;lt;- read_html(url)
tb_x &amp;lt;- html_nodes(page, css = &amp;ldquo;#filmographyTbl&amp;rdquo;)
tb &amp;lt;- html_table(tb_x)
movies &amp;lt;- tb[[1]]
head(movies)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title&#34;&gt;RATING                               TITLE&lt;/h2&gt;

&lt;h2 id=&#34;1-no-score-yet-world-war-z-2&#34;&gt;1 No Score Yet                       World War Z 2&lt;/h2&gt;

&lt;h2 id=&#34;2-87-the-lost-city-of-z&#34;&gt;2          87%                  The Lost City of Z&lt;/h2&gt;

&lt;h2 id=&#34;3-no-score-yet-brad-s-status&#34;&gt;3 No Score Yet                       Brad&amp;rsquo;s Status&lt;/h2&gt;

&lt;h2 id=&#34;4-61-allied&#34;&gt;4          61%                              Allied&lt;/h2&gt;

&lt;h2 id=&#34;5-98-moonlight&#34;&gt;5          98%                           Moonlight&lt;/h2&gt;

&lt;h2 id=&#34;6-92-voyage-of-time-the-imax-experience&#34;&gt;6          92% Voyage of Time: The IMAX Experience&lt;/h2&gt;

&lt;h2 id=&#34;credit&#34;&gt;CREDIT&lt;/h2&gt;

&lt;h2 id=&#34;1-gerry-lane-n-n-n-producer&#34;&gt;1 Gerry Lane\n                                                \n                                \n                                        Producer&lt;/h2&gt;

&lt;h2 id=&#34;2-executive-producer&#34;&gt;2                                                                                                                               Executive Producer&lt;/h2&gt;

&lt;h2 id=&#34;3-actor&#34;&gt;3                                                                                                                                            Actor&lt;/h2&gt;

&lt;h2 id=&#34;4-max-vatan&#34;&gt;4                                                                                                                                        Max Vatan&lt;/h2&gt;

&lt;h2 id=&#34;5-executive-producer&#34;&gt;5                                                                                                                               Executive Producer&lt;/h2&gt;

&lt;h2 id=&#34;6-producer&#34;&gt;6                                                                                                                                         Producer&lt;/h2&gt;

&lt;h2 id=&#34;year&#34;&gt;YEAR&lt;/h2&gt;

&lt;h2 id=&#34;1-2017&#34;&gt;1 2017&lt;/h2&gt;

&lt;h2 id=&#34;2-2017&#34;&gt;2 2017&lt;/h2&gt;

&lt;h2 id=&#34;3-2017&#34;&gt;3 2017&lt;/h2&gt;

&lt;h2 id=&#34;4-2016&#34;&gt;4 2016&lt;/h2&gt;

&lt;h2 id=&#34;5-2016&#34;&gt;5 2016&lt;/h2&gt;

&lt;h2 id=&#34;6-2016&#34;&gt;6 2016&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ve got Mr. Pitt&amp;rsquo;s movies in a dataframe, with their rating, title, producer credits and year.  Since anything with &amp;ldquo;No Score Yet&amp;rdquo; is not of particular use to us, let&amp;rsquo;s remove it. We also could do with changing &amp;ldquo;87%&amp;rdquo; to an actual number, i.e. 0.87, and we&amp;rsquo;ll take out the movies in which he had no acting role, and try to clean up all those spaces and new lines.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
&amp;lsquo;%ni%&amp;rsquo; &amp;lt;- Negate(&amp;lsquo;%in%&amp;rsquo;)
movies &amp;lt;- movies %&amp;gt;%
  mutate(CREDIT = gsub(&amp;rdquo;\r\n&amp;rdquo;, &amp;ldquo;&amp;rdquo;, CREDIT)) %&amp;gt;%
  filter(RATING != &amp;ldquo;No Score Yet&amp;rdquo;,
         CREDIT %ni% c(&amp;ldquo;Producer&amp;rdquo;, &amp;ldquo;Executive Producer&amp;rdquo;),
         TITLE %ni% c(&amp;ldquo;Selma&amp;rdquo;, &amp;ldquo;The Time Traveler&amp;rsquo;s Wife&amp;rdquo;)) %&amp;gt;%
  mutate(RATING = gsub(&amp;ldquo;%&amp;rdquo;, &amp;ldquo;&amp;rdquo;, RATING),
         RATING = as.numeric(RATING),
         RATING = RATING/100)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So how do the ratings for his Pittness stack up? Let&amp;rsquo;s have a look-see, Rotten Tomatoes style:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(grid)
library(png)&lt;/p&gt;

&lt;p&gt;tomato &amp;lt;- readPNG(&amp;ldquo;/Users/robert/RobertMyles.github.io/images/tomato.png&amp;rdquo;)
g &amp;lt;- rasterGrob(tomato, interpolate=TRUE)&lt;/p&gt;

&lt;p&gt;ggplot(movies, aes(x = RATING)) +
  geom_histogram(bins = 20, fill = &amp;ldquo;#EE4000&amp;rdquo;, colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme_classic() +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;)) +
  annotation_custom(g, xmin=0, xmax=0.25, ymin=4, ymax=6)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-3-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(You can get the tomato image from &lt;a href=&#34;http://static.tvtropes.org/pmwiki/pub/images/rotten_tomatoes_8290.jpg&#34;&gt;here&lt;/a&gt;. Convert it to png and strip out (most of) the white background using &lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt; &amp;ndash; the command on a mac is &lt;code&gt;convert rotten_tomatoes.jpg -transparent white tomato.png&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Not so bad! Got some not-so-greats, but quite a lot of highly rated movies. I&amp;rsquo;m surprised, actually. In fact the mean and median values are:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
mean(movies$RATING)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;1-0-6508511&#34;&gt;[1] 0.6508511&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight r %}
median(movies$RATING)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;1-0-7&#34;&gt;[1] 0.7&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I wonder if his movies have gotten better? I was always under the impression that Brad Pitt was an actor who, like Leonardo DiCaprio, actually learned to act over time, instead of already being a talented actor when he started. Fair credit to them, though, they could have just rested on their laurels after they first became famous.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at how the ratings have change over time and see if Brad has gotten better or worse, judging by the film that came before.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies &amp;lt;- movies %&amp;gt;%
  arrange(YEAR) %&amp;gt;%
  mutate(difference = c(0, diff(RATING, lag = 1)),
         date_counter = 1:nrow(.))&lt;/p&gt;

&lt;p&gt;ggplot(movies, aes(x = date_counter, y = difference)) +
  geom_line(colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme_classic() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;1989&amp;rdquo;, x = 2, y = -0.7, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;2016&amp;rdquo;, x = 47, y = -0.7, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  geom_hline(yintercept = 0, linetype = 2, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  annotation_custom(g, xmin=0, xmax=7, ymin=0.5, ymax=0.95)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-5-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm, he&amp;rsquo;s had a fairly erratic career in terms of movie ratings. Looking at the relationship between ratings and time, there&amp;rsquo;s a bit of an improvement, and certainly less train-wrecks, but the improvement is not massive. Maybe he didn&amp;rsquo;t start off so bad, after all.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot(movies, aes(x = YEAR, y = RATING)) +
  geom_point(colour = &amp;ldquo;yellow&amp;rdquo;) +
  geom_smooth(method = &amp;ldquo;lm&amp;rdquo;, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotation_custom(g, xmin=2013, xmax=2016, ymin=0.01, ymax=0.25)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-6-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So what was Mr. Pitt&amp;rsquo;s worst film?&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies %&amp;gt;% arrange(RATING) %&amp;gt;% head(n = 1)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title-credit-year-difference-date-counter&#34;&gt;RATING      TITLE            CREDIT YEAR difference date_counter&lt;/h2&gt;

&lt;h2 id=&#34;1-0-04-cool-world-det-frank-harris-1992-0-79-5&#34;&gt;1   0.04 Cool World Det. Frank Harris 1992      -0.79            5&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Wow! 0.04!! I have never seen &amp;lsquo;Cool World&amp;rsquo;, but it can&amp;rsquo;t be that bad&amp;hellip;can it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/2oUrH2J.jpg&#34; alt=&#34;&#34; /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hmm, maybe it can&amp;hellip;&lt;/p&gt;

&lt;p&gt;And his best?&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies %&amp;gt;% arrange(desc(RATING)) %&amp;gt;% select(RATING, TITLE) %&amp;gt;% head(n = 1)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title-1&#34;&gt;RATING            TITLE&lt;/h2&gt;

&lt;h2 id=&#34;1-0-96-12-years-a-slave&#34;&gt;1   0.96 12 Years a Slave&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;12 Years a Slave. Well, that was a fine movie, and I thought Fassbender was fantastic, as usual. Which makes me think about how Brad Pitt compares to other actors of his generation. Fassbender might be a comparative late starter, but let&amp;rsquo;s see how he and some others (George Clooney, Leonardo DiCaprio, Daniel Day-Lewis, Jamie Foxx and Tom Cruise) compare to Brad Pitt in terms of ratings (earnings might be another interesting comparison). We can use the work we did earlier as an outline for a function to do the same as we did for Bradley for all these male actors, adding a column with a name of the actor.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(reshape)&lt;/p&gt;

&lt;p&gt;actors &amp;lt;- c(&amp;ldquo;george_clooney&amp;rdquo;, &amp;ldquo;leonardo_di_caprio&amp;rdquo;, &amp;ldquo;daniel_daylewis&amp;rdquo;,
            &amp;ldquo;jamie_foxx&amp;rdquo;, &amp;ldquo;tom_cruise&amp;rdquo;, &amp;ldquo;michael_fassbender&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;base_url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/&amp;quot;&#34;&gt;https://www.rottentomatoes.com/celebrity/&amp;quot;&lt;/a&gt;
movie_list &amp;lt;- list()&lt;/p&gt;

&lt;p&gt;for(actor in actors){
  url &amp;lt;- paste0(base_url, actor, &amp;ldquo;/&amp;rdquo;)
  page &amp;lt;- read_html(url)
  tb_x &amp;lt;- html_nodes(page, css = &amp;ldquo;#filmographyTbl&amp;rdquo;)
  tb &amp;lt;- html_table(tb_x)
  movie &amp;lt;- tb[[1]]
  movie_list[[actor]] &amp;lt;- movie
  movie_list[[actor]]$ACTOR &amp;lt;- actor
  names(movie_list[actor]) &amp;lt;- actor
}&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- merge_all(movie_list)&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- all&lt;em&gt;actors %&amp;gt;%
  mutate(CREDIT = gsub(&amp;rdquo;\r\n&amp;rdquo;, &amp;ldquo;&amp;rdquo;, CREDIT)) %&amp;gt;%
  filter(RATING != &amp;ldquo;No Score Yet&amp;rdquo;,
         CREDIT %ni% c(&amp;ldquo;Producer&amp;rdquo;, &amp;ldquo;Executive Producer&amp;rdquo;,
                       &amp;ldquo;Director Producer&amp;rdquo;)) %&amp;gt;%
  mutate(RATING = gsub(&amp;ldquo;%&amp;rdquo;, &amp;ldquo;&amp;rdquo;, RATING),
         RATING = as.numeric(RATING),
         RATING = RATING/100,
         ACTOR = gsub(&amp;rdquo;&lt;/em&gt;&amp;rdquo;, &amp;ldquo; &amp;ldquo;, ACTOR))&lt;/p&gt;

&lt;p&gt;movies &amp;lt;- movies %&amp;gt;%
  mutate(ACTOR = &amp;ldquo;brad pitt&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- full_join(all_actors, movies) %&amp;gt;%
  select(-c(difference, date_counter))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So, now that we&amp;rsquo;ve done all that, let&amp;rsquo;s have a look at how these chaps compare!&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot(all_actors, aes(y = RATING, x = ACTOR)) +
  geom_boxplot(fill = &amp;ldquo;#EE4000&amp;rdquo;, colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.text.x = element_text(angle = 15, hjust = 1,
                                   colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.text.y = element_text(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.ticks = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.title = element_text(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotation_custom(g, xmin=1.5, xmax=2.5, ymin=0.01, ymax=0.25)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-10-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-10&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not surprisingly, the three-time Best Actor Oscar winner Daniel Day-Lewis has a notably different profile. He doesn&amp;rsquo;t make many bad movies, that&amp;rsquo;s for sure (there&amp;rsquo;s nothing under the tomato image). Poor Jamie Foxx, on the other hand, has made quite a few more stinkers. Perhaps opportunities were harder to come by for the only black actor in the group, perhaps not.&lt;/p&gt;

&lt;p&gt;So after all that, what do we think of Meister Pitt? He compares very favourably to some of his peers, with maybe only Fassbender and Day-Lewis on a different level. Still, though, not bad, Mr. Pitt. Even after Mr. and Mrs. Smith :wink:&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/yBsAkLa.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-creating Plots from The Economist in R and ggplot2</title>
      <link>/1/01/01/re-creating-plots-from-the-economist-in-r-and-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/re-creating-plots-from-the-economist-in-r-and-ggplot2/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/1xvEaYe.png?3&#34; align=&#34;middle&#34; style=&#34;width:200px; height:350px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The Economist is well known for its graphs and images, and I personally like them a lot. I was doing some work on Brexit when I spied the image above, and thought how much I would like to make something similar. Since my go-to environment is R, and its go-to plotting package &lt;code&gt;ggplot2&lt;/code&gt;, I thought I&amp;rsquo;d try to recreate the image using these tools. (Hat tip: I was half-way through doing this, and getting a little irritated with British place names, when I came across this fantastic &lt;a href=&#34;http://rpubs.com/rouille/191996&#34;&gt;RPub&lt;/a&gt;, which helped a lot with the area names. The code below that deals with cleaning up and merging the administrative area data comes from Benjamin. Thanks, chief!)&lt;/p&gt;

&lt;p&gt;The data that we start off with is available from the UK &lt;a href=&#34;http://www.electoralcommission.org.uk/find-information-by-subject/elections-and-referendums/past-elections-and-referendums/eu-referendum&#34;&gt;Electoral Commission&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(rgdal)
library(maptools)
library(dplyr)
library(ggplot2)
library(readr)
library(httr)
library(ggmap)
library(scales)&lt;/p&gt;

&lt;p&gt;brex &amp;lt;- read_csv(&amp;ldquo;&lt;a href=&#34;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/EU-referendum-result-data.csv&amp;quot;&#34;&gt;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/EU-referendum-result-data.csv&amp;quot;&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;fix-up-place-names&#34;&gt;Fix up place names:&lt;/h1&gt;

&lt;p&gt;uk.map &amp;lt;- readOGR(dsn = &amp;ldquo;GBR_adm_shp&amp;rdquo;, layer = &amp;ldquo;GBR_adm2&amp;rdquo;, verbose = FALSE)
uk.map@data$NAME_2 &amp;lt;- as.character(uk.map@data$NAME_2)
uk.map@data$NAME_2[56]  &amp;lt;- &amp;ldquo;City of London&amp;rdquo;
uk.map@data$NAME_2[140] &amp;lt;- &amp;ldquo;Aberdeen City&amp;rdquo;
uk.map@data$NAME_2[145] &amp;lt;- &amp;ldquo;Dundee City&amp;rdquo;
uk.map@data$NAME_2[150] &amp;lt;- &amp;ldquo;City of Edinburgh&amp;rdquo;
uk.map@data$NAME_2[154] &amp;lt;- &amp;ldquo;Glasgow City&amp;rdquo;
uk.map@data$NAME_2[159] &amp;lt;- &amp;ldquo;North Ayrshire&amp;rdquo;
uk.map@data$NAME_2[162] &amp;lt;- &amp;ldquo;Perth and Kinross&amp;rdquo;
uk.map@data$NAME_2[171] &amp;lt;- &amp;ldquo;Isle of Anglesey&amp;rdquo;
uk.map@data$NAME_2[188] &amp;lt;- &amp;ldquo;Rhondda Cynon Taf&amp;rdquo;&lt;/p&gt;

&lt;p&gt;url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_English_districts&amp;quot;&#34;&gt;https://en.wikipedia.org/wiki/List_of_English_districts&amp;quot;&lt;/a&gt;
tables &amp;lt;- GET(url)
tables &amp;lt;- readHTMLTable(rawToChar(tables$content))
n.rows &amp;lt;- unlist(lapply(tables, function(t) dim(t)[1]))&lt;/p&gt;

&lt;p&gt;districts &amp;lt;- tables[[which.max(n.rows)]]
names(districts) &amp;lt;- c(&amp;ldquo;Name&amp;rdquo;, &amp;ldquo;Website&amp;rdquo;, &amp;ldquo;Population2015&amp;rdquo;, &amp;ldquo;Type&amp;rdquo;,
&amp;ldquo;CeremonialCounty&amp;rdquo;)
districts$Name &amp;lt;- gsub(&amp;rdquo;&amp;amp;&amp;ldquo;, &amp;ldquo;and&amp;rdquo;, districts$Name)
districts$Name[133] &amp;lt;- &amp;ldquo;Kingston upon Hull&amp;rdquo;
districts$id     &amp;lt;- NA
districts$Leave  &amp;lt;- 0
districts$Remain &amp;lt;- 0
districts$Valid  &amp;lt;- 0&lt;/p&gt;

&lt;p&gt;wEngland &amp;lt;- which(uk.map@data$NAME_1 == &amp;ldquo;England&amp;rdquo;)
for(i in wEngland ) {
  if(uk.map$TYPE_2[i] == &amp;ldquo;Administrative County&amp;rdquo; | uk.map$TYPE_2[i] == &amp;ldquo;Metropolitan County&amp;rdquo; |
     uk.map$TYPE_2[i] == &amp;ldquo;County&amp;rdquo; | uk.map$TYPE_2[i] == &amp;ldquo;Metropolitan Borough (city)&amp;rdquo;) {
    match &amp;lt;- grep(uk.map$NAME_2[i], districts$CeremonialCounty)
    for(j in match) if(is.na(districts$id[j]) ) districts$id[j] &amp;lt;- uk.map$ID_2[i]
  } else {
    match &amp;lt;- match(uk.map$NAME_2[i], districts$Name)
    districts$id[match] &amp;lt;- uk.map$ID_2[i]
  }
}&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(districts) ) {
  match &amp;lt;- match(districts$Name[i], brex$Area)
  if(is.na(match) ) match &amp;lt;- grep(districts$Name[i], brex$Area)
  districts$Leave[i]  &amp;lt;- brex$Leave[match]
  districts$Remain[i] &amp;lt;- brex$Remain[match]
  districts$Valid[i]  &amp;lt;- brex$Valid_Votes[match]
}&lt;/p&gt;

&lt;p&gt;england &amp;lt;- with(districts, data.frame(Name   = uk.map@data$NAME_2[wEngland],
           Leave  = tapply(Leave, id, sum, na.rm = TRUE),
           Remain = tapply(Remain, id, sum, na.rm = TRUE),
           Valid  = tapply(Valid, id, sum, na.rm = TRUE),
           Country = &amp;ldquo;England&amp;rdquo;,
           id     = uk.map@data$ID_2[wEngland]))&lt;/p&gt;

&lt;p&gt;wIreland &amp;lt;- which(uk.map@data$NAME_1 == &amp;ldquo;Northern Ireland&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;ireland &amp;lt;- with(brex, data.frame(Name   = uk.map@data$NAME_2[wIreland],
                                 Country = &amp;ldquo;N. Ireland&amp;rdquo;,
                                 Leave  = rep(Leave[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 Remain = rep(Remain[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 Valid  = rep(Valid_Votes[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 id     = uk.map@data$ID_2[wIreland]))&lt;/p&gt;

&lt;p&gt;scotland &amp;lt;- with(brex, data.frame(Name   = Area[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Leave  = Leave[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Country = &amp;ldquo;Scotland&amp;rdquo;,
                                  Remain = Remain[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Valid  = Valid_Votes[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  id     = rep(NA,length(grep(&amp;ldquo;S&amp;rdquo;,Region_Code)) ) ) )&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(scotland) ) {
  match &amp;lt;- match(scotland$Name[i],uk.map@data$NAME_2)
  scotland$id[i] &amp;lt;- uk.map@data$ID_2[match]
}
wales &amp;lt;- with(brex, data.frame(Name   = Area[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Leave  = Leave[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Country = &amp;ldquo;Wales&amp;rdquo;,
                               Remain = Remain[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Valid  = Valid_Votes[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               id     = length(grep(&amp;ldquo;W&amp;rdquo;,Region_Code) ) ) )&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(wales) ) {
  match &amp;lt;- match(wales$Name[i],uk.map@data$NAME_2)
  wales$id[i] &amp;lt;- uk.map@data$ID_2[match]
}&lt;/p&gt;

&lt;p&gt;cities.name2 &amp;lt;- c(&amp;ldquo;Blackburn, UK&amp;rdquo;, &amp;ldquo;Port Talbot, UK&amp;rdquo;, &amp;ldquo;Northampton, UK&amp;rdquo;, &amp;ldquo;London, UK&amp;rdquo;)
cities.coordinates &amp;lt;- geocode(cities.name2, messaging = FALSE)
cities.lon &amp;lt;- cities.coordinates$lon
cities.lat &amp;lt;- cities.coordinates$lat&lt;/p&gt;

&lt;p&gt;uk &amp;lt;- rbind(england, ireland, scotland, wales)
uk$pct_Leave  &amp;lt;- 100*uk$Leave/uk$Valid
uk$pct_Remain &amp;lt;- 100*uk$Remain/uk$Valid&lt;/p&gt;

&lt;p&gt;uk.points &amp;lt;- fortify(uk.map, region = &amp;ldquo;ID_2&amp;rdquo;)
uk$id &amp;lt;- as.character(uk$id)
uk.plot &amp;lt;- left_join(uk.points,uk)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;All of this has given us &lt;em&gt;almost&lt;/em&gt; what we need. The areas in the Economist&amp;rsquo;s image don&amp;rsquo;t quite match up with the administrative districts from the Electoral Commission data, in the sense that many are amalgamations of admistrative districts. Since we don&amp;rsquo;t have any variable in our dataset describing this mapping, we&amp;rsquo;ll have to do this manually.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;uk.plot$Import_shock &amp;lt;- NA&lt;/p&gt;

&lt;p&gt;One &amp;lt;- c(&amp;ldquo;Cumbria&amp;rdquo;, &amp;ldquo;Lancashire&amp;rdquo;, &amp;ldquo;Northamptonshire&amp;rdquo;, &amp;ldquo;Leicestershire&amp;rdquo;, &amp;ldquo;Leicester&amp;rdquo;, &amp;ldquo;Blackburn with Darwen&amp;rdquo;, &amp;ldquo;Manchester&amp;rdquo;, &amp;ldquo;Rutland&amp;rdquo;)
Two &amp;lt;- c(&amp;ldquo;Telford and Wrekin&amp;rdquo;, &amp;ldquo;Derbyshire&amp;rdquo;, &amp;ldquo;West Midlands&amp;rdquo;, &amp;ldquo;Stoke-on-Trent&amp;rdquo;, &amp;ldquo;Shropshire&amp;rdquo;, &amp;ldquo;Staffordshire&amp;rdquo;, &amp;ldquo;Nottinghamshire&amp;rdquo;, &amp;ldquo;Derby&amp;rdquo;, &amp;ldquo;Nottingham&amp;rdquo;, &amp;ldquo;West Yorkshire&amp;rdquo;)
Three &amp;lt;- c(&amp;ldquo;Herefordshire&amp;rdquo;, &amp;ldquo;Worcestershire&amp;rdquo;, &amp;ldquo;Essex&amp;rdquo;, &amp;ldquo;Warwickshire&amp;rdquo;, &amp;ldquo;Southend-on-Sea&amp;rdquo;, &amp;ldquo;Thurrock&amp;rdquo;, &amp;ldquo;Havering&amp;rdquo;)
Four &amp;lt;- c(&amp;ldquo;Bridgend&amp;rdquo;, &amp;ldquo;Isle of Anglesey&amp;rdquo;, &amp;ldquo;Gwynedd&amp;rdquo;, &amp;ldquo;Ceredigion&amp;rdquo;, &amp;ldquo;Carmarthenshire&amp;rdquo;, &amp;ldquo;Pembrokeshire&amp;rdquo;, &amp;ldquo;Swansea&amp;rdquo;, &amp;ldquo;Rhondda Cynon Taf&amp;rdquo;, &amp;ldquo;Neath Port Talbot&amp;rdquo;, &amp;ldquo;Caerphilly&amp;rdquo;, &amp;ldquo;Merthyr Tydfil&amp;rdquo;, &amp;ldquo;Torfaen&amp;rdquo;, &amp;ldquo;Somerset&amp;rdquo;, &amp;ldquo;Dorset&amp;rdquo;, &amp;ldquo;Isle of Wight&amp;rdquo;, &amp;ldquo;Hampshire&amp;rdquo;, &amp;ldquo;Conwy&amp;rdquo;, &amp;ldquo;Suffolk&amp;rdquo;, &amp;ldquo;Durham&amp;rdquo;, &amp;ldquo;Tyne and Wear&amp;rdquo;, &amp;ldquo;Denbighshire&amp;rdquo;, &amp;ldquo;Cambridgeshire&amp;rdquo;, &amp;ldquo;Luton&amp;rdquo;, &amp;ldquo;Hertfordshire&amp;rdquo;, &amp;ldquo;Bedfordshire&amp;rdquo;, &amp;ldquo;Berkshire&amp;rdquo;, &amp;ldquo;Poole&amp;rdquo;, &amp;ldquo;Southampton&amp;rdquo;, &amp;ldquo;Portsmouth&amp;rdquo;, &amp;ldquo;Redcar and Cleveland&amp;rdquo;, &amp;ldquo;Stockton-on-Tees&amp;rdquo;, &amp;ldquo;Darlington&amp;rdquo;, &amp;ldquo;Hartlepool&amp;rdquo;, &amp;ldquo;Bornemouth&amp;rdquo;, &amp;ldquo;Blaenau Gwent&amp;rdquo;)
Five &amp;lt;- c(&amp;ldquo;Northumberland&amp;rdquo;, &amp;ldquo;Norfolk&amp;rdquo;, &amp;ldquo;South Yorkshire&amp;rdquo;, &amp;ldquo;Enfield&amp;rdquo;, &amp;ldquo;Brent&amp;rdquo;)
Six &amp;lt;- c(&amp;ldquo;South Ayrshire&amp;rdquo;, &amp;ldquo;North Ayshire&amp;rdquo;, &amp;ldquo;Dumfries and Galloway&amp;rdquo;, &amp;ldquo;South Lanarkshire&amp;rdquo;, &amp;ldquo;North Lanarkshire&amp;rdquo;, &amp;ldquo;East Ayrshire&amp;rdquo;, &amp;ldquo;Renfrewshire&amp;rdquo;, &amp;ldquo;West Dunbartonshire&amp;rdquo;, &amp;ldquo;East Renfrewshire&amp;rdquo;, &amp;ldquo;Glasgow City&amp;rdquo;, &amp;ldquo;East Dunbartonshire&amp;rdquo;, &amp;ldquo;Inverclyde&amp;rdquo;, &amp;ldquo;Lincolnshire&amp;rdquo;, &amp;ldquo;West Sussex&amp;rdquo;, &amp;ldquo;East Sussex&amp;rdquo;, &amp;ldquo;Brighton and Hove&amp;rdquo;, &amp;ldquo;Surrey&amp;rdquo;, &amp;ldquo;Oxfordshire&amp;rdquo;, &amp;ldquo;Buckinghamshire&amp;rdquo;, &amp;ldquo;Milton Keynes&amp;rdquo;, &amp;ldquo;Peterborough&amp;rdquo;, &amp;ldquo;Sutton&amp;rdquo;, &amp;ldquo;Croydon&amp;rdquo;)
Seven &amp;lt;- c(&amp;ldquo;Angus&amp;rdquo;, &amp;ldquo;Dundee City&amp;rdquo;, &amp;ldquo;Scottish Borders&amp;rdquo;, &amp;ldquo;East Lothian&amp;rdquo;, &amp;ldquo;Midlothian&amp;rdquo;, &amp;ldquo;Fife&amp;rdquo;, &amp;ldquo;Perth and Kinross&amp;rdquo;, &amp;ldquo;City of Edinburgh&amp;rdquo;, &amp;ldquo;Stirling&amp;rdquo;, &amp;ldquo;Falkirk&amp;rdquo;, &amp;ldquo;West Lothian&amp;rdquo;, &amp;ldquo;Clackmannanshire&amp;rdquo;, &amp;ldquo;Powys&amp;rdquo;, &amp;ldquo;Cheshire&amp;rdquo;, &amp;ldquo;Vale of Glamorgan&amp;rdquo;, &amp;ldquo;Newport&amp;rdquo;, &amp;ldquo;Cardiff&amp;rdquo;, &amp;ldquo;Warrington&amp;rdquo;, &amp;ldquo;Halton&amp;rdquo;, &amp;ldquo;Flintshire&amp;rdquo;, &amp;ldquo;Wrexham&amp;rdquo;, &amp;ldquo;Monmouthshire&amp;rdquo;, &amp;ldquo;Bromley&amp;rdquo;, &amp;ldquo;Hillingdon&amp;rdquo;, &amp;ldquo;Harrow&amp;rdquo;)
Eight &amp;lt;- c(&amp;ldquo;Devon&amp;rdquo;, &amp;ldquo;East Riding of Yorkshire&amp;rdquo;, &amp;ldquo;Kent&amp;rdquo;, &amp;ldquo;Merseyside&amp;rdquo;, &amp;ldquo;North East Lincolnshire&amp;rdquo;, &amp;ldquo;Swindon&amp;rdquo;, &amp;ldquo;Wiltshire&amp;rdquo;, &amp;ldquo;Gloucestershire&amp;rdquo;, &amp;ldquo;South Gloucestershire&amp;rdquo;, &amp;ldquo;North Somerset&amp;rdquo;, &amp;ldquo;Torbay&amp;rdquo;, &amp;ldquo;Bath and North East Somerset&amp;rdquo;, &amp;ldquo;Bristol&amp;rdquo;, &amp;ldquo;Kingston upon Hull&amp;rdquo;, &amp;ldquo;North Lincolnshire&amp;rdquo;, &amp;ldquo;Medway&amp;rdquo;)
Nine &amp;lt;- c(&amp;ldquo;Highlands&amp;rdquo;, &amp;ldquo;Argyll and Bute&amp;rdquo;, &amp;ldquo;North Yorkshire&amp;rdquo;, &amp;ldquo;Cornwall&amp;rdquo;, &amp;ldquo;Eilean Siar&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;uk.plot1 &amp;lt;- uk.plot %&amp;gt;%
  filter(Name != &amp;ldquo;Shetland Islands&amp;rdquo;) %&amp;gt;%
  filter(Country != &amp;ldquo;N. Ireland&amp;rdquo;) %&amp;gt;%
  mutate(Import_shock = if_else(Name %in% One, 1, if_else(Name %in% Two, 2, if_else(Name %in% Three, 3, if_else(Name %in% Four, 4, if_else(Name %in% Five, 5, if_else(Name %in% Six, 6, if_else(Name %in% Seven, 7, if_else(Name %in% Eight, 8, if_else(Name %in% Nine, 9, 9)))))))))) %&amp;gt;%
  filter(long &amp;gt; -10)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So, after all that data tidying, we&amp;rsquo;re ready to make our plot. Since the Economist uses the ITC Officina Sans font, you&amp;rsquo;ll need that on your computer (or something similar). With the &lt;code&gt;extrafont&lt;/code&gt; package, we can take avail of these, well, extra fonts.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(extrafont)
font_import()&lt;/p&gt;

&lt;h1 id=&#34;there-are-various-folders-on-my-mac-with-fonts-in-them&#34;&gt;There are various folders on my mac with fonts in them:&lt;/h1&gt;

&lt;p&gt;font_import(&amp;ldquo;/Users/robert/Library/Fonts/&amp;rdquo;)
font_import(&amp;ldquo;/System/Library/Fonts/&amp;rdquo;)
font_import(&amp;ldquo;/Library/Fonts/&amp;rdquo;)
loadfonts()&lt;/p&gt;

&lt;h1 id=&#34;see-what-s-available&#34;&gt;see what&amp;rsquo;s available:&lt;/h1&gt;

&lt;p&gt;fonts()
{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The following code makes the plot that I wanted, with the image saved and the font that I need embedded in the pdf that is produced. In Rstudio, no text will appear, as this font is not supported. But it&amp;rsquo;ll be in the pdf.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;MM &amp;lt;- ggplot() +
  geom_polygon(data = uk.plot1, aes(x = long, y = lat, group = group, fill = Import_shock), colour = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;Reds&amp;rdquo;, breaks = pretty_breaks(n = 8)) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;black&amp;rdquo;, size = 2.5, shape = 21, fill = &amp;ldquo;black&amp;rdquo;) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;white&amp;rdquo;, size = 1, shape = 21, fill = &amp;ldquo;white&amp;rdquo;) +
  theme_nothing(legend = T) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.75, y=52.5, label=&amp;ldquo;WALES&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=1.12, y=53.65, label=&amp;ldquo;ENGLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-2.2, y=57.9, label=&amp;ldquo;SCOTLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.7, y=51.42, label=&amp;ldquo;Port Talbot&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=.3, y=52.15, label=&amp;ldquo;Northampton&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -3.3, xend = -2.5, y = 54, yend = 54) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -2.5, xend = -2.5, y = 54, yend = 53.85) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.22, y=54, label=&amp;ldquo;Blackburn&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  xlim(range(uk.plot1$long)) + ylim(range(uk.plot1$lat)) +
  theme(plot.background = element_rect(fill = &amp;ldquo;#A4D3EE&amp;rdquo;, colour = &amp;ldquo;#A4D3EE&amp;rdquo;), panel.background = element_rect(fill = &amp;ldquo;#A4D3EE&amp;rdquo;, colour = &amp;ldquo;#A4D3EE&amp;rdquo;), legend.position = &amp;ldquo;none&amp;rdquo;) +
  coord_map()&lt;/p&gt;

&lt;p&gt;ggsave(&amp;ldquo;Brexit_test.pdf&amp;rdquo;, MM)
embed_fonts(&amp;ldquo;Brexit_test.pdf&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;http://i.imgur.com/P43D0jh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not &lt;em&gt;exactly&lt;/em&gt; the same (I could &lt;em&gt;not&lt;/em&gt; get that legend to work right!), but I think it&amp;rsquo;s a pretty close match. Good, stuff, R :clap: .&lt;/p&gt;

&lt;p&gt;P.s. I know there are themes available to get close to the Economist&amp;rsquo;s image style, but I wanted do it myself :smiley:. Anyway, if you&amp;rsquo;d like to include the &lt;code&gt;theme_economist()&lt;/code&gt; function from the &lt;code&gt;ggthemes&lt;/code&gt; package, it&amp;rsquo;s easy:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;Eco &amp;lt;- ggplot() +
  geom_polygon(data = uk.plot1, aes(x = long, y = lat, group = group, fill = Import_shock), colour = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;Reds&amp;rdquo;, breaks = pretty_breaks(n = 8)) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;black&amp;rdquo;, size = 2.5, shape = 21, fill = &amp;ldquo;black&amp;rdquo;) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;white&amp;rdquo;, size = 1, shape = 21, fill = &amp;ldquo;white&amp;rdquo;) +
  theme_economist() +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.75, y=52.5, label=&amp;ldquo;WALES&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=1.12, y=53.65, label=&amp;ldquo;ENGLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-2.2, y=57.9, label=&amp;ldquo;SCOTLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.7, y=51.42, label=&amp;ldquo;Port Talbot&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=.3, y=52.15, label=&amp;ldquo;Northampton&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -3.3, xend = -2.5, y = 54, yend = 54) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -2.5, xend = -2.5, y = 54, yend = 53.85) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.22, y=54, label=&amp;ldquo;Blackburn&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  xlim(range(uk.plot1$long)) + ylim(range(uk.plot1$lat)) +
  theme(axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank(), panel.grid.major.y = element_blank(), legend.position = &amp;ldquo;none&amp;rdquo;) +
  coord_map()&lt;/p&gt;

&lt;p&gt;ggsave(&amp;ldquo;Brexit_test_Econ.pdf&amp;rdquo;, Eco)
embed_fonts(&amp;ldquo;Brexit_test_Econ.pdf&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The combination is better, actually:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/t5322ak.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we put them side by side, you can see that we didn&amp;rsquo;t actually do a bad job.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;imgur-embed-pub&#34; lang=&#34;en&#34; data-id=&#34;a/ivQ5t&#34;&gt;&lt;a href=&#34;//imgur.com/ivQ5t&#34;&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;//s.imgur.com/min/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Update: there are (of course) also &lt;a href=&#34;http://rpsychologist.com/creating-a-typical-textbook-illustration-of-statistical-power-using-either-ggplot-or-base-graphics?utm_content=buffer9beb5&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34;&gt;other great examples&lt;/a&gt; of using ggplot2 to recreate images, in this case textbook statistical distributions&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
