<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Lithium Theme</title>
    <link>/categories/blog/</link>
    <description>Recent content in Blog on Lithium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bayesian IRT in R and Stan</title>
      <link>/1/01/01/bayesian-irt-in-r-and-stan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/bayesian-irt-in-r-and-stan/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/v7y6SVt.png?3&#34; align=&#34;middle&#34; style=&#34;width:300px; height:250px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The code below on Stan is also available as an &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;&lt;code&gt;RPub webpage&lt;/code&gt;&lt;/a&gt;, if you&amp;rsquo;d rather work through the examples than read all of the post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;One of the first areas where Bayesian modelling gained an entry point into the social sciences (and in particular political science) was in the area of legislator ideal points, with the use of the Item-Response Theory (IRT) models from the educational testing literature in psychology. This topic proved to be the perfect subject for the comparison of Bayesian and frequentist methods, since ideal point creation usually depends on nominal voting data, which may contain a lot of missing data (legislators who miss votes or abstain) and a huge number of parameters (hundreds of roll-calls by hundreds of legislators). The benefits of Bayesian methods over frequentist techniques for ideal point analysis is discussed at length elsewhere&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but here I&amp;rsquo;ll talk about a side-effect of using Bayesian methods for creating ideal points from roll-call data, that is, the long time it can take to run these models on a desktop computer. (In the following discussion, I refer to &amp;lsquo;legislators&amp;rsquo;, but these IRT models apply to all types of response to a question, whether the &amp;lsquo;question&amp;rsquo; is a vote by a politician or a judge or questions on a test or survey.)&lt;/p&gt;

&lt;p&gt;To create ideal points in &lt;code&gt;R&lt;/code&gt;, you have three or four main options if you want to use ol&amp;rsquo; &lt;a href=&#34;http://robertmyles.github.io//Books-on-Bayes-Stats.html&#34;&gt;Bayes&lt;/a&gt;. First, there is the ready-made &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; command of the package &lt;a href=&#34;https://cran.r-project.org/web/packages/pscl/index.html&#34;&gt;pscl&lt;/a&gt; by Simon Jackman &amp;amp; co. &lt;code&gt;pscl&lt;/code&gt; includes some very handy little functions for those interested in generating ideal points from legislative voting data &amp;ndash; summary statistics and plots are all easy to make, and come ready-made, such as party loyalty statistics, for example. However, &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; suffers somewhat from being so &amp;lsquo;ready&amp;rsquo;: it is a bit unsuited for more complex or indivualistic models compared to some of the options mentioned later. I&amp;rsquo;ve also repeatedly run into problems with &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; when trying to use some of the &lt;code&gt;pscl&lt;/code&gt; package options (&lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;dropList()&lt;/bdi&gt;, for example), or when estimating multidimensional models. In terms of &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&#34;&gt;MCMC&lt;/a&gt;, only one chain at a time may be run. In fact, it is what it says on the tin: it&amp;rsquo;s a Bayesian version of W-NOMINATE, which means it has the advantages of that program (easy to use) and the disadvantages (when it doesn&amp;rsquo;t work you&amp;rsquo;re not sure why&amp;hellip;a bit &amp;lsquo;black-box&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MCMCpack&lt;/code&gt; package also allows for the creation of ideal points, although its output is slightly less friendly to the beginner (an &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;mcmclist&lt;/bdi&gt; object). Its &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;MCMCirt1d()&lt;/bdi&gt; command is pretty similar to &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;ideal()&lt;/bdi&gt; but allows for setting &amp;lsquo;soft&amp;rsquo; constraints rather than the spike prior that pscl uses to pin down the position of (at least) two legislators. This is better for two reasons, in my opinion. First, it avoids a hard constraint on legislators for legislatures in which we do not have strong &lt;em&gt;a priori&lt;/em&gt; evidence to suppose that, for example, Legislator X is an extremist to the right, or Legislator Y to the left (the use of extremist legislators on either end of the supposed scale &amp;lsquo;anchors&amp;rsquo; it). With &lt;code&gt;MCMCpack&lt;/code&gt;, the ideal points of the constrained legislators are drawn from a truncated normal distribution (truncated at zero) and so Legislator X (our extremist to the right) simply cannot have an ideal point on the left side of the scale and the opposite for our left-side extremist legislator (the use of these soft constraints obviates the need for them actually &lt;em&gt;being&lt;/em&gt; extremists too). I&amp;rsquo;ve also found &lt;code&gt;MCMCpack&lt;/code&gt; to be faster, although I haven&amp;rsquo;t tested that formally. In either case, both functions are quite similar. &lt;code&gt;MCMCpack&lt;/code&gt; also has functions for dynamic models, robust &amp;amp; multidimensional models, and Ordinal IRT. They&amp;rsquo;ve all worked well for me with the exception of &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;MCMCirtkd()&lt;/bdi&gt;, the multidimensional model function, which never seems to get started.&lt;/p&gt;

&lt;p&gt;The next option is to use the &lt;code&gt;BUGS&lt;/code&gt; modelling language, either with &lt;code&gt;BUGS&lt;/code&gt; itself or its cousin &lt;code&gt;JAGS&lt;/code&gt;, both of which have been heavily used in the literature but can be &lt;strong&gt;extremely&lt;/strong&gt; slow, for reasons outlined in &lt;a href=&#34;http://robertmyles.github.io//Stan-JAGS.html&#34;&gt;this blog post&lt;/a&gt;. I don&amp;rsquo;t recommend their use for ideal points.&lt;/p&gt;

&lt;p&gt;Next, we have &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt;, which doesn&amp;rsquo;t have the simpler syntax of &lt;code&gt;JAGS&lt;/code&gt; &amp;amp; &lt;code&gt;BUGS&lt;/code&gt;, but is simply incomparably better in terms of speed. However, since it&amp;rsquo;s newer, you won&amp;rsquo;t find the amount of resources available for &lt;code&gt;BUGS&lt;/code&gt;, for example (like &lt;a href=&#34;https://www.jstatsoft.org/article/view/v036c01&#34;&gt;here&lt;/a&gt;). There are a few resources: a simple one-dimensional model can be seen on Pablo Barber√°&amp;rsquo;s &lt;a href=&#34;https://github.com/pablobarbera/quant3materials/blob/master/bayesian/lab14_IRT_issues.R&#34;&gt;github&lt;/a&gt;; a friend of mine, Guilherme Duarte, has an example of a dynamic model on his github &lt;a href=&#34;https://github.com/duarteguilherme/Quinn-Martin-Replication&#34;&gt;too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some other resources available, but relate to slightly different IRT models, more common in the educational-testing literature, and less so in ideal point studies: the &amp;lsquo;Rasch&amp;rsquo; &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/research/unpublished/stan_v_stata.pdf&#34;&gt;model&lt;/a&gt;; the &lt;a href=&#34;https://rpubs.com/rfarouni/64284&#34;&gt;2PL model&lt;/a&gt; (in which a &amp;lsquo;yes&amp;rsquo; answer has a specific associated movement in the dimensional space and the discrimination parameter only takes on postive values; in the ideal-point model of &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/Jackman2001.pdf&#34;&gt;Jackman&lt;/a&gt; it can possess negative and positive values).&lt;/p&gt;

&lt;p&gt;Since there are so few Stan resources for ideal point IRT models, I thought I&amp;rsquo;d post a few models here. The code is also available as an &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;RPub webpage&lt;/a&gt;, as mentioned earlier. The statistical model we&amp;rsquo;ll employ is:
{% raw %}
  $$y_{ij} = \beta_j\bf{x_i} - \alpha&lt;em&gt;j,$$
 {% endraw %}
where ({% raw %}\(y&lt;/em&gt;{ij}\){% endraw %}) are the votes, in binary form (1 = &amp;lsquo;Yes&amp;rsquo;; 2 = &amp;lsquo;No&amp;rsquo;); the {% raw %}\(\bf x_i\){% endraw %} are the ideal points of the legislators; and  {% raw %} \(\beta_j\){% endraw %} and {% raw %}\(\alpha_j\){% endraw %} are the discrimination and difficulty parameters of the model.&lt;/p&gt;

&lt;p&gt;Starting from scratch in &lt;code&gt;R&lt;/code&gt; in a new session (you&amp;rsquo;ll need a C++ compiler if you don&amp;rsquo;t have one, see &lt;a href=&#34;https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
install.packages(&amp;ldquo;RStan&amp;rdquo;)
library(&amp;ldquo;RStan&amp;rdquo;)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Ideal points are created from a &lt;em&gt;j&lt;/em&gt; {% raw %}\(\times\){% endraw %} &lt;em&gt;m&lt;/em&gt; matrix of voting data (&lt;em&gt;j&lt;/em&gt; legislators voting on &lt;em&gt;m&lt;/em&gt; votes), coded &lt;bdi style=&#34;font-family:courier&#34;&gt;1&lt;/bdi&gt; for &amp;lsquo;yes&amp;rsquo; and &lt;bdi style=&#34;font-family:courier&#34;&gt;0&lt;/bdi&gt; for &amp;lsquo;no&amp;rsquo; and abstentions. Missing data are &lt;bdi style=&#34;font-family:courier&#34;&gt;NA&lt;/bdi&gt;, and are deleted out before running in Stan. We can easily simulate data for this type of thing, but let&amp;rsquo;s use a real database. This data is from the 53rd legislature of the Brazilian Federal Senate (with thanks to &lt;a href=&#34;http://www.cebrap.org.br/v2/pages/home&#34;&gt;CEBRAP&lt;/a&gt;, who built the original database, this comes from an extended version I created), we&amp;rsquo;ll download it from my Github repo. You&amp;rsquo;ll need to install &lt;code&gt;readr&lt;/code&gt; if you don&amp;rsquo;t have it. (I also have the bad habit of naming my data as &amp;ldquo;data&amp;rdquo;&amp;hellip; not generally a great idea. It&amp;rsquo;ll be ok here, though.)&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
library(readr)
data &amp;lt;- read_csv(&amp;ldquo;&lt;a href=&#34;https://raw.githubusercontent.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models/master/Senate_Example.csv&amp;quot;&#34;&gt;https://raw.githubusercontent.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models/master/Senate_Example.csv&amp;quot;&lt;/a&gt;)
colnames(data)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s take a look at the data. You&amp;rsquo;ll see the column names are &amp;ldquo;VoteNumber&amp;rdquo;, &amp;ldquo;SenNumber&amp;rdquo;, &amp;ldquo;SenatorUpper&amp;rdquo;, &amp;ldquo;Vote&amp;rdquo;, &amp;ldquo;Party&amp;rdquo;, &amp;ldquo;GovCoalition&amp;rdquo;, &amp;ldquo;State&amp;rdquo;, &amp;ldquo;FP&amp;rdquo;, &amp;ldquo;Origin&amp;rdquo;, &amp;ldquo;Contentious&amp;rdquo;, &amp;ldquo;IndGov&amp;rdquo;, and &amp;ldquo;VoteType&amp;rdquo;. I&amp;rsquo;ve kept them in this state so that we can tidy things up and manipulate things a little, stuff you&amp;rsquo;ll probably have to do any time you deal with real data of this sort. We can also have a look later at different plotting options using some of these variables. First, let&amp;rsquo;s change the votes, which are in the format &amp;ldquo;S&amp;rdquo; (&lt;em&gt;Sim&lt;/em&gt;, &amp;lsquo;Yes&amp;rsquo;), &amp;ldquo;N&amp;rdquo; (&amp;lsquo;No&amp;rsquo;), &amp;ldquo;A&amp;rdquo; (Abstention), and &amp;ldquo;O&amp;rdquo; (Obstruction), to numeric format.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
data$Vote[data$Vote==&amp;ldquo;S&amp;rdquo;] &amp;lt;- 1
data$Vote[data$Vote==&amp;ldquo;N&amp;rdquo;] &amp;lt;- 0
data$Vote[data$Vote  %in% c(NA,&amp;ldquo;O&amp;rdquo;,&amp;ldquo;A&amp;rdquo;)] &amp;lt;- NA
data$Vote &amp;lt;- as.numeric(data$Vote)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Next, we&amp;rsquo;ll create the &amp;lsquo;vote matrix&amp;rsquo;. This is the &lt;em&gt;j&lt;/em&gt; {% raw %}\(\times\){% endraw %} &lt;em&gt;m&lt;/em&gt; matrix that we will use to create the ideal points with Stan. The rows will be the legislators and the columns the votes. We will also need to deal with the issue of &lt;a href=&#34;http://polmeth.wustl.edu/files/polmeth/river03.pdf&#34;&gt;&amp;lsquo;constraints&amp;rsquo;&lt;/a&gt;: we need to identify &lt;em&gt;d(d + 1)&lt;/em&gt; legislators in &lt;em&gt;d&lt;/em&gt; dimensions and constrain their ideal points in some way. For now, we&amp;rsquo;ll just organise our vote matrix in such a way that the two legislators that will be constrained are placed in rows 1 and 2 of the matrix. For this example, we can use Senators Agripino and Suplicy, who belong to two parties that are generally considered to be on opposite sides of the political &amp;lsquo;space&amp;rsquo; that we will place our ideal points upon. Organizing things in this way is not necessary but makes the Stan model code cleaner later on.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
{% highlight R linenos=table %}
data$FullID &amp;lt;- paste(data$SenatorUpper, data$Party, sep=&amp;rdquo;:&amp;ldquo;)
NameID &amp;lt;- unique(data$FullID)
J &amp;lt;- length(unique(NameID))
M &amp;lt;- length(unique(data$VoteNumber))
grep(&amp;ldquo;JOSE AGRIPINO:PFL&amp;rdquo;, NameID)  #34
grep(&amp;ldquo;EDUARDO SUPLICY:PT&amp;rdquo;, NameID) #12
NameID &amp;lt;- NameID[c(34, 12, 1:11, 13:33, 35:J)]&lt;/p&gt;

&lt;p&gt;y &amp;lt;- matrix(NA,J,M)
Rows &amp;lt;- match(data$FullID, NameID)
Cols &amp;lt;- unique(data$VoteNumber)
Columns &amp;lt;- match(data$VoteNumber, Cols)&lt;/p&gt;

&lt;p&gt;for(i in 1:dim(data)[1]){
  y[Rows[i],Columns[i]] &amp;lt;- data$Vote[i]
}&lt;/p&gt;

&lt;p&gt;dimnames(y) &amp;lt;- list(unique(NameID), unique(data$VoteNumber))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I presume you&amp;rsquo;re using RStudio. Clicking on the viewer should show you the vote matrix, which should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/iOh3lfY.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Next we&amp;rsquo;ll make a dataframe of legislator variables which we&amp;rsquo;ll use later on, and one of vote characteristics.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
ldata &amp;lt;- data.frame(FullID=unique(NameID),
                    Party=data$Party[match(unique(NameID), data$FullID)],
                    GovCoalition=data$GovCoalition[match(unique(NameID), data$FullID)],
                    Name=data$SenatorUpper[match(unique(NameID), data$FullID)],
                    State=data$State[match(unique(NameID), data$FullID)],
                    row.names=NULL, stringsAsFactors=FALSE)&lt;/p&gt;

&lt;p&gt;vdata &amp;lt;- data.frame(VoteNumber=unique(data$VoteNumber),
        VoteType=data$VoteType[match(unique(data$VoteNumber), data$VoteNumber)],
        SenNumber=data$SenNumber[match(unique(data$VoteNumber), data$VoteNumber)],
        Origin=data$Origin[match(unique(data$VoteNumber), data$VoteNumber)],
        Contentious=data$Contentious[match(unique(data$VoteNumber),
                    data$VoteNumber)],
        IndGov=data$IndGov[match(unique(data$VoteNumber), data$VoteNumber)],
        stringsAsFactors=F)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Stan is not like &lt;code&gt;JAGS&lt;/code&gt; and &lt;code&gt;BUGS&lt;/code&gt; in that &lt;bdi style=&#34;font-family:courier&#34;&gt;NA&lt;/bdi&gt; is unwieldy to incorporate. The best thing to do is to delete missing data out, as can be seen in Barber√°&amp;rsquo;s script linked to earlier, which I&amp;rsquo;ll copy here.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
N &amp;lt;- length(y)
j &amp;lt;- rep(1:J, times=M)
m &amp;lt;- rep(1:M, each=J)&lt;/p&gt;

&lt;p&gt;miss &amp;lt;- which(is.na(y))
N &amp;lt;- N - length(miss)
j &amp;lt;- j[-miss]
m &amp;lt;- m[-miss]
y &amp;lt;- y[-miss]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we&amp;rsquo;ll set our initial values. There are various ways to do this, ranging from leaving it up to Stan (i.e. not setting any values) to creating lists with specific starting values for each parameter. What we&amp;rsquo;ll do here is use the starting values as a way to start the parties off in separate places. This has several advantages: we already know that these parties don&amp;rsquo;t vote together very often (i.e., they are parties of the government and the opposition) and so we can speed up the model by starting the legislators off where we already know they&amp;rsquo;ll be (i.e. right-wing parties on the right etc.). This also has the benefit of making it less likely that we&amp;rsquo;ll end up with &amp;lsquo;sign-flips&amp;rsquo;, where a legislator with a bi-modal posterior distribution has an ideal point from the &amp;lsquo;wrong&amp;rsquo; mode.&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; For the discrimination and difficulty paramters, we&amp;rsquo;ll use a random sample from normal distributions. We&amp;rsquo;ll also save all this information as &lt;code&gt;stan.data&lt;/code&gt;, which is the list of data we&amp;rsquo;ll use with Stan.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
ldata$ThetaStart &amp;lt;- rnorm(J, 0, 1)
ldata$ThetaStart[ldata$Party==&amp;ldquo;PFL&amp;rdquo; | ldata$Party==&amp;ldquo;PTB&amp;rdquo; | ldata$Party==&amp;ldquo;PSDB&amp;rdquo; | ldata$Party==&amp;ldquo;PPB&amp;rdquo;] &amp;lt;- 2
ldata$ThetaStart[ldata$Party==&amp;ldquo;PT&amp;rdquo; | ldata$Party==&amp;ldquo;PSOL&amp;rdquo; | ldata$Party==&amp;ldquo;PCdoB&amp;rdquo;] &amp;lt;- -2
ThetaStart &amp;lt;- ldata$ThetaStart&lt;/p&gt;

&lt;p&gt;initF &amp;lt;- function() {
  list(theta=ThetaStart, beta=rnorm(M, 0, 2), alpha=rnorm(M, 0, 2))
}&lt;/p&gt;

&lt;p&gt;stan.data &amp;lt;- list(J=J, M=M, N=N, j=j, m=m, y=y, ThetaStart=ThetaStart)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Stan model code differs from those mentioned above in a few aspects. Firstly, variables need to be declared, along with their type. For example, &lt;em&gt;J&lt;/em&gt;, which is our index for the number of senators, is declared in the following code as an integer. The parameters are likewise declared, as real numbers. The model code has three blocks: data, parameters and the model itself (there are other blocks possible, such as&lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;generated data&lt;/bdi&gt;, see the Stan &lt;a href=&#34;http://mc-stan.org/documentation/&#34;&gt;manual&lt;/a&gt;. Stan code is also imperative &amp;ndash; the order of the blocks matters.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
stan.code &amp;lt;- &amp;ldquo;
    data {
    int&lt;lower=1&gt; J; //Senators
    int&lt;lower=1&gt; M; //Proposals
    int&lt;lower=1&gt; N; //no. of observations
    int&lt;lower=1, upper=J&gt; j[N]; //Senator for observation n
    int&lt;lower=1, upper=M&gt; m[N]; //Proposal for observation n
    int&lt;lower=0, upper=1&gt; y[N]; //vote of observation n
    }
    parameters {
    real alpha[M];
    real beta[M];
    real theta[J];
    }
    model {
    alpha ~ normal(0,5);
    beta ~ normal(0,5);
    theta ~ normal(0,1);
    theta[1] ~ normal(1, .01);
    theta[2] ~ normal(-1, .01);&lt;br /&gt;
    for (n in 1:N)
    y[n] ~ bernoulli_logit(theta[j[n]] * beta[m[n]] - alpha[m[n]]);
    }&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;This IRT model can be run using either the logistic or probit link function, however, since Stan has a built in &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;bernoulli_logit&lt;/bdi&gt;, we&amp;rsquo;ll use that. You can see from the model block above that we have specified specific prior distributions for &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[1]&lt;/bdi&gt; and &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[2]&lt;/bdi&gt;. These are our constrained legislators &amp;ndash; Agripino and Suplicy. We can do this using truncated normal distributions in Stan (i.e. &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;theta[1] ~ normal(1, .01)T[0,]&lt;/bdi&gt;, for example), but in my experience this makes things slower and increases the number of divergent transitions reported by Stan. We then use the &lt;code&gt;stan()&lt;/code&gt; command to run our model in Stan. Here, I&amp;rsquo;m using 1000 iterations just to show (as it doesn&amp;rsquo;t take too long); these IRT models generally need more iterations than other models, for good estimates from this data, I run 5000 iterations with 2500 burn-in. A couple of hundred iterations usually suffices in Stan, depending on the model. The number of chains and cores are linked to what I have available on my computer. You can check this with the parallel package using &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;detectCores()&lt;/bdi&gt;. A quick way to check convergence of the chains is with a graph of Rhat, shown below.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;stan.fit &amp;lt;- stan(model_code=stan.code, data=stan.data, iter=3000, warmup=1500, chains=4, thin=5, init=initF, verbose=TRUE, cores=4, seed=1234)&lt;/p&gt;

&lt;p&gt;stan_rhat(stan.fit, bins=60)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/YNBevMV.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;Values of Rhat should be 1.03 or lower. As you can see, even from 1000 iterations, we can be confident these chains are converging.&lt;/p&gt;

&lt;h2 id=&#34;graphing-ideal-points&#34;&gt;Graphing Ideal Points&lt;/h2&gt;

&lt;p&gt;I find the best way to plot ideal points is by using ggplot2. It&amp;rsquo;s automatically loaded as part of rstan. I also prefer to use an mcmc.list object, simply because I&amp;rsquo;m more used to it. But you can use the &lt;bdi style=&#34;font-family:courier; color:#011a99&#34;&gt;stan.fit&lt;/bdi&gt; object directly if you prefer.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
MS &amp;lt;- As.mcmc.list(stan.fit)
sMS &amp;lt;- summary(MS)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There are various things we can plot from the summary above. Of main interest is usually the ideal points, so we&amp;rsquo;ll start with those first. First, let&amp;rsquo;s extract the ideal points (&amp;ldquo;theta&amp;rdquo;) from the summary, along with the lower and upper ends of the 95% credible interval:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
Theta &amp;lt;- sMS$statistics[grep(&amp;ldquo;theta&amp;rdquo;, row.names(sMS$statistics)),1]
ThetaQ &amp;lt;- sMS$quantiles[grep(&amp;ldquo;theta&amp;rdquo;, row.names(sMS$statistics)),c(1,5)]
Theta &amp;lt;- as.data.frame(cbind(Theta, ThetaQ))
rm(ThetaQ)
Theta$FullID &amp;lt;- ldata$FullID
row.names(Theta) &amp;lt;- NULL
colnames(Theta)[1:3] &amp;lt;- c(&amp;ldquo;Mean&amp;rdquo;, &amp;ldquo;Lower&amp;rdquo;, &amp;ldquo;Upper&amp;rdquo;)
Theta &amp;lt;- merge(Theta, ldata, by=&amp;ldquo;FullID&amp;rdquo;)
Theta &amp;lt;- Theta[order(Theta$Mean),]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we have a dataframe of legislator characteristics alng with their ideal points. Since we&amp;rsquo;re dealing with a one-dimensional model here, the most straight-forward way to plot is along a scale ranging from the lowest ideal point to the highest. Here, I&amp;rsquo;ll colour the ideal points and their intervals by membership of the government coalition. I&amp;rsquo;ve used some other plotting options to make this plot the way I like it, but it&amp;rsquo;s easy to change things to your taste in ggplot2.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
Y &amp;lt;- seq(from=1, to=length(Theta$Mean), by=1)&lt;/p&gt;

&lt;p&gt;ggplot(Theta, aes(x=Mean, y=Y)) + geom_point(aes(colour=GovCoalition),
    shape=19, size=3) + geom_errorbarh(aes(xmin=Lower, xmax=Upper,colour=GovCoalition), height=0) + geom_text(aes(x=Upper, label=FullID, colour=GovCoalition), size=2.5, hjust=-.05)+ scale_colour_manual(values=c(&amp;ldquo;red&amp;rdquo;, &amp;ldquo;blue&amp;rdquo;)) + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.title=element_blank(), legend.position=&amp;ldquo;none&amp;rdquo;, panel.grid.major.y = element_blank(), panel.grid.major.x=element_line(linetype=1, colour=&amp;ldquo;grey&amp;rdquo;), panel.grid.minor=element_blank(), panel.background=element_rect(fill=&amp;ldquo;white&amp;rdquo;), panel.border = element_rect(colour=&amp;ldquo;black&amp;rdquo;, fill=NA, size=.4)) + scale_x_continuous(limits=c(-2.7, 4))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/fE2LY5L.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;Of course, that‚Äôs not all the information we have in our ldata dataframe. We could plot things by party or by state. Let‚Äôs plot something by region (since there are a lot of states):&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
St &amp;lt;- Theta[is.na(Theta$State)==FALSE,]  # take out president
St$Region &amp;lt;- NA
SE &amp;lt;- c(&amp;ldquo;SP&amp;rdquo;, &amp;ldquo;RJ&amp;rdquo;, &amp;ldquo;ES&amp;rdquo;, &amp;ldquo;MG&amp;rdquo;)
S &amp;lt;- c(&amp;ldquo;RS&amp;rdquo;, &amp;ldquo;PR&amp;rdquo;, &amp;ldquo;SC&amp;rdquo;)
N &amp;lt;- c(&amp;ldquo;AM&amp;rdquo;, &amp;ldquo;RO&amp;rdquo;, &amp;ldquo;RR&amp;rdquo;, &amp;ldquo;TO&amp;rdquo;, &amp;ldquo;PA&amp;rdquo;, &amp;ldquo;AC&amp;rdquo;, &amp;ldquo;AP&amp;rdquo;)
CW &amp;lt;- c(&amp;ldquo;DF&amp;rdquo;, &amp;ldquo;GO&amp;rdquo;, &amp;ldquo;MT&amp;rdquo;, &amp;ldquo;MS&amp;rdquo;)
NE &amp;lt;- c(&amp;ldquo;CE&amp;rdquo;, &amp;ldquo;MA&amp;rdquo;, &amp;ldquo;AL&amp;rdquo;, &amp;ldquo;RN&amp;rdquo;, &amp;ldquo;PB&amp;rdquo;, &amp;ldquo;SE&amp;rdquo;, &amp;ldquo;PI&amp;rdquo;, &amp;ldquo;BA&amp;rdquo;, &amp;ldquo;PE&amp;rdquo;)
St$Region[St$State %in% SE] &amp;lt;- &amp;ldquo;South-East&amp;rdquo;
St$Region[St$State %in% S] &amp;lt;- &amp;ldquo;South&amp;rdquo;
St$Region[St$State %in% NE] &amp;lt;- &amp;ldquo;North-East&amp;rdquo;
St$Region[St$State %in% CW] &amp;lt;- &amp;ldquo;Centre-West&amp;rdquo;
St$Region[St$State %in% N] &amp;lt;- &amp;ldquo;North&amp;rdquo;&lt;/p&gt;

&lt;p&gt;nameorder &amp;lt;- St$FullID[order(St$Region, St$Mean)]
St$FullID &amp;lt;- factor(St$FullID, levels=nameorder)&lt;/p&gt;

&lt;p&gt;ggplot(St, aes(x=Mean, y=FullID)) + geom_point(size=3, aes(colour=Region)) + geom_errorbarh(aes(xmin=Lower, xmax=Upper, colour=Region), height=0) + facet_grid(Region ~ ., scales=&amp;ldquo;free_y&amp;rdquo;) + scale_colour_manual(values=c(&amp;ldquo;orange&amp;rdquo;, &amp;ldquo;black&amp;rdquo;, &amp;ldquo;red&amp;rdquo;, &amp;ldquo;blue&amp;rdquo;, &amp;ldquo;darkgreen&amp;rdquo;)) + theme_bw()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/M4sx2az.png?1&#34;&gt;&lt;/p&gt;

&lt;p&gt;We can also analyse the other parameters of the model, and run multidimensional models too. See the &lt;a href=&#34;http://rpubs.com/RobertMylesMc/Bayesian-IRT-ideal-points-with-Stan-in-R&#34;&gt;RPub&lt;/a&gt; for the code for these.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; There are many discussions on this topic, but &lt;a href=&#34;https://my.vanderbilt.edu/joshclinton/files/2011/10/CJ_LSQ2009.pdf&#34;&gt;Clinton &amp;amp; Jackman (2009)&lt;/a&gt; is a good place to start. An earlier &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/ClintonJackmanRivers2004.pdf&#34;&gt;paper&lt;/a&gt; by Clinton, Jackman &amp;amp; Rivers makes the point somewhat more forcefully. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt; For more on this point, see &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/Jackman2001.pdf&#34;&gt;Jackman&lt;/a&gt; 2001, &lt;a href=&#34;http://polmeth.wustl.edu/files/polmeth/river03.pdf&#34;&gt;Rivers 2003&lt;/a&gt; paper cited in the main text, or the Appendix of my PhD &lt;a href=&#34;http://robertmyles.github.io//assets/Explaining%20the%20Determinants%20of%20Foreign%20Policy%20Voting%20Behaviour%20in%20the%20Brazilian%20Houses%20of%20Legislature.pdf&#34;&gt;thesis&lt;/a&gt;. &lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/VuCDpaX.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bayesian Stats -- Book Recommendations</title>
      <link>/1/01/01/bayesian-stats----book-recommendations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/bayesian-stats----book-recommendations/</guid>
      <description>&lt;p&gt;The first time I came across Bayes&amp;rsquo; Theorem&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I must admit I was pretty confused. It was in &lt;a href=&#34;http://www.amazon.com/Introductory-Statistics-9th-Neil-Weiss/dp/0321691229/ref=pd_cp_14_1?ie=UTF8&amp;amp;refRID=15HFJDGMBF49CXAD9W9S&#34;&gt;Introductory Statistics&lt;/a&gt; by Neil A. Weiss, the course book in a statistics course I was taking at the time. Neither the logic of it nor the formula for it made much sense to me. For somebody new to probability, I was still trying to figure out what the hell P(A) actually &lt;em&gt;meant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Looking back, the funny thing is that it is the branch of statistics that &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; wont to use Bayes&amp;rsquo; Theorem that I find confusing.&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; Bayesian statistics now makes perfect sense to me. Indeed, it follows human intuition (even if the formula looks weird for anybody new to probability). The probability of the hypothesis we have in mind, given the data we observe (that would be the &lt;code&gt;P(A|B)&lt;/code&gt; part, but we can rewrite it as &lt;code&gt;Pr(Hypothesis|Data)&lt;/code&gt;; this is also called the &lt;em&gt;posterior&lt;/em&gt; ) is&amp;hellip; what exactly?&lt;br /&gt;
Well, it&amp;rsquo;s a combination of the initial plausibility of our hypothesis (&lt;code&gt;P(A)&lt;/code&gt;, also called the &lt;em&gt;prior&lt;/em&gt; ), multiplied by what&amp;rsquo;s called the likelihood (&lt;code&gt;P(B|A)&lt;/code&gt;, or &lt;code&gt;Pr(Data|Hypothesis)&lt;/code&gt;), which is the data we would expect to see if our hypothesis were correct. The denominator is often called the &amp;lsquo;evidence&amp;rsquo; or something similarly opaque, but it is merely the numerator plus its converse, that is to say, the probability that our original hypothesis is wrong by the likelihood of our data, assuming that our hypothesis is wrong. In any case, its function is just to make sure our probabilities sum to one, as they should.&lt;/p&gt;

&lt;p&gt;As you can see, all of those &lt;code&gt;P(|)&lt;/code&gt;s and &lt;code&gt;Pr&lt;/code&gt;s can make things confusing &amp;ndash; underneath it all, it&amp;rsquo;s simpler. First of all, the &lt;code&gt;Pr()&lt;/code&gt; notation and the denominator are often left out, making the theorem look more like this:&lt;/p&gt;

&lt;p&gt;{% raw %}
  $$posterior \propto prior \centerdot likelihood.$$
 {% endraw %}&lt;/p&gt;

&lt;p&gt;The plausibility of our idea, now that we have seen data, is proportional to its original plausibility times the likelihood. Well, reasonably simpler, but the fact is that most people are not comfortable thinking in terms of probability. Given that Bayes&amp;rsquo; Theorem is the basic foundation block for an entire body of statistical literature&lt;sup id=&#34;a3&#34;&gt;&lt;a href=&#34;#fn3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, one can see how things could get out of hand pretty quickly &amp;ndash; hence the need for good books on the subject. I didn&amp;rsquo;t learn &lt;em&gt;any&lt;/em&gt; Bayesian statistics in any class I ever had, I learned everything I know (astoundingly little) from reading plenty of books, sometimes the whole way through, sometimes just certain parts until I got bored, from reading on the web, from making many mistakes in &lt;code&gt;R&lt;/code&gt; &amp;ndash; gradually, I found my way and built my understanding of Bayesian stats. Given that I read (or skimmed) quite a lot of books on the topic, I thought I&amp;rsquo;d share my two cents on those I came across. There are certainly many more, depending on the specific area of the sciences or on the level of technicality assumed, but these are the ones that I read and either loved, liked somewhat, got bored, or simply got lost (some of them are waaay too difficult&amp;hellip;at least for me). Let&amp;rsquo;s dive in. They&amp;rsquo;re in no particular order, by the way.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://i.imgur.com/b0EkBG5.jpg?1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Probably the first book that comes to mind is one of the first that I read on the topic, Simon Jackman&amp;rsquo;s &lt;a href=&#34;http://onlinelibrary.wiley.com/book/10.1002/9780470686621&#34;&gt;Bayesian Analysis for the Social Sciences&lt;/a&gt;. Jackman&amp;rsquo;s book&lt;sup id=&#34;a4&#34;&gt;&lt;a href=&#34;#fn4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; has a nice introduction to the topic and the first few chapters are reasonably easy to follow. However, his mathematics are detailed and even a bit pedantic (nothing wrong with that in an academic book) and things can get heavy going &lt;em&gt;very&lt;/em&gt; quickly. Reading through derivations of the conjugacy of probability distributions convinced me I needed to a) go back and re-learn calculus &lt;em&gt;again&lt;/em&gt; (which I did), and b) go a little further back in the tree of books on Bayesian statistics.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://i.imgur.com/jpNFefC.png?1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This led me down a few interesting paths, from de Finetti&amp;rsquo;s famous &amp;ldquo;PROBABILITY DOES NOT EXIST&amp;rdquo; statement, which I originally saw in Jackman&amp;rsquo;s book and then hunted down the original (I enjoyed the start quite a lot but then got bored), to learning &lt;code&gt;JAGS&lt;/code&gt; to go along with Jackman&amp;rsquo;s examples, to some rather unnecessary and heavy-going books (&lt;a href=&#34;http://link.springer.com/book/10.1007%2F978-1-4612-4024-2&#34;&gt;Tanner&lt;/a&gt;, for example). However, I decided to go the &amp;lsquo;source&amp;rsquo; (in a modern context) and so I started reading Bernardo and Smith&amp;rsquo;s &lt;a href=&#34;http://onlinelibrary.wiley.com/book/10.1002/9780470316870&#34;&gt;Bayesian Theory&lt;/a&gt;, which really helped to give me a solid understanding of the concepts involved. It&amp;rsquo;s a detailed read, and well recommended if you want a deeper understanding of the concepts behind Bayesian statistics.&lt;/p&gt;

&lt;p&gt;Moving from concepts to application, I found Donald Berry&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Statistics-Bayesian-Perspective-Donald-Berry/dp/0534234720&#34;&gt;Statistics: a Bayesian Perspective&lt;/a&gt; really useful for getting a grip on the basic elements. The book is a bit dated now, and is targeted at an undergraduate audience, which is actually something in its favour. Up until Kruschke and McElreath&amp;rsquo;s books (mentioned later), most Bayesian stats books seemed to be aimed at people who were already experts in statistics (or knowledgeable, at least), with the aim of convincing them why they should switch to Bayesian methods. As a result, a lot of these books dive headlong into subjects that are not appropriate for most students (see Jackman&amp;rsquo;s conjugacy discussions, above) and have the effect of turning a lot of students off the material. Berry&amp;rsquo;s book, although limited, does the opposite.&lt;/p&gt;

&lt;p&gt;There are other statistics books that cover Bayesian ideas, such as &lt;a href=&#34;http://www.amazon.com/Introduction-Bayesian-Statistics-William-Bolstad/dp/0470141158&#34;&gt;Bolstad&amp;rsquo;s&lt;/a&gt; (I personally didn&amp;rsquo;t like his style) and deGroot &amp;amp; Schervish&amp;rsquo;s well-known &lt;a href=&#34;https://www.pearsonhighered.com/program/De-Groot-Probability-and-Statistics-4th-Edition/PGM146802.html&#34;&gt;book&lt;/a&gt;, which is a fine book, but very dry for my taste. There are also other introductory Bayesian statistics books, such as those by &lt;a href=&#34;http://www.springer.com/us/book/9780387712642&#34;&gt;Lynch&lt;/a&gt; and &lt;a href=&#34;http://www.springer.com/us/book/9780387922997&#34;&gt;Hoff&lt;/a&gt;, neither of which really stuck with me. Actually, most Bayesian stats books I read didn&amp;rsquo;t stick with me :smile: . (&lt;a href=&#34;http://www.amazon.com/Bayesian-Statistics-Introduction-Peter-Lee/dp/1118332571&#34;&gt;Lee&lt;/a&gt; also has an introductory text, but I haven&amp;rsquo;t read it.)&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Sticking with introductory level, John Kruschke has a popular &lt;a href=&#34;https://sites.google.com/site/doingbayesiandataanalysis/&#34;&gt;book&lt;/a&gt; with its quirky dog cover.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.indiana.edu/~kruschke/DoingBayesianDataAnalysis/DBDA2Ecover.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I came a bit late to the Kruschke party, which meant that the two biggest advantages of the book (easy explanation of Bayesian stats and pre-written R functions) were not particularly useful to me, as I was already reasonably proficient in R and understood Bayesian stats quite well. Still, his book is very popular for a reason, which shows just how prevalent the problem of &amp;lsquo;writing-Bayesian-stats-books-for-people-who-are-already-awesome-at-statistics&amp;rsquo; is. However, I like to open things up and poke around, and his closed system of pre-written functions didn&amp;rsquo;t work so well for me (plus, the functions are quite badly written, in my opinion). Closed ecosystems of functions like this are a thing of the past (see &lt;a href=&#34;https://cran.r-project.org/web/packages/LaplacesDemon/index.html&#34;&gt;Laplace&amp;rsquo;s Demon&lt;/a&gt;), the future is incorporating well-known methods and function calls with Bayesian machinery running under the hood (such as &lt;a href=&#34;https://cran.r-project.org/web/packages/rstanarm/vignettes/rstanarm.html&#34;&gt;rstanarm&lt;/a&gt;). Anyway, for someone starting off, it&amp;rsquo;s a recommended read. Kruschke has some interesting &lt;a href=&#34;http://www.indiana.edu/~kruschke/BEST/BEST.pdf&#34;&gt;papers&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There are also some &amp;lsquo;classics&amp;rsquo; of Bayesian statistics, perhaps the most well-known being the canonical &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/book/&#34;&gt;Bayesian Data Analysis&lt;/a&gt; by Andrew Gelman &amp;amp; co. I don&amp;rsquo;t know what keeps me away from this book. It&amp;rsquo;s very highly regarded (pretty much as &lt;em&gt;the&lt;/em&gt; book on Bayesian stats) and well-written, and has a section on computation with &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; etc., but I just never seem to sit down and read it. Who knows why.&lt;sup id=&#34;a5&#34;&gt;&lt;a href=&#34;#fn5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://i.imgur.com/hfaZkl3.png?1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Of course, there are tons of books on this subject. I could literally fill a long blog post on the books I started and just didn&amp;rsquo;t like for whatever reason. There are some that are encyclopaedic (&lt;a href=&#34;http://webspace.qmul.ac.uk/pcongdon/&#34;&gt;Congdon&amp;rsquo;s&lt;/a&gt; long list of Bayesian books, for example), others, designed for business students, that were just kind of &amp;lsquo;meh&amp;rsquo;: &lt;a href=&#34;http://www.springer.com/us/book/9780387389837&#34;&gt;Marin &amp;amp; Robert&lt;/a&gt; and &lt;a href=&#34;http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470863676.html&#34;&gt;Rossi&lt;/a&gt;, for example. Others are useful for learning Bayesian methods &lt;em&gt;and&lt;/em&gt; &lt;code&gt;R&lt;/code&gt;, such as Jim Albert&amp;rsquo;s &lt;a href=&#34;https://books.google.com.br/books/about/Bayesian_Computation_with_R.html?id=kVk_WHFfIrMC&amp;amp;redir_esc=y&#34;&gt;book&lt;/a&gt;, &lt;em&gt;Bayesian Computation with R&lt;/em&gt;. This is a really useful book actually, but like I said earlier with reference to Kruschke, by the time I came to it, I was already using &lt;code&gt;JAGS&lt;/code&gt; and on a different path (&lt;a href=&#34;http://robertmyles.github.io//Stan-JAGS.html&#34;&gt;ideal points&lt;/a&gt; etc.) and so I had no great use for Albert&amp;rsquo;s &lt;code&gt;R&lt;/code&gt; functions. Still, it&amp;rsquo;s a well-regarded book by an acknowledged &lt;code&gt;R&lt;/code&gt; expert. There are also good books on Bayesian econometrics (&lt;a href=&#34;http://www.wiley.com/legacy/wileychi/koopbayesian/&#34;&gt;Koop&lt;/a&gt;) and time-series (&lt;a href=&#34;https://books.google.com.br/books/about/Applied_Bayesian_Forecasting_and_Time_Se.html?id=LAcp-ZwnyxIC&amp;amp;redir_esc=y&#34;&gt;Pole, West &amp;amp; Harrison&lt;/a&gt;, haaard) and Jeff Gill has &lt;a href=&#34;https://www.crcpress.com/Bayesian-Methods-A-Social-and-Behavioral-Sciences-Approach-Third-Edition/Gill/9781439862483&#34;&gt;one&lt;/a&gt; for the social &amp;amp; behavioural sciences (I &lt;em&gt;really&lt;/em&gt; didn&amp;rsquo;t get into this);  there are also many others throughout the specific fields of the sciences.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://i.imgur.com/M7y9pgs.png?2&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The emphasis on &lt;code&gt;R&lt;/code&gt; is something that has carried through to the newer batch of Bayesian statistics books, which place more emphasis on the &amp;lsquo;data analysis&amp;rsquo; part (that is, being empirical instead of theoretical, and getting your hands dirty with computer programming in &lt;code&gt;R&lt;/code&gt; from the off) than on theoretical underpinnings. You will find some targeted at a Python audience, for example, Davidson-Pilon&amp;rsquo;s &lt;a href=&#34;http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/&#34;&gt;book&lt;/a&gt;, which is available as an editable github-type-webbook on the net, as well as a printed book. (Its title will tell you a bit about the Python audience it aims for &amp;ndash; more computer programmers than the academic/statistician audience that use &lt;code&gt;R&lt;/code&gt;. Indeed, most of the Python Bayesian analysis resources are found on the web as opposed to in books. Although some are just books on the web in &lt;a href=&#34;http://www.greenteapress.com/thinkbayes/thinkbayes.pdf&#34;&gt;pdf format&lt;/a&gt;.) For me personally, this is good news. I liked the theoretical knowledge that I gained from Bernardo &amp;amp; Smith, but once I had to delve into understanding matrix algebra (just to see a linear regression derivation) or complex characteristics of probability distributions, I was already thinking of how I&amp;rsquo;d rather have a beer. Programming, at least for me, is a perfect way to connect the theory and the concepts to the reality of actually &lt;em&gt;doing&lt;/em&gt; some Bayesian analysis.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;This brings me nicely to two books that I think really utilise this approach to good effect, one recent, one a decade or so old: Richard McElreath&amp;rsquo;s &lt;a href=&#34;http://xcelab.net/rm/statistical-rethinking/&#34;&gt;Statistical Rethinking&lt;/a&gt; (new) and Gelman &amp;amp; Hill&amp;rsquo;s &lt;a href=&#34;http://www.stat.columbia.edu/~gelman/arm/&#34;&gt;Data Analysis Using Regression and Multilevel/Hierarchical Models&lt;/a&gt; (older). While I&amp;rsquo;ve only recently started reading McElreath&amp;rsquo;s book, it seems like &lt;strong&gt;exactly&lt;/strong&gt; the type of book that I would have liked to have when I started out. No complicated mathematics, just sensible advice and a heavy emphasis on doing analysis in R. The book is well-written (and very well backed up with references, there&amp;rsquo;s a ton of information to follow-up from the endnotes if you&amp;rsquo;re so inclined) and contains lucid arguments for why the author believes we need to approach statistics from a fresh angle. Although I haven&amp;rsquo;t finished it, I do recommend it already.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s similar in some ways to Gelman &amp;amp; Hill&amp;rsquo;s book, and one can see the influence of Andrew Gelman (particularly through his emphasis on the &amp;lsquo;doing&amp;rsquo; of Bayesian statistics) in Statistical Rethinking. &lt;em&gt;Data Analysis Using&amp;hellip;&lt;/em&gt; is likewise focused on analysis, learned through computer programming. It features both frequentist and Bayesian takes on statistical methods, and contains detailed computer code for (the now somewhat dated) &lt;code&gt;BUGS&lt;/code&gt; language (see &lt;a href=&#34;http://robertmyles.github.io//Stan-JAGS.html&#34;&gt;here&lt;/a&gt; (also linked to above) for why &lt;code&gt;BUGS&lt;/code&gt; and its cousin &lt;code&gt;JAGS&lt;/code&gt; are not always optimal for Bayesian analysis). It also contains some sage advice for researchers: try out simple models using quick methods like &lt;code&gt;lm()&lt;/code&gt; as you build up your model (advice that I certainly needed on at least one occasion).&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://i.imgur.com/oH57M4t.png?1&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s my take on Bayesian statistics/data analysis books. As befits the age we live in, you&amp;rsquo;ll likely learn just as much from sites like &lt;a href=&#34;http://stackoverflow.com/search?q=Bayesian+&#34;&gt;Stack Overflow&lt;/a&gt; or from &lt;a href=&#34;https://darrenjw.wordpress.com/2012/11/20/getting-started-with-bayesian-variable-selection-using-jags-and-rjags/&#34;&gt;blog&lt;/a&gt; &lt;a href=&#34;https://twiecki.github.io/blog/2015/11/10/mcmc-sampling/&#34;&gt;posts&lt;/a&gt; and &lt;a href=&#34;https://rpubs.com/corey_sparks/30893&#34;&gt;RPubs&lt;/a&gt; and &lt;a href=&#34;https://github.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models&#34;&gt;Github&lt;/a&gt; than you will from books. Academic papers often helped me more than books too. Still, a good book can teach you a hell of a lot in a consistent way. There are many referenced in this post, some better than others, but all have their qualities. For me specifically, someone who is not mad about reading lots of mathematics, the last two are my recommendations. For others, this will obviously be different (I know someone who loves Jackman&amp;rsquo;s book, for example).&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By the way, there are some informal books on the subject, such as Nate Silver&amp;rsquo;s &lt;a href=&#34;http://www.penguinrandomhouse.com/books/305826/the-signal-and-the-noise-by-nate-silver/9780143125082/&#34;&gt;The Signal and the Noise&lt;/a&gt;, or McGrayne&amp;rsquo;s &lt;a href=&#34;https://www.amazon.ca/Theory-That-Would-Not-Die/dp/0300169698/181-0429523-7916830?ie=UTF8&amp;amp;tag=vglnk-ca-c250-20&#34;&gt;The Theory That Would Not Die&lt;/a&gt;. I&amp;rsquo;ve given Amazon or publisher links for all these books, bar a few, but they can be found in other places too&amp;hellip;you know what I&amp;rsquo;m talking about. Buy the ones you like, though!&lt;/em&gt; :cop:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; Maybe this formula wouldn&amp;rsquo;t have made much sense to the ol&amp;rsquo; Reverend Thomas Bayes either, since he used the Newtonian style of geometric exposition. For the history of the theorem, see &lt;a href=&#34;https://www.amazon.ca/Theory-That-Would-Not-Die/dp/0300169698/181-0429523-7916830?ie=UTF8&amp;amp;tag=vglnk-ca-c250-20&#34;&gt;McGrayne&lt;/a&gt;. For a history of statistics in general, including Bayes (and Laplace, who probably did much more to develop Bayesian statistics than Bayes ever did) see the fantastic &lt;a href=&#34;http://www.hup.harvard.edu/catalog.php?isbn=9780674403413&#34;&gt;Stigler&lt;/a&gt;. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt; That would be &amp;lsquo;frequentist&amp;rsquo; or &amp;lsquo;classical&amp;rsquo; (or &amp;lsquo;traditional&amp;rsquo;) statistics (take your pick of adjective). Most of the Bayesian books above will have sections comparing the traditions. McElreath doesn&amp;rsquo;t bother, which is a nice development in its own way. &lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn3&#34;&gt;3&lt;/b&gt; Although there is only ever one core method:
{% raw %} $$posterior \propto prior \times likehood $${% endraw %}. &lt;a href=&#34;#a3&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn4&#34;&gt;4&lt;/b&gt; I&amp;rsquo;ve learned much more from Jackman&amp;rsquo;s various political science articles, in which he uses Bayesian methods, than this book, to be honest. &lt;a href=&#34;#a4&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn5&#34;&gt;5&lt;/b&gt; Speaking of Gelman, he has a literal treasure trove of papers and web discussions on the subject of Bayesian data analysis. See his &lt;a href=&#34;http://andrewgelman.com/&#34;&gt;site&lt;/a&gt; for many links to those. &lt;a href=&#34;#a5&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/aB6eoBS.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easier web scraping in R</title>
      <link>/1/01/01/easier-web-scraping-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/easier-web-scraping-in-r/</guid>
      <description>

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In an earlier &lt;a href=&#34;http://robertmyles.github.io//Web-Navigation-and-Scraping-with-R.html&#34;&gt;post&lt;/a&gt;, I described some ways in which you can interact with a web browser using R and &lt;code&gt;RSelenium&lt;/code&gt;. This is ideal when you need to access data through drop-down menus and search bars. However, working with &lt;code&gt;RSelenium&lt;/code&gt; can be tricky. There are, of course, easier ways to get information from the internet using R.&lt;/p&gt;

&lt;p&gt;Perhaps the most straightforward way is to use &lt;code&gt;rvest&lt;/code&gt;, in tandem with other packages of the &lt;a href=&#34;https://barryrowlingson.github.io/hadleyverse/#1&#34;&gt;Hadleyverse&lt;/a&gt;&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, such as &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; for data preparation and cleaning after the webscrape. I&amp;rsquo;m going to use a simple example that I came across recently in my work, getting the name of each mayor in Brazil.&lt;/p&gt;

&lt;p&gt;Finding out who was &lt;em&gt;elected&lt;/em&gt; to the mayor&amp;rsquo;s office in each municipality in Brazil is easy: that data exists and is available on the &lt;a href=&#34;http://www.tse.jus.br/&#34;&gt;website&lt;/a&gt; of the &lt;em&gt;Tribunal Superior Eleitoral&lt;/em&gt;. However, just because someone was elected to office (in this case in 2014) does not mean that they are still in office now, two years later. After searching around the web for a bit, I realised that this data is not available as a dataset.&lt;/p&gt;

&lt;p&gt;After wandering to the website of the &lt;a href=&#34;http://www.ibge.gov.br/home/&#34;&gt;IBGE&lt;/a&gt;, a Brazilian statistics agency, I found a way to get the name of the mayor currently in charge of each municipality. Each municipality has its own webpage on the IGBE&amp;rsquo;s dedicated &lt;a href=&#34;http://www.cidades.ibge.gov.br/xtras/home.php&#34;&gt;Cidades@&lt;/a&gt; site.&lt;/p&gt;

&lt;p&gt;For example, you will see the a webpage for the municipality of Acrel√¢ndia, shown in the image below. As you can see, the name of the mayor (&amp;ldquo;Prefeito&amp;rdquo;) is on the right-hand side of the page. Since we now know we can get this for each municipality, we have three tasks to do in order to get this info into R:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find out what part of the url changes as we move from city to city on the website;&lt;/li&gt;
&lt;li&gt;send the corresponding information to the server using R;&lt;/li&gt;
&lt;li&gt;scrape the page and tidy up the resulting data in R.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/MGqKffr.png&#34; style=&#34;width:750px;height:500px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The url for &lt;a href=&#34;http://www.cidades.ibge.gov.br/xtras/perfil.php?lang=&amp;amp;codmun=120001&amp;amp;search=acre|acrelandia&#34;&gt;Acrel√¢ndia&lt;/a&gt; is unique at: &amp;ldquo;codmun=120001&amp;rdquo; and &amp;ldquo;search=acre|acrelandia&amp;rdquo;.&lt;br /&gt;
The number in &amp;ldquo;codmun&amp;rdquo; is available as the IBGE municipal code (although missing the final digit, strangely&amp;hellip;but that&amp;rsquo;s not a problem, we just take it off the end for each one) and the rest is just the state and the municipality, all information that is easy to get from various sources. For this example, I&amp;rsquo;ve uploaded this basic dataset to Github so we can use it here.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(stringi)
library(rvest)&lt;/p&gt;

&lt;h2 id=&#34;read-in-data-and-create-variables-for-webscraping&#34;&gt;read in data and create variables for webscraping:&lt;/h2&gt;

&lt;p&gt;Mayors &amp;lt;- read_csv(&amp;ldquo;&lt;a href=&#34;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/IBGE_codes.csv&amp;quot;&#34;&gt;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/IBGE_codes.csv&amp;quot;&lt;/a&gt;) %&amp;gt;%
  select(-c(UF, Cod.Mun)) %&amp;gt;%
  dplyr::rename(Code_IBGE=Cod.IBGE) %&amp;gt;%
  mutate(MUNIC2 = tolower(.$MUNIC)) %&amp;gt;%
  mutate(MUNIC2 = gsub(&amp;rdquo; &amp;ldquo;, &amp;ldquo;-&amp;rdquo;, .$MUNIC2)) %&amp;gt;%
  mutate(Name_UF2 = tolower(.$Name_UF)) %&amp;gt;%
  mutate(Code2 = unlist(str_extract_all(.$Code_IBGE, &amp;ldquo;[0-9]{6}&amp;ldquo;))) %&amp;gt;%
  unite(col=Link, Name_UF2, MUNIC2, sep=&amp;ldquo;|&amp;rdquo;, remove = F) %&amp;gt;%
  arrange(ACR_UF)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
In the code snippet above, we&amp;rsquo;ve taken out unnecessary columns, renamed one, changed the names of the municipalities to lower case (for the url), taken six numbers of the IBGE code for use in the webscrape and joined the state and municipality names together, with &lt;code&gt;|&lt;/code&gt; seperating them, as in the url for each municipality webpage. We also need to create some empty data frames to fill, and remove the municipality of Bras√≠lia, which does not have a &lt;em&gt;Prefeito&lt;/em&gt;, just a &lt;a href=&#34;http://www.cidades.ibge.gov.br/xtras/perfil.php?lang=&amp;amp;codmun=530010&amp;amp;search=distrito-federal|brasilia&#34;&gt;governor&lt;/a&gt;, which is all done below:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;url &amp;lt;- &amp;ldquo;&lt;a href=&#34;http://www.cidades.ibge.gov.br/xtras/perfil.php?lang=&amp;amp;codmun=&amp;quot;&#34;&gt;http://www.cidades.ibge.gov.br/xtras/perfil.php?lang=&amp;amp;codmun=&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;link &amp;lt;- Mayors$Link
grep(&amp;ldquo;distrito federal|brasilia&amp;rdquo;, link)
link &amp;lt;- link[-804]
link2 &amp;lt;- Mayors$Code2
link2 &amp;lt;- link2[-804]&lt;/p&gt;

&lt;p&gt;Prefeitos &amp;lt;- data.frame()
Cidades &amp;lt;- data.frame()
Pref &amp;lt;- data.frame()&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next comes our webscrape, which is incredibly easy with &lt;code&gt;rvest&lt;/code&gt; (&lt;code&gt;xml2&lt;/code&gt; is likewise easy). The only hard part of this entire scrape is getting the words &amp;ldquo;Prefeito&amp;rdquo; along with the name of the mayor out of the document. This relies on regex, which can be tricky. But trial and error should lead you to the right answer for whatever you need. Or search &lt;a href=&#34;http://www.rexegg.com/regex-quickstart.html&#34;&gt;Google&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;for(i in 1:length(link)){
  URL &amp;lt;- paste(url, link2[i], &amp;ldquo;&amp;amp;search=&amp;ldquo;, link[i], sep=&amp;ldquo;&amp;rdquo;)
  pref &amp;lt;- read_html(URL)
  pref1 &amp;lt;- html_nodes(pref, xpath=&amp;lsquo;//&lt;em&gt;[@id=&amp;ldquo;mod_perfil_infosbasicas&amp;rdquo;]&amp;lsquo;)
  str &amp;lt;- html_text(pref1)
  str1 &amp;lt;- unlist(str_extract_all(str, &amp;ldquo;Prefeito[\w A-Z]&lt;/em&gt;&amp;rdquo;))
  print(str1)
  Prefeitos &amp;lt;- rbind(Prefeitos, str1, stringsAsFactors=F)
  City &amp;lt;- link[i]
  Cidades &amp;lt;- rbind(Cidades, City, stringsAsFactors=F)
  Pref &amp;lt;- cbind(Prefeitos, Cidades)
}&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;With a little tidying, we have a nice little dataset of each current mayors for each municipality in Brazil.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;colnames(Pref) &amp;lt;- c(&amp;ldquo;Prefeito&amp;rdquo;, &amp;ldquo;Municipio&amp;rdquo;)
Pref$Prefeito &amp;lt;- gsub(&amp;ldquo;Prefeito&amp;rdquo;, &amp;ldquo;&amp;rdquo;, Pref$Prefeito)
Pref$Prefeito &amp;lt;- stri_trans_general(Pref$Prefeito, &amp;ldquo;Latin-ASCII&amp;rdquo;)
Pref1 &amp;lt;- Pref
Pref1$Municipio &amp;lt;- Pref1$Municipio %&amp;gt;%
  str_split_fixed(&amp;rdquo;\|&amp;ldquo;, n=2) %&amp;gt;%
  toupper()
Pref$Name_UF &amp;lt;- Pref1$Municipio[,1]
Pref$MUNIC &amp;lt;- Pref1$Municipio[,2]
Pref &amp;lt;- select(Pref, -Municipio)
Mayors$MUNIC &amp;lt;- gsub(&amp;rdquo;[-]&amp;ldquo;, &amp;rdquo; &amp;ldquo;, Mayors$MUNIC)
Pref$MUNIC &amp;lt;- gsub(&amp;rdquo;[-]&amp;ldquo;, &amp;rdquo; &amp;ldquo;, Pref$MUNIC)
rm(Pref1)&lt;/p&gt;

&lt;p&gt;Prefeitos &amp;lt;- full_join(Mayors, Pref)&lt;/p&gt;

&lt;p&gt;Prefeitos &amp;lt;- select(Prefeitos, -c(Link, MUNIC2, Name_UF2, Code2))
Prefeitos &amp;lt;- Prefeitos[,c(1:5, 7, 6)]&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/TRMOSkV.png&#34; style=&#34;width:650px;height:400px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; Supposedly, Hadley Wickham doesn&amp;rsquo;t actually like this term, but I&amp;rsquo;ll use it anyway, I&amp;rsquo;m sure he wouldn&amp;rsquo;t mind :smiley:. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/VuCDpaX.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geo-reference an image in R</title>
      <link>/1/01/01/geo-reference-an-image-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/geo-reference-an-image-in-r/</guid>
      <description>&lt;p&gt;R is actually great for working with spatial data (for example, see &lt;a href=&#34;http://spatial.ly/2012/03/mapped-british-shipping-1750-1800/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://pakillo.github.io/R-GIS-tutorial/#gmap&#34;&gt;here&lt;/a&gt; for fantastic graphs and maps made with R), however, you often need data that is &lt;em&gt;actually spatial&lt;/em&gt; to get started! What do you do if you have an image, a map, let&amp;rsquo;s say, that is not geo-referenced in any way?&lt;br /&gt;
The regular answer to this problem is to use software such as &lt;a href=&#34;http://www.qgis.com/&#34;&gt;QGIS&lt;/a&gt; to manually enter GPS coordinates, with the &lt;a href=&#34;http://www.gps-coordinates.net/&#34;&gt;help&lt;/a&gt; of Google Maps or something similar. But R can be used for this too, and it&amp;rsquo;s quite easy to do.&lt;/p&gt;

&lt;p&gt;First, we load some necessary packages. Here, I&amp;rsquo;m working with &lt;code&gt;.tiff&lt;/code&gt; files that I will change into Geo-tiffs. For other formats, you will need some other packages (such as &lt;code&gt;png&lt;/code&gt;, for example).&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(raster)
library(rgdal)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we read in the non-spatial image using the &lt;code&gt;raster&lt;/code&gt; command. By plotting this in RStudio, the image can be cropped in the preview window, if you want to crop it down the area of interest. This is also useful if the image came with extra, non-map parts (logos etc.).&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;Map &amp;lt;- raster(&amp;ldquo;1.tiff&amp;rdquo;)&lt;br /&gt;
Map
plot(Map)
map2 &amp;lt;- crop(Map, drawExtent(show=TRUE, col=&amp;ldquo;red&amp;rdquo;))
plot(map2)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we can enter in the maximal points of the image, xmin/xmax and ymin/ymax, respectively. These coordinates refer to an area of S√£o Paulo, Brazil. The x-axis is longitude, the y-axis latitude. You can get the coordinates from &lt;a href=&#34;http://www.gps-coordinates.net/&#34;&gt;www.gps-coordinates.net&lt;/a&gt; for the area you need. We also need to tell R what type of map projection we are going to write into the image. Here we&amp;rsquo;ll use &lt;code&gt;&amp;quot;+proj=longlat +datum=WGS84&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
xmin(map2) &amp;lt;- -46.67449772357941
xmax(map2) &amp;lt;- -46.524503231048584
ymin(map2) &amp;lt;- -23.638627166908787
ymax(map2) &amp;lt;- -23.517227011061372
crs(map2) &amp;lt;- &amp;ldquo;+proj=longlat +datum=WGS84&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This part is the main piece of work. But after it&amp;rsquo;s done, you&amp;rsquo;ve got yourself a geo-referenced image. Here, we&amp;rsquo;ll write it to the geo-tiff format I mentioned earlier.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;writeRaster(map1, &amp;ldquo;Gmap1.tiff&amp;rdquo;, &amp;ldquo;GTiff&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Simple! :smiling_imp:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make a colour table in R with ggplot2</title>
      <link>/1/01/01/make-a-colour-table-in-r-with-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/make-a-colour-table-in-r-with-ggplot2/</guid>
      <description>

&lt;p&gt;I loved &lt;a href=&#34;https://github.com/hdugan/rColorTable/blob/master/rColorTable.R&#34;&gt;this&lt;/a&gt; R script from hdugan when I first saw it a while ago. The script makes a 2-page pdf of all the colors available in R, using R. Nice.&lt;/p&gt;

&lt;p&gt;The other day, I thought about making a tidyverse version of it, using dplyr to get the data ready and ggplot2 to visualize it. I won&amp;rsquo;t for a second pretend that this code is as short and tidy as the original, and in fact it may be a good example of when base R can be really useful, but anyway here it is. (The pdf it produces follows.) The table shows all the colours available in R, from the base colour on the left hand side, and then a scale of increasingly darker hues (from 1 to 4) for colours that have them. The basic idea was to create six plots and place them side by side using &lt;code&gt;cowplot::plot_grid()&lt;/code&gt;. (&lt;code&gt;grid.arrange()&lt;/code&gt; from the gridExtra package was a little less customizable.) So here you go: a tidyverse R Colour Table. (Using RColorBrewer you could add some purdy palette extensions). It&amp;rsquo;s a one-page pdf, you could split into smaller images by subsetting the data and so on.&lt;/p&gt;

&lt;p&gt;{% highlight r %}&lt;/p&gt;

&lt;h1 id=&#34;r-colors-minus-100-shades-of-grey&#34;&gt;R colors minus 100 shades of grey&lt;/h1&gt;

&lt;p&gt;library(stringr)
library(tidyverse)&lt;/p&gt;

&lt;h1 id=&#34;get-data&#34;&gt;get &amp;lsquo;data&amp;rsquo;:&lt;/h1&gt;

&lt;p&gt;colour &amp;lt;- data_frame(colours = colors()) %&amp;gt;%
  filter(!grepl(&amp;ldquo;gray&amp;rdquo;, colours),
         !grepl(&amp;ldquo;grey&amp;rdquo;, colours)) %&amp;gt;%
  mutate(general_colour = gsub(&amp;rdquo;[0-9]&amp;ldquo;, &amp;ldquo;&amp;rdquo;, colours),
         c1 = ifelse(grepl(&amp;ldquo;1&amp;rdquo;, colours), 1, 0),
         c2 = ifelse(grepl(&amp;ldquo;2&amp;rdquo;, colours), 1, 0),
         c3 = ifelse(grepl(&amp;ldquo;3&amp;rdquo;, colours), 1, 0),
         c4 = ifelse(grepl(&amp;ldquo;4&amp;rdquo;, colours), 1, 0)) %&amp;gt;%
  select(-1) %&amp;gt;%
  group_by(general_colour) %&amp;gt;%
  summarise_each(funs(sum)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(c1 = ifelse(grepl(1, c1), paste0(general_colour, c1), NA),
         c2 = ifelse(grepl(1, c2), paste0(general_colour, &amp;ldquo;2&amp;rdquo;), NA),
         c3 = ifelse(grepl(1, c3), paste0(general_colour, &amp;ldquo;3&amp;rdquo;), NA),
         c4 = ifelse(grepl(1, c4), paste0(general_colour, &amp;ldquo;4&amp;rdquo;), NA),
         c1 = ifelse(is.na(c1), general_colour, c1),
         c2 = ifelse(is.na(c2), general_colour, c2),
         c3 = ifelse(is.na(c3), general_colour, c3),
         c4 = ifelse(is.na(c4), general_colour, c4))&lt;/p&gt;

&lt;h2 id=&#34;create-six-plots&#34;&gt;create six plots:&lt;/h2&gt;

&lt;h1 id=&#34;just-the-names-by-setting-alpha-to-0&#34;&gt;Just the names, by setting alpha to 0:&lt;/h1&gt;

&lt;p&gt;g0 &amp;lt;- ggplot(colour, aes(x = general_colour)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;, alpha = 0) +
  coord_flip() +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        axis.title.x = element_blank(), panel.grid = element_blank(),
        axis.title.y = element_blank())&lt;/p&gt;

&lt;p&gt;g &amp;lt;- ggplot(colour, aes(x = general_colour, color = general_colour,
                   fill = general_colour)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$general_colour) +
  scale_fill_manual(values = colour$general_colour) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_1 &amp;lt;- ggplot(colour, aes(x = c1, color = c1,
                        fill = c1)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c1) +
  scale_fill_manual(values = colour$c1) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_2 &amp;lt;- ggplot(colour, aes(x = c2, color = c2,
                        fill = c2)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c2) +
  scale_fill_manual(values = colour$c2) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_3 &amp;lt;- ggplot(colour, aes(x = c3, color = c3,
                        fill = c3)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c3) +
  scale_fill_manual(values = colour$c3) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;g_4 &amp;lt;- ggplot(colour, aes(x = c4, color = c4,
                        fill = c4)) +
  geom_bar(position = &amp;ldquo;stack&amp;rdquo;) +
  coord_flip() +
  scale_color_manual(values = colour$c4) +
  scale_fill_manual(values = colour$c4) +
  theme_minimal() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;) +
  theme(axis.text = element_blank(), axis.ticks = element_blank(),
        axis.title = element_blank(), panel.grid = element_blank())&lt;/p&gt;

&lt;p&gt;library(cowplot)&lt;/p&gt;

&lt;h1 id=&#34;here-i-create-a-pdf-but-you-can-just-as-easily-create-a&#34;&gt;Here I create a pdf, but you can just as easily create a&lt;/h1&gt;

&lt;h1 id=&#34;png-or-a-jpeg&#34;&gt;png or a jpeg.&lt;/h1&gt;

&lt;p&gt;pdf(file = &amp;ldquo;color_chart_dplyr.pdf&amp;rdquo;, height = 35, width = 8)
plot_grid(g0, g, g_1, g_2, g_3, g_4, align = &amp;ldquo;h&amp;rdquo;, ncol = 6,
          rel_widths = c(.75, 1.05, 1.05, 1.05, 1.05, 1.05))
dev.off()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src = &#34;http://i.imgur.com/JVXhXyj.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Map-making with R and electionsBR</title>
      <link>/1/01/01/map-making-with-r-and-electionsbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/map-making-with-r-and-electionsbr/</guid>
      <description>&lt;p&gt;For those interested in Brazilian politics, there&amp;rsquo;s a great new package called &lt;code&gt;electionsBR&lt;/code&gt; (those who understand Portuguese can find a post on it &lt;a href=&#34;http://fmeireles.com/blog/rstats/electionsbr-um-pacote-para-baixar-dados-eleitorais-do-tse&#34;&gt;here&lt;/a&gt;). This package takes data from the &lt;em&gt;Tribunal Superior Eleitoral&lt;/em&gt; and makes it available in a tidy format for users of R. Given my recent obsession with &lt;a href=&#34;http://robertmyles.github.io//re-creating-plots-from-the-economist-in-r.html&#34;&gt;map-making&lt;/a&gt;, I think it&amp;rsquo;s only natural I&amp;rsquo;d want to make maps of Brazil with this package.&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So, what can we do with it? Well, how about a map of how Brazilians voted in the general election of 2014? To do this, we can use &lt;code&gt;electionsBR&lt;/code&gt; to get the election data, and a mixture of &lt;code&gt;tidyverse&lt;/code&gt; and some mapping and plotting packages:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(tidyverse)
library(electionsBR)
library(ggmap)
library(rgdal)
library(stringi)
library(scales)
library(maptools)
library(RColorBrewer)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;vote_mun_zone_fed()&lt;/code&gt; function takes a single argument, &lt;code&gt;year&lt;/code&gt;, as an integer. There are quite a lot of data, so it takes a little while to download.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
Mun &amp;lt;- vote_mun_zone_fed(2014)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Once we have these data, we can use the &lt;code&gt;tidyverse&lt;/code&gt; to clean it up and organize it they way we want. I&amp;rsquo;m going to change the character encoding to ASCII, using the &lt;code&gt;stringi&lt;/code&gt; package, and select only the columns I need.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
Mun &amp;lt;- Mun %&amp;gt;%
  select(SIGLA_UF, DESCRICAO_CARGO, CODIGO_MUNICIPIO, TOTAL_VOTOS,
         NUMERO_CAND, NOME_MUNICIPIO, NUM_TURNO, SIGLA_PARTIDO) %&amp;gt;%
  mutate(NOME_MUNICIPIO = stri_trans_general(NOME_MUNICIPIO, &amp;ldquo;Latin-ASCII&amp;rdquo;))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;One interesting thing we could do with this dataset is map the percentage of the electorate that voted for Dilma. We&amp;rsquo;ll need shapefiles for Brazil, which you can get from &lt;a href=&#34;http://www.gadm.org/country&#34;&gt;gadm.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll also need to isolate the vote for Dilma and then calculate the proportion in each municipality that voted for her. There were also two rounds of voting, so we can show each one. The code below does this for the first round, to do the same thing for the second round, we just change the first call to &lt;code&gt;filter&lt;/code&gt; to &lt;code&gt;NUM_TURNO == 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
Pres1 &amp;lt;- Mun %&amp;gt;%
  filter(DESCRICAO_CARGO == &amp;ldquo;PRESIDENTE&amp;rdquo;, NUM_TURNO == 1,
         SIGLA_UF != &amp;ldquo;ZZ&amp;rdquo;) %&amp;gt;%
  group_by(NUMERO_CAND, CODIGO_MUNICIPIO) %&amp;gt;%
  mutate(SUM = sum(TOTAL_VOTOS)) %&amp;gt;%
  distinct(CODIGO_MUNICIPIO, .keep_all=T) %&amp;gt;%
  ungroup() %&amp;gt;%
  group_by(CODIGO_MUNICIPIO) %&amp;gt;%
  mutate(PERC = TOTAL_VOTOS/sum(TOTAL_VOTOS)*100) %&amp;gt;%
  arrange(SIGLA_UF, NOME_MUNICIPIO) %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(NUMERO_CAND == 13)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we read in our shape files. We have some work to do to tidy up the names of the municipalities and to correct for coding errors.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
BRmap &amp;lt;- readOGR(dsn = &amp;ldquo;BRA_adm_shp&amp;rdquo;, layer = &amp;ldquo;BRA_adm3&amp;rdquo;, verbose = FALSE)
BRmap@data$NAME_2 &amp;lt;- BRmap@data$NAME_2 %&amp;gt;%
  as.character() %&amp;gt;%
  stri_trans_general(&amp;ldquo;Latin-ASCII&amp;rdquo;) %&amp;gt;%
  toupper()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what municipalities are missing from our &lt;code&gt;electionsBR&lt;/code&gt; municipality data.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
&amp;lsquo;%ni%&amp;rsquo; &amp;lt;- Negate(&amp;lsquo;%in%&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;unique(BRmap@data$NAME_2[which(BRmap@data$NAME_2 %ni% Mun$NOME_MUNICIPIO)])&lt;/p&gt;

&lt;p&gt;[1] &amp;ldquo;BARRA DA CHOCA&amp;rdquo;                &amp;ldquo;DIAS D&amp;rsquo;VILA&amp;rdquo;&lt;br /&gt;
  [3] &amp;ldquo;LIVRAMENTO DO BRUMADO&amp;rdquo;         &amp;ldquo;MUQUEM DE SAO FRANCISCO&amp;rdquo;&lt;br /&gt;
  [5] &amp;ldquo;OLIVERIA DOS BREJINHOS&amp;rdquo;        &amp;ldquo;PAU BRAZIL&amp;rdquo;&lt;br /&gt;
  [7] &amp;ldquo;QUIJINGUE&amp;rdquo;                     &amp;ldquo;ITAPAJE&amp;rdquo;&lt;br /&gt;
  [9] &amp;ldquo;MISSO VELHA&amp;rdquo;                   &amp;ldquo;SAO JOAO DO BELM&amp;rdquo;&lt;br /&gt;
 [11] &amp;ldquo;SAO LUIZ DO CURU&amp;rdquo;              &amp;ldquo;GUIA BRANCA&amp;rdquo;&lt;br /&gt;
 [13] &amp;ldquo;ILHA TRINDADE&amp;rdquo;                 &amp;ldquo;ILHAS DE MARTIM VAZ&amp;rdquo;&lt;br /&gt;
 [15] &amp;ldquo;AMERICANO DO BRAZIL&amp;rdquo;           &amp;ldquo;BRASABRANTES&amp;rdquo;&lt;br /&gt;
 [17] &amp;ldquo;MATEIRA&amp;rdquo;                       &amp;ldquo;PORTEIRO&amp;rdquo;&lt;br /&gt;
 [19] &amp;ldquo;SANTA RITA DE ARAGUAIA&amp;rdquo;        &amp;ldquo;ALTO ALEGRE DO MARANHO&amp;rdquo;&lt;br /&gt;
 [21] &amp;ldquo;AMAPA DO MARANHO&amp;rdquo;              &amp;ldquo;ANAPUROS&amp;rdquo;&lt;br /&gt;
 [23] &amp;ldquo;BOM JARDIN&amp;rdquo;                    &amp;ldquo;HUMBERTO CAMPOS&amp;rdquo;&lt;br /&gt;
 [25] &amp;ldquo;MATES DO NORTE&amp;rdquo;                &amp;ldquo;VICTORINO FREIRE&amp;rdquo;&lt;br /&gt;
 [27] &amp;ldquo;BATAIPORA&amp;rdquo;                     &amp;ldquo;BARRA DOS BUGRE&amp;rdquo;&lt;br /&gt;
 [29] &amp;ldquo;POXOREO&amp;rdquo;                       &amp;ldquo;SAO FELIX XINGU&amp;rdquo;&lt;br /&gt;
 [31] &amp;ldquo;BANDIERA DO SUL&amp;rdquo;               &amp;ldquo;BRASOPOLIS&amp;rdquo;&lt;br /&gt;
 [33] &amp;ldquo;CACHOEIRA DE PAJES&amp;rdquo;            &amp;ldquo;CAMPOS VERDES DE GOIAS&amp;rdquo;&lt;br /&gt;
 [35] &amp;ldquo;CARAVALHOPOLIS&amp;rdquo;                &amp;ldquo;CASSITERITA&amp;rdquo;&lt;br /&gt;
 [37] &amp;ldquo;CHAVESLANDIA&amp;rdquo;                  &amp;ldquo;FELISBERTO CALDEIRA&amp;rdquo;&lt;br /&gt;
 [39] &amp;ldquo;FRANCISCO DUMON&amp;rdquo;               &amp;ldquo;GOUVEA&amp;rdquo;&lt;br /&gt;
 [41] &amp;ldquo;ITABIRINHA DE MANTENA&amp;rdquo;         &amp;ldquo;ITACARAMBIRA&amp;rdquo;&lt;br /&gt;
 [43] &amp;ldquo;PIEDADE DO PONTE NOVA&amp;rdquo;         &amp;ldquo;PIUI&amp;rdquo;&lt;br /&gt;
 [45] &amp;ldquo;QUELUZITA&amp;rdquo;                     &amp;ldquo;SAO FRANCISCO DE OLIVEIRA&amp;rdquo;&lt;br /&gt;
 [47] &amp;ldquo;SAO SEBASTIO DA VARGEM ALEGRE&amp;rdquo; &amp;ldquo;SAN ANTONIO DO ITAMBE&amp;rdquo;&lt;br /&gt;
 [49] &amp;ldquo;SAN ANTONIO DO RIO ABAI&amp;rdquo;       &amp;ldquo;SANTA RITA DO IBITIPOCA&amp;rdquo;&lt;br /&gt;
 [51] &amp;ldquo;SANTA RITA ITUETO&amp;rdquo;             &amp;ldquo;ALMERIM&amp;rdquo;&lt;br /&gt;
 [53] &amp;ldquo;BRAGANGA&amp;rdquo;                      &amp;ldquo;ME DO RIO&amp;rdquo;&lt;br /&gt;
 [55] &amp;ldquo;BOQUEIRAO DOS COCHOS&amp;rdquo;          &amp;ldquo;DESTERRO DE MALTA&amp;rdquo;&lt;br /&gt;
 [57] &amp;ldquo;MONGEIRO&amp;rdquo;                      &amp;ldquo;PEDRA LAVADRA&amp;rdquo;&lt;br /&gt;
 [59] &amp;ldquo;RIACHO&amp;rdquo;                        &amp;ldquo;SAO MIGUEL TAIPU&amp;rdquo;&lt;br /&gt;
 [61] &amp;ldquo;SERIDO&amp;rdquo;                        &amp;ldquo;ALTAMIRA DO PARAN&amp;rdquo;&lt;br /&gt;
 [63] &amp;ldquo;ARAPU&amp;rdquo;                         &amp;ldquo;ASSIS CHATEAUBRI&amp;rdquo;&lt;br /&gt;
 [65] &amp;ldquo;CAMPO&amp;rdquo;                         &amp;ldquo;CONSELHEIRO MAYRINCK&amp;rdquo;&lt;br /&gt;
 [67] &amp;ldquo;IVATUVA&amp;rdquo;                       &amp;ldquo;JABUTI&amp;rdquo;&lt;br /&gt;
 [69] &amp;ldquo;SAO ANTONIO DE SUDOESTE&amp;rdquo;       &amp;ldquo;SALTO DO LONDRA&amp;rdquo;&lt;br /&gt;
 [71] &amp;ldquo;SANTA CRUZ DE MONTE CASTE&amp;rdquo;     &amp;ldquo;SANTA ISABEL DO OESTE&amp;rdquo;&lt;br /&gt;
 [73] &amp;ldquo;TEXEIRA SOARES&amp;rdquo;                &amp;ldquo;TIBAJI&amp;rdquo;&lt;br /&gt;
 [75] &amp;ldquo;VENCESLAU BRAS&amp;rdquo;                &amp;ldquo;VILA ALTA&amp;rdquo;&lt;br /&gt;
 [77] &amp;ldquo;BARRA DE GUABIRA&amp;rdquo;              &amp;ldquo;CABO&amp;rdquo;&lt;br /&gt;
 [79] &amp;ldquo;CACHOERINHA&amp;rdquo;                   &amp;ldquo;IGARACU&amp;rdquo;&lt;br /&gt;
 [81] &amp;ldquo;LAGOA DO ITAENGA&amp;rdquo;              &amp;ldquo;SAO JOAO DO BELMONTE&amp;rdquo;&lt;br /&gt;
 [83] &amp;ldquo;SAO JOAQUIN DO MONTE&amp;rdquo;          &amp;ldquo;SITIO DOS MOREIRAS&amp;rdquo;&lt;br /&gt;
 [85] &amp;ldquo;TAMBE&amp;rdquo;                         &amp;ldquo;PEDRO LI&amp;rdquo;&lt;br /&gt;
 [87] &amp;ldquo;SAO JOAO PIAUI&amp;rdquo;                &amp;ldquo;SAO MIGUEL TAPUIO&amp;rdquo;&lt;br /&gt;
 [89] &amp;ldquo;CAMPOS&amp;rdquo;                        &amp;ldquo;CAREPEBUS&amp;rdquo;&lt;br /&gt;
 [91] &amp;ldquo;CONCEICAO MACABU&amp;rdquo;              &amp;ldquo;ENGENHEIRO PAULO DE FRONT&amp;rdquo;&lt;br /&gt;
 [93] &amp;ldquo;PARATI&amp;rdquo;                        &amp;ldquo;VALENCIA&amp;rdquo;&lt;br /&gt;
 [95] &amp;ldquo;ACU&amp;rdquo;                           &amp;ldquo;AUGUSTO SEVERO&amp;rdquo;&lt;br /&gt;
 [97] &amp;ldquo;GOVERNADOR DIX-SEPT ROSAD&amp;rdquo;     &amp;ldquo;JANUARIO CICCO&amp;rdquo;&lt;br /&gt;
 [99] &amp;ldquo;JARDIM-PIRANHAS&amp;rdquo;               &amp;ldquo;JUNCO&amp;rdquo;&lt;br /&gt;
[101] &amp;ldquo;LAGOA DE ANTA&amp;rdquo;                 &amp;ldquo;LAGOAS DE VELHOS&amp;rdquo;&lt;br /&gt;
[103] &amp;ldquo;SAO MIGUEL DE TOUROS&amp;rdquo;          &amp;ldquo;BAJE&amp;rdquo;&lt;br /&gt;
[105] &amp;ldquo;BARO&amp;rdquo;                          &amp;ldquo;BOA VISTA DAS MISSES&amp;rdquo;&lt;br /&gt;
[107] &amp;ldquo;CAMAGUA&amp;rdquo;                       &amp;ldquo;CAMPO REAL&amp;rdquo;&lt;br /&gt;
[109] &amp;ldquo;CHIAPETA&amp;rdquo;                      &amp;ldquo;DILERMANO DE AGUIAR&amp;rdquo;&lt;br /&gt;
[111] &amp;ldquo;ERVAL&amp;rdquo;                         &amp;ldquo;INHACOR&amp;rdquo;&lt;br /&gt;
[113] &amp;ldquo;LAGOA MIRIM&amp;rdquo;                   &amp;ldquo;MARCIONILIO DIAS&amp;rdquo;&lt;br /&gt;
[115] &amp;ldquo;MAXIMILIANO DE ALMAEIDA&amp;rdquo;       &amp;ldquo;PALMITINHOS&amp;rdquo;&lt;br /&gt;
[117] &amp;ldquo;SAO MIGUEL DAS MISSES&amp;rdquo;         &amp;ldquo;UREA&amp;rdquo;&lt;br /&gt;
[119] &amp;ldquo;VITORIA DAS MISSES&amp;rdquo;            &amp;ldquo;ALTA FLORESTA D&amp;rsquo;OESTE&amp;rdquo;&lt;br /&gt;
[121] &amp;ldquo;ALVORADA D&amp;rsquo;OESTE&amp;rdquo;              &amp;ldquo;ESPIGAO D&amp;rsquo;OESTE&amp;rdquo;&lt;br /&gt;
[123] &amp;ldquo;NOVA BRASILANDIA D&amp;rsquo;OESTE&amp;rdquo;      &amp;ldquo;SAO FELIPE D&amp;rsquo;OESTE&amp;rdquo;&lt;br /&gt;
[125] &amp;ldquo;SANTA LUZIA D&amp;rsquo;OESTE&amp;rdquo;           &amp;ldquo;ALFREDO MARCONDE&amp;rdquo;&lt;br /&gt;
[127] &amp;ldquo;APARECIDA DOESTE&amp;rdquo;              &amp;ldquo;BRODOSQUI&amp;rdquo;&lt;br /&gt;
[129] &amp;ldquo;DULCINOPOLIS&amp;rdquo;                  &amp;ldquo;EMBU&amp;rdquo;&lt;br /&gt;
[131] &amp;ldquo;ESTRELA DO OESTE&amp;rdquo;              &amp;ldquo;FERNO&amp;rdquo;&lt;br /&gt;
[133] &amp;ldquo;FERRAZ DE VASCON&amp;rdquo;              &amp;ldquo;FLORINIA&amp;rdquo;&lt;br /&gt;
[135] &amp;ldquo;GUARANI DO OESTE&amp;rdquo;              &amp;ldquo;IPAUCU&amp;rdquo;&lt;br /&gt;
[137] &amp;ldquo;JABUTICABAL&amp;rdquo;                   &amp;ldquo;LUISIANIA&amp;rdquo;&lt;br /&gt;
[139] &amp;ldquo;PALMEIRA DO OESTE&amp;rdquo;             &amp;ldquo;PARANAPAREMA&amp;rdquo;&lt;br /&gt;
[141] &amp;ldquo;PIRACUNUNGA&amp;rdquo;                   &amp;ldquo;PONTES GESTRAL&amp;rdquo;&lt;br /&gt;
[143] &amp;ldquo;QUITANA&amp;rdquo;                       &amp;ldquo;SAO LUIZ DO PARAITINGA&amp;rdquo;&lt;br /&gt;
[145] &amp;ldquo;SALTO DO PIRAPORA&amp;rdquo;             &amp;ldquo;SANTA CLARA DO OESTE&amp;rdquo;&lt;br /&gt;
[147] &amp;ldquo;SANTA RITA DO OESTE&amp;rdquo;           &amp;ldquo;GRAO PARA&amp;rdquo;&lt;br /&gt;
[149] &amp;ldquo;LUIZ ALVES&amp;rdquo;                    &amp;ldquo;PAULO LOPEZ&amp;rdquo;&lt;br /&gt;
[151] &amp;ldquo;PICARRAS&amp;rdquo;                      &amp;ldquo;PONTA ALTA&amp;rdquo;&lt;br /&gt;
[153] &amp;ldquo;BUQUIM&amp;rdquo;                        &amp;ldquo;GRACHO CARDOSO&amp;rdquo;&lt;br /&gt;
[155] &amp;ldquo;ITAPORANGA DAJUDA&amp;rdquo;             &amp;ldquo;NOSSA SENHORA APRECIDO&amp;rdquo;&lt;br /&gt;
[157] &amp;ldquo;COUTO MAGALHAES&amp;rdquo;               &amp;ldquo;MOSQUITO&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Hmmm, that&amp;rsquo;s a little annoying, but some are easy to fix, so in the end, we&amp;rsquo;ll be missing only a few municipalities because of these coding differences. Some others are harder to figure out: I don&amp;rsquo;t know if the errors are in the TSE&amp;rsquo;s data, or in this geo-data. I don&amp;rsquo;t feel like spending a long time recoding stuff though, so let&amp;rsquo;s leave it aside for now.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;ASSIS BRAZIL&amp;rdquo;] &amp;lt;- &amp;ldquo;ASSIS BRASIL&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;JOINVILE&amp;rdquo;] &amp;lt;- &amp;ldquo;JOINVILLE&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;MACEIO (CAPITAL)&amp;rdquo;] &amp;lt;- &amp;ldquo;MACEIO&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SAO GABRIEL DE CAHOEIRA&amp;rdquo;] &amp;lt;- &amp;ldquo;SAO GABRIEL DA CACHOEIRA&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;NOVO BRAZIL&amp;rdquo;] &amp;lt;- &amp;ldquo;NOVO BRASIL&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;PERI-MIRIM&amp;rdquo;] &amp;lt;- &amp;ldquo;PERI MIRIM&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SEM-PEIXE&amp;rdquo;] &amp;lt;- &amp;ldquo;SEM PEIXE&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;BRAZIL NOVO&amp;rdquo;] &amp;lt;- &amp;ldquo;BRASIL NOVO&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;OLHOS-D&amp;rsquo;AGUA&amp;rdquo;] &amp;lt;- &amp;ldquo;OLHOS D&amp;rsquo;AGUA&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;OLHO-D&amp;rsquo;AGUA DO BORGES&amp;rdquo;] &amp;lt;- &amp;ldquo;OLHO D&amp;rsquo;AGUA DO BORGES&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SERRA DA SAUDAD&amp;rdquo;] &amp;lt;- &amp;ldquo;SERRA DA SAUDADE&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;PEIXE BOI&amp;rdquo;] &amp;lt;- &amp;ldquo;PEIXE-BOI&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;RICAHO DOS CAVALOS&amp;rdquo;] &amp;lt;- &amp;ldquo;RIACHO DOS CAVALOS&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;BRAZILEIRA&amp;rdquo;] &amp;lt;- &amp;ldquo;BRASILEIRA&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SUL BRAZIL&amp;rdquo;] &amp;lt;- &amp;ldquo;SUL BRASIL&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;FLORINIAPOLIS&amp;rdquo;] &amp;lt;- &amp;ldquo;FLORIANOPOLIS&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;BON JESUS DOS PERDOES&amp;rdquo;] &amp;lt;- &amp;ldquo;BOM JESUS DOS PERDOES&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;OLHO-D&amp;rsquo;AGUA DO BORGES&amp;rdquo;] &amp;lt;- &amp;ldquo;OLHO D&amp;rsquo;AGUA DO BORGES&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;MISSO&amp;rdquo;] &amp;lt;- &amp;ldquo;MISSAO&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SALIDAO&amp;rdquo;] &amp;lt;- &amp;ldquo;SOLIDAO&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;SAO JOAO DAS DUAS PONTE&amp;rdquo;] &amp;lt;- &amp;ldquo;SAO JOAO DAS DUAS PONTES&amp;rdquo;
BRmap@data$NAME_2[BRmap@data$NAME_2==&amp;ldquo;ORLEAES&amp;rdquo;] &amp;lt;- &amp;ldquo;ORLEANS&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;fortify&lt;/code&gt; to get all this into something useful for &lt;code&gt;ggplot()&lt;/code&gt; to deal with. Then we can add in all the data we have for Dilma&amp;rsquo;s vote totals and then we&amp;rsquo;re ready to plot something.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
Brasil &amp;lt;- fortify(BRmap, region = &amp;ldquo;ID_2&amp;rdquo;) %&amp;gt;%&lt;br /&gt;
  mutate(id = as.integer(id)) %&amp;gt;%
  full_join(BRmap@data, by =c(&amp;ldquo;id&amp;rdquo; = &amp;ldquo;ID_2&amp;rdquo;)) %&amp;gt;%
  select(c(id, long, lat, order, hole, piece, group, NAME_2)) %&amp;gt;%
  rename(NOME_MUNICIPIO = NAME_2)&lt;/p&gt;

&lt;p&gt;head(Brasil)
  id      long       lat order  hole piece group NOME_MUNICIPIO
1  1 -67.10586 -9.688110     1 FALSE     1   1.1     ACRELANDIA
2  1 -67.05984 -9.706651     2 FALSE     1   1.1     ACRELANDIA
3  1 -66.80647 -9.814520     3 FALSE     1   1.1     ACRELANDIA
4  1 -66.62003 -9.894039     4 FALSE     1   1.1     ACRELANDIA
5  1 -66.58875 -9.903196     5 FALSE     1   1.1     ACRELANDIA
6  1 -66.62333 -9.923209     6 FALSE     1   1.1     ACRELANDIA&lt;/p&gt;

&lt;p&gt;Dilma_1 &amp;lt;- left_join(Brasil, Pres1) %&amp;gt;%
  mutate(PERC = ifelse(is.na(PERC), mean(PERC, na.rm=T), PERC))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot() +
  geom_polygon(data = Dilma_1, aes(x = long, y = lat,
                                   group = group, fill = PERC),
               color = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;RdBu&amp;rdquo;,
                       breaks = pretty_breaks(n = 8)) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(fill = &amp;ldquo;Dilma (%)&amp;rdquo;) +
  theme_nothing(legend = TRUE) +
  xlim(range(Dilma_1$long)) + ylim(range(Dilma_1$lat)) +
  coord_map()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/xYMEQrk.jpg&#34; style=&#34;width:800px;height:800px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;We can see that even in 2014, Dilma&amp;rsquo;s support in the South-east of the country was not overwhelming.&lt;/p&gt;

&lt;p&gt;We can also use &lt;code&gt;electionsBR&lt;/code&gt; to look at other items of interest, such as the share of the party vote. For example, perhaps you&amp;rsquo;re interested in whether the Communist Party of Brazil has strongholds in the country. All we need to do is subset the &lt;code&gt;Mun&lt;/code&gt; dataframe that we downloaded earlier by &lt;code&gt;DESCRICAO_CARGO == &amp;quot;DEPUTADO FEDERAL&amp;quot;&lt;/code&gt; and &lt;code&gt;SIGLA_PARTIDO == &amp;quot;PC do B&amp;quot;&lt;/code&gt;. Apart from these changes, everything else can be done in the same way. Once we have this dataframe (which I&amp;rsquo;ll call &lt;code&gt;pc&lt;/code&gt;), we plot it in the same way:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot() +
  geom_polygon(data = pc, aes(x = long, y = lat, group = group,
                              fill = PERC),
               color = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;RdBu&amp;rdquo;,
                       breaks = pretty_breaks(n = 8)) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(fill = &amp;ldquo;PC do B (%)&amp;rdquo;) +
  theme_nothing(legend = TRUE) +
  xlim(range(pc$long)) + ylim(range(pc$lat)) +
  coord_map()
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/jXKjZgG.jpg&#34; style=&#34;width:800px;height:800px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Not a very Communist country, by the looks of things.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s a brief look at &lt;code&gt;electionsBR&lt;/code&gt;. Data for other years and elections is available, as well as data at other administrative levels, and not just the President and Federal Deputies. The TSE also holds data on the background of the candidates and their campaign spending, all of which can be utilized with &lt;code&gt;electionsBR&lt;/code&gt;. And if you fancy combining all this information with legislative behaviour from inside the Chamber of Deputies, just load the &lt;code&gt;bRasilLegis&lt;/code&gt; package and you have a wealth of data on Brazilian Federal Deputies at your fingertips. Indeed, I&amp;rsquo;m proud to be involved in both packages. It&amp;rsquo;s great to help to make the access to these data easier for those interested in Brazilian politics.&lt;/p&gt;

&lt;p&gt;P.s. This blog post was written using &lt;a href=&#34;http://rmarkdown.rstudio.com/r_notebooks.html&#34;&gt;&lt;code&gt;R Notebooks&lt;/code&gt;&lt;/a&gt; and transformed to .md in my jekyll &lt;code&gt;_posts&lt;/code&gt; folder using a function from &lt;a href=&#34;https://github.com/dgrtwo/dgrtwo.github.com/blob/master/_scripts/knitpages.R&#34;&gt;David Robinson&lt;/a&gt;. I&amp;rsquo;d have to say that I really like &lt;code&gt;R Notebooks&lt;/code&gt; so far, especially the preview. Try it out.&lt;/p&gt;

&lt;p&gt;Update: it seems that some folks might be running into problems running the scripts above, with &lt;strong&gt;R&lt;/strong&gt; spitting out: &lt;code&gt;Error: isTRUE(gpclibPermitStatus()) is not TRUE&lt;/code&gt;. The solution to this is to make sure you have rgdal or rgeos or a similar mapping package installed.&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; Disclosure: I&amp;rsquo;m involved in the development of this package, but I am not one of the original developers, that credit goes to &lt;a href=&#34;https://github.com/silvadenisson/electionsBR&#34;&gt;Denisson Silva&lt;/a&gt;, Fernando Meireles, and Beatriz Costa. Nevertheless, I&amp;rsquo;m promoting it here because I think it&amp;rsquo;s great, not because I&amp;rsquo;m involved. (Although I&amp;rsquo;m involved because I think it&amp;rsquo;s great :smile: ) &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ranking Brad Pitt‚Äôs Movies in R</title>
      <link>/1/01/01/ranking-brad-pitts-movies-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/ranking-brad-pitts-movies-in-r/</guid>
      <description>

&lt;p&gt;So I saw &lt;a href=&#34;http://movies.prettyfamous.com/stories/24289/ranking-every-brad-pitt-movie-from-worst-to-first&#34;&gt;this&lt;/a&gt; blog post, in which &lt;a href=&#34;http://www.prettyfamous.com/&#34;&gt;Pretty Famous&lt;/a&gt; ranked every one of Brad Pitt&amp;rsquo;s movies (I have no idea how I came across it, I&amp;rsquo;m not particularly a movie buff or a fan of Se√±or Pitt, but anyway). Then I wondered how easy/hard it would be to do something like that in R. Pretty Famous used a few sources, but here I&amp;rsquo;m going to stick to Rotten Tomatoes, since it&amp;rsquo;s a pretty well-known movie ratings site, maybe the most well-known. Pretty famous, you could say (ugh, apologies).&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t have much experience scraping information from the web, we first need to find the unique url for Brad Pitt. In other words, his &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/brad_pitt/&#34;&gt;personal page&lt;/a&gt;&amp;rdquo; on Rotten Tomatoes. Once we&amp;rsquo;ve done that, we need to identify what part of the page we want to scrape. In this case, that is the &amp;ldquo;Movies&amp;rdquo; table. You can right-click on this table and click &amp;ldquo;Inspect&amp;rdquo; or &amp;ldquo;Inspect Element&amp;rdquo; on your browser (I&amp;rsquo;m using Chrome on a macbook, but it should be pretty similar on other browsers). Once you find the &lt;em&gt;actual&lt;/em&gt; table, instead of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element holding it, or just a title, then copy the selector of that element. This can be done on Chrome by right clicking the line in the &amp;lsquo;Elements&amp;rsquo; panel that comes up when you right-click and click &amp;lsquo;Inspect&amp;rsquo;. You will have an option to &amp;lsquo;Copy&amp;rsquo;, then choose &amp;lsquo;Copy selector&amp;rsquo; (you can choose xpath if you want, but css is simpler). In any case, the elements will be highlighted on the page as you click on them.&lt;/p&gt;

&lt;p&gt;In R, we can use the &lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt; package to read the page, store the nodes of the web document that we want and then extract the table from this node set. The &amp;lsquo;table&amp;rsquo; ends up as a list of two dataframes, Brad Pitt&amp;rsquo;s films and TV appearances. His movies are in the first dataframe and so we extract that one out, as a dataframe called &amp;lsquo;movies&amp;rsquo;. Of course, in some of these movies he had a larger role than others, and can be said to have had a bigger impact on the rating score. But, hey, this is informal analysis.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(tidyverse)
library(rvest)
library(lubridate)&lt;/p&gt;

&lt;p&gt;url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/brad_pitt/&amp;quot;&#34;&gt;https://www.rottentomatoes.com/celebrity/brad_pitt/&amp;quot;&lt;/a&gt;
page &amp;lt;- read_html(url)
tb_x &amp;lt;- html_nodes(page, css = &amp;ldquo;#filmographyTbl&amp;rdquo;)
tb &amp;lt;- html_table(tb_x)
movies &amp;lt;- tb[[1]]
head(movies)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title&#34;&gt;RATING                               TITLE&lt;/h2&gt;

&lt;h2 id=&#34;1-no-score-yet-world-war-z-2&#34;&gt;1 No Score Yet                       World War Z 2&lt;/h2&gt;

&lt;h2 id=&#34;2-87-the-lost-city-of-z&#34;&gt;2          87%                  The Lost City of Z&lt;/h2&gt;

&lt;h2 id=&#34;3-no-score-yet-brad-s-status&#34;&gt;3 No Score Yet                       Brad&amp;rsquo;s Status&lt;/h2&gt;

&lt;h2 id=&#34;4-61-allied&#34;&gt;4          61%                              Allied&lt;/h2&gt;

&lt;h2 id=&#34;5-98-moonlight&#34;&gt;5          98%                           Moonlight&lt;/h2&gt;

&lt;h2 id=&#34;6-92-voyage-of-time-the-imax-experience&#34;&gt;6          92% Voyage of Time: The IMAX Experience&lt;/h2&gt;

&lt;h2 id=&#34;credit&#34;&gt;CREDIT&lt;/h2&gt;

&lt;h2 id=&#34;1-gerry-lane-n-n-n-producer&#34;&gt;1 Gerry Lane\n                                                \n                                \n                                        Producer&lt;/h2&gt;

&lt;h2 id=&#34;2-executive-producer&#34;&gt;2                                                                                                                               Executive Producer&lt;/h2&gt;

&lt;h2 id=&#34;3-actor&#34;&gt;3                                                                                                                                            Actor&lt;/h2&gt;

&lt;h2 id=&#34;4-max-vatan&#34;&gt;4                                                                                                                                        Max Vatan&lt;/h2&gt;

&lt;h2 id=&#34;5-executive-producer&#34;&gt;5                                                                                                                               Executive Producer&lt;/h2&gt;

&lt;h2 id=&#34;6-producer&#34;&gt;6                                                                                                                                         Producer&lt;/h2&gt;

&lt;h2 id=&#34;year&#34;&gt;YEAR&lt;/h2&gt;

&lt;h2 id=&#34;1-2017&#34;&gt;1 2017&lt;/h2&gt;

&lt;h2 id=&#34;2-2017&#34;&gt;2 2017&lt;/h2&gt;

&lt;h2 id=&#34;3-2017&#34;&gt;3 2017&lt;/h2&gt;

&lt;h2 id=&#34;4-2016&#34;&gt;4 2016&lt;/h2&gt;

&lt;h2 id=&#34;5-2016&#34;&gt;5 2016&lt;/h2&gt;

&lt;h2 id=&#34;6-2016&#34;&gt;6 2016&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ve got Mr. Pitt&amp;rsquo;s movies in a dataframe, with their rating, title, producer credits and year.  Since anything with &amp;ldquo;No Score Yet&amp;rdquo; is not of particular use to us, let&amp;rsquo;s remove it. We also could do with changing &amp;ldquo;87%&amp;rdquo; to an actual number, i.e. 0.87, and we&amp;rsquo;ll take out the movies in which he had no acting role, and try to clean up all those spaces and new lines.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
&amp;lsquo;%ni%&amp;rsquo; &amp;lt;- Negate(&amp;lsquo;%in%&amp;rsquo;)
movies &amp;lt;- movies %&amp;gt;%
  mutate(CREDIT = gsub(&amp;rdquo;\r\n&amp;rdquo;, &amp;ldquo;&amp;rdquo;, CREDIT)) %&amp;gt;%
  filter(RATING != &amp;ldquo;No Score Yet&amp;rdquo;,
         CREDIT %ni% c(&amp;ldquo;Producer&amp;rdquo;, &amp;ldquo;Executive Producer&amp;rdquo;),
         TITLE %ni% c(&amp;ldquo;Selma&amp;rdquo;, &amp;ldquo;The Time Traveler&amp;rsquo;s Wife&amp;rdquo;)) %&amp;gt;%
  mutate(RATING = gsub(&amp;ldquo;%&amp;rdquo;, &amp;ldquo;&amp;rdquo;, RATING),
         RATING = as.numeric(RATING),
         RATING = RATING/100)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So how do the ratings for his Pittness stack up? Let&amp;rsquo;s have a look-see, Rotten Tomatoes style:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(grid)
library(png)&lt;/p&gt;

&lt;p&gt;tomato &amp;lt;- readPNG(&amp;ldquo;/Users/robert/RobertMyles.github.io/images/tomato.png&amp;rdquo;)
g &amp;lt;- rasterGrob(tomato, interpolate=TRUE)&lt;/p&gt;

&lt;p&gt;ggplot(movies, aes(x = RATING)) +
  geom_histogram(bins = 20, fill = &amp;ldquo;#EE4000&amp;rdquo;, colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme_classic() +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;)) +
  annotation_custom(g, xmin=0, xmax=0.25, ymin=4, ymax=6)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-3-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(You can get the tomato image from &lt;a href=&#34;http://static.tvtropes.org/pmwiki/pub/images/rotten_tomatoes_8290.jpg&#34;&gt;here&lt;/a&gt;. Convert it to png and strip out (most of) the white background using &lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt; &amp;ndash; the command on a mac is &lt;code&gt;convert rotten_tomatoes.jpg -transparent white tomato.png&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Not so bad! Got some not-so-greats, but quite a lot of highly rated movies. I&amp;rsquo;m surprised, actually. In fact the mean and median values are:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
mean(movies$RATING)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;1-0-6508511&#34;&gt;[1] 0.6508511&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight r %}
median(movies$RATING)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;1-0-7&#34;&gt;[1] 0.7&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I wonder if his movies have gotten better? I was always under the impression that Brad Pitt was an actor who, like Leonardo DiCaprio, actually learned to act over time, instead of already being a talented actor when he started. Fair credit to them, though, they could have just rested on their laurels after they first became famous.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at how the ratings have change over time and see if Brad has gotten better or worse, judging by the film that came before.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies &amp;lt;- movies %&amp;gt;%
  arrange(YEAR) %&amp;gt;%
  mutate(difference = c(0, diff(RATING, lag = 1)),
         date_counter = 1:nrow(.))&lt;/p&gt;

&lt;p&gt;ggplot(movies, aes(x = date_counter, y = difference)) +
  geom_line(colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme_classic() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;1989&amp;rdquo;, x = 2, y = -0.7, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;2016&amp;rdquo;, x = 47, y = -0.7, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  geom_hline(yintercept = 0, linetype = 2, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  annotation_custom(g, xmin=0, xmax=7, ymin=0.5, ymax=0.95)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-5-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm, he&amp;rsquo;s had a fairly erratic career in terms of movie ratings. Looking at the relationship between ratings and time, there&amp;rsquo;s a bit of an improvement, and certainly less train-wrecks, but the improvement is not massive. Maybe he didn&amp;rsquo;t start off so bad, after all.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot(movies, aes(x = YEAR, y = RATING)) +
  geom_point(colour = &amp;ldquo;yellow&amp;rdquo;) +
  geom_smooth(method = &amp;ldquo;lm&amp;rdquo;, colour = &amp;ldquo;#EE4000&amp;rdquo;) +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotation_custom(g, xmin=2013, xmax=2016, ymin=0.01, ymax=0.25)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-6-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So what was Mr. Pitt&amp;rsquo;s worst film?&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies %&amp;gt;% arrange(RATING) %&amp;gt;% head(n = 1)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title-credit-year-difference-date-counter&#34;&gt;RATING      TITLE            CREDIT YEAR difference date_counter&lt;/h2&gt;

&lt;h2 id=&#34;1-0-04-cool-world-det-frank-harris-1992-0-79-5&#34;&gt;1   0.04 Cool World Det. Frank Harris 1992      -0.79            5&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Wow! 0.04!! I have never seen &amp;lsquo;Cool World&amp;rsquo;, but it can&amp;rsquo;t be that bad&amp;hellip;can it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/2oUrH2J.jpg&#34; alt=&#34;&#34; /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hmm, maybe it can&amp;hellip;&lt;/p&gt;

&lt;p&gt;And his best?&lt;/p&gt;

&lt;p&gt;{% highlight r %}
movies %&amp;gt;% arrange(desc(RATING)) %&amp;gt;% select(RATING, TITLE) %&amp;gt;% head(n = 1)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;rating-title-1&#34;&gt;RATING            TITLE&lt;/h2&gt;

&lt;h2 id=&#34;1-0-96-12-years-a-slave&#34;&gt;1   0.96 12 Years a Slave&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;12 Years a Slave. Well, that was a fine movie, and I thought Fassbender was fantastic, as usual. Which makes me think about how Brad Pitt compares to other actors of his generation. Fassbender might be a comparative late starter, but let&amp;rsquo;s see how he and some others (George Clooney, Leonardo DiCaprio, Daniel Day-Lewis, Jamie Foxx and Tom Cruise) compare to Brad Pitt in terms of ratings (earnings might be another interesting comparison). We can use the work we did earlier as an outline for a function to do the same as we did for Bradley for all these male actors, adding a column with a name of the actor.&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(reshape)&lt;/p&gt;

&lt;p&gt;actors &amp;lt;- c(&amp;ldquo;george_clooney&amp;rdquo;, &amp;ldquo;leonardo_di_caprio&amp;rdquo;, &amp;ldquo;daniel_daylewis&amp;rdquo;,
            &amp;ldquo;jamie_foxx&amp;rdquo;, &amp;ldquo;tom_cruise&amp;rdquo;, &amp;ldquo;michael_fassbender&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;base_url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://www.rottentomatoes.com/celebrity/&amp;quot;&#34;&gt;https://www.rottentomatoes.com/celebrity/&amp;quot;&lt;/a&gt;
movie_list &amp;lt;- list()&lt;/p&gt;

&lt;p&gt;for(actor in actors){
  url &amp;lt;- paste0(base_url, actor, &amp;ldquo;/&amp;rdquo;)
  page &amp;lt;- read_html(url)
  tb_x &amp;lt;- html_nodes(page, css = &amp;ldquo;#filmographyTbl&amp;rdquo;)
  tb &amp;lt;- html_table(tb_x)
  movie &amp;lt;- tb[[1]]
  movie_list[[actor]] &amp;lt;- movie
  movie_list[[actor]]$ACTOR &amp;lt;- actor
  names(movie_list[actor]) &amp;lt;- actor
}&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- merge_all(movie_list)&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- all&lt;em&gt;actors %&amp;gt;%
  mutate(CREDIT = gsub(&amp;rdquo;\r\n&amp;rdquo;, &amp;ldquo;&amp;rdquo;, CREDIT)) %&amp;gt;%
  filter(RATING != &amp;ldquo;No Score Yet&amp;rdquo;,
         CREDIT %ni% c(&amp;ldquo;Producer&amp;rdquo;, &amp;ldquo;Executive Producer&amp;rdquo;,
                       &amp;ldquo;Director Producer&amp;rdquo;)) %&amp;gt;%
  mutate(RATING = gsub(&amp;ldquo;%&amp;rdquo;, &amp;ldquo;&amp;rdquo;, RATING),
         RATING = as.numeric(RATING),
         RATING = RATING/100,
         ACTOR = gsub(&amp;rdquo;&lt;/em&gt;&amp;rdquo;, &amp;ldquo; &amp;ldquo;, ACTOR))&lt;/p&gt;

&lt;p&gt;movies &amp;lt;- movies %&amp;gt;%
  mutate(ACTOR = &amp;ldquo;brad pitt&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;all_actors &amp;lt;- full_join(all_actors, movies) %&amp;gt;%
  select(-c(difference, date_counter))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So, now that we&amp;rsquo;ve done all that, let&amp;rsquo;s have a look at how these chaps compare!&lt;/p&gt;

&lt;p&gt;{% highlight r %}
ggplot(all_actors, aes(y = RATING, x = ACTOR)) +
  geom_boxplot(fill = &amp;ldquo;#EE4000&amp;rdquo;, colour = &amp;ldquo;yellow&amp;rdquo;) +
  theme(panel.background = element_rect(fill = &amp;ldquo;#3A9425&amp;rdquo;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.text.x = element_text(angle = 15, hjust = 1,
                                   colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.text.y = element_text(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.ticks = element_line(colour = &amp;ldquo;#EE4000&amp;rdquo;),
        axis.title = element_text(colour = &amp;ldquo;#EE4000&amp;rdquo;)) +
  annotation_custom(g, xmin=1.5, xmax=2.5, ymin=0.01, ymax=0.25)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/unnamed-chunk-10-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-10&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not surprisingly, the three-time Best Actor Oscar winner Daniel Day-Lewis has a notably different profile. He doesn&amp;rsquo;t make many bad movies, that&amp;rsquo;s for sure (there&amp;rsquo;s nothing under the tomato image). Poor Jamie Foxx, on the other hand, has made quite a few more stinkers. Perhaps opportunities were harder to come by for the only black actor in the group, perhaps not.&lt;/p&gt;

&lt;p&gt;So after all that, what do we think of Meister Pitt? He compares very favourably to some of his peers, with maybe only Fassbender and Day-Lewis on a different level. Still, though, not bad, Mr. Pitt. Even after Mr. and Mrs. Smith :wink:&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/yBsAkLa.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-creating Plots from The Economist in R and ggplot2</title>
      <link>/1/01/01/re-creating-plots-from-the-economist-in-r-and-ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/re-creating-plots-from-the-economist-in-r-and-ggplot2/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/1xvEaYe.png?3&#34; align=&#34;middle&#34; style=&#34;width:200px; height:350px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The Economist is well known for its graphs and images, and I personally like them a lot. I was doing some work on Brexit when I spied the image above, and thought how much I would like to make something similar. Since my go-to environment is R, and its go-to plotting package &lt;code&gt;ggplot2&lt;/code&gt;, I thought I&amp;rsquo;d try to recreate the image using these tools. (Hat tip: I was half-way through doing this, and getting a little irritated with British place names, when I came across this fantastic &lt;a href=&#34;http://rpubs.com/rouille/191996&#34;&gt;RPub&lt;/a&gt;, which helped a lot with the area names. The code below that deals with cleaning up and merging the administrative area data comes from Benjamin. Thanks, chief!)&lt;/p&gt;

&lt;p&gt;The data that we start off with is available from the UK &lt;a href=&#34;http://www.electoralcommission.org.uk/find-information-by-subject/elections-and-referendums/past-elections-and-referendums/eu-referendum&#34;&gt;Electoral Commission&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(rgdal)
library(maptools)
library(dplyr)
library(ggplot2)
library(readr)
library(httr)
library(ggmap)
library(scales)&lt;/p&gt;

&lt;p&gt;brex &amp;lt;- read_csv(&amp;ldquo;&lt;a href=&#34;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/EU-referendum-result-data.csv&amp;quot;&#34;&gt;https://raw.githubusercontent.com/RobertMyles/RobertMyles.github.io/master/_data/EU-referendum-result-data.csv&amp;quot;&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;fix-up-place-names&#34;&gt;Fix up place names:&lt;/h1&gt;

&lt;p&gt;uk.map &amp;lt;- readOGR(dsn = &amp;ldquo;GBR_adm_shp&amp;rdquo;, layer = &amp;ldquo;GBR_adm2&amp;rdquo;, verbose = FALSE)
uk.map@data$NAME_2 &amp;lt;- as.character(uk.map@data$NAME_2)
uk.map@data$NAME_2[56]  &amp;lt;- &amp;ldquo;City of London&amp;rdquo;
uk.map@data$NAME_2[140] &amp;lt;- &amp;ldquo;Aberdeen City&amp;rdquo;
uk.map@data$NAME_2[145] &amp;lt;- &amp;ldquo;Dundee City&amp;rdquo;
uk.map@data$NAME_2[150] &amp;lt;- &amp;ldquo;City of Edinburgh&amp;rdquo;
uk.map@data$NAME_2[154] &amp;lt;- &amp;ldquo;Glasgow City&amp;rdquo;
uk.map@data$NAME_2[159] &amp;lt;- &amp;ldquo;North Ayrshire&amp;rdquo;
uk.map@data$NAME_2[162] &amp;lt;- &amp;ldquo;Perth and Kinross&amp;rdquo;
uk.map@data$NAME_2[171] &amp;lt;- &amp;ldquo;Isle of Anglesey&amp;rdquo;
uk.map@data$NAME_2[188] &amp;lt;- &amp;ldquo;Rhondda Cynon Taf&amp;rdquo;&lt;/p&gt;

&lt;p&gt;url &amp;lt;- &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_English_districts&amp;quot;&#34;&gt;https://en.wikipedia.org/wiki/List_of_English_districts&amp;quot;&lt;/a&gt;
tables &amp;lt;- GET(url)
tables &amp;lt;- readHTMLTable(rawToChar(tables$content))
n.rows &amp;lt;- unlist(lapply(tables, function(t) dim(t)[1]))&lt;/p&gt;

&lt;p&gt;districts &amp;lt;- tables[[which.max(n.rows)]]
names(districts) &amp;lt;- c(&amp;ldquo;Name&amp;rdquo;, &amp;ldquo;Website&amp;rdquo;, &amp;ldquo;Population2015&amp;rdquo;, &amp;ldquo;Type&amp;rdquo;,
&amp;ldquo;CeremonialCounty&amp;rdquo;)
districts$Name &amp;lt;- gsub(&amp;rdquo;&amp;amp;&amp;ldquo;, &amp;ldquo;and&amp;rdquo;, districts$Name)
districts$Name[133] &amp;lt;- &amp;ldquo;Kingston upon Hull&amp;rdquo;
districts$id     &amp;lt;- NA
districts$Leave  &amp;lt;- 0
districts$Remain &amp;lt;- 0
districts$Valid  &amp;lt;- 0&lt;/p&gt;

&lt;p&gt;wEngland &amp;lt;- which(uk.map@data$NAME_1 == &amp;ldquo;England&amp;rdquo;)
for(i in wEngland ) {
  if(uk.map$TYPE_2[i] == &amp;ldquo;Administrative County&amp;rdquo; | uk.map$TYPE_2[i] == &amp;ldquo;Metropolitan County&amp;rdquo; |
     uk.map$TYPE_2[i] == &amp;ldquo;County&amp;rdquo; | uk.map$TYPE_2[i] == &amp;ldquo;Metropolitan Borough (city)&amp;rdquo;) {
    match &amp;lt;- grep(uk.map$NAME_2[i], districts$CeremonialCounty)
    for(j in match) if(is.na(districts$id[j]) ) districts$id[j] &amp;lt;- uk.map$ID_2[i]
  } else {
    match &amp;lt;- match(uk.map$NAME_2[i], districts$Name)
    districts$id[match] &amp;lt;- uk.map$ID_2[i]
  }
}&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(districts) ) {
  match &amp;lt;- match(districts$Name[i], brex$Area)
  if(is.na(match) ) match &amp;lt;- grep(districts$Name[i], brex$Area)
  districts$Leave[i]  &amp;lt;- brex$Leave[match]
  districts$Remain[i] &amp;lt;- brex$Remain[match]
  districts$Valid[i]  &amp;lt;- brex$Valid_Votes[match]
}&lt;/p&gt;

&lt;p&gt;england &amp;lt;- with(districts, data.frame(Name   = uk.map@data$NAME_2[wEngland],
           Leave  = tapply(Leave, id, sum, na.rm = TRUE),
           Remain = tapply(Remain, id, sum, na.rm = TRUE),
           Valid  = tapply(Valid, id, sum, na.rm = TRUE),
           Country = &amp;ldquo;England&amp;rdquo;,
           id     = uk.map@data$ID_2[wEngland]))&lt;/p&gt;

&lt;p&gt;wIreland &amp;lt;- which(uk.map@data$NAME_1 == &amp;ldquo;Northern Ireland&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;ireland &amp;lt;- with(brex, data.frame(Name   = uk.map@data$NAME_2[wIreland],
                                 Country = &amp;ldquo;N. Ireland&amp;rdquo;,
                                 Leave  = rep(Leave[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 Remain = rep(Remain[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 Valid  = rep(Valid_Votes[grep(&amp;ldquo;N&amp;rdquo;,Region_Code)], each = length(wIreland) ),
                                 id     = uk.map@data$ID_2[wIreland]))&lt;/p&gt;

&lt;p&gt;scotland &amp;lt;- with(brex, data.frame(Name   = Area[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Leave  = Leave[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Country = &amp;ldquo;Scotland&amp;rdquo;,
                                  Remain = Remain[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  Valid  = Valid_Votes[grep(&amp;ldquo;S&amp;rdquo;,Region_Code)],
                                  id     = rep(NA,length(grep(&amp;ldquo;S&amp;rdquo;,Region_Code)) ) ) )&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(scotland) ) {
  match &amp;lt;- match(scotland$Name[i],uk.map@data$NAME_2)
  scotland$id[i] &amp;lt;- uk.map@data$ID_2[match]
}
wales &amp;lt;- with(brex, data.frame(Name   = Area[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Leave  = Leave[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Country = &amp;ldquo;Wales&amp;rdquo;,
                               Remain = Remain[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               Valid  = Valid_Votes[grep(&amp;ldquo;W&amp;rdquo;,Region_Code)],
                               id     = length(grep(&amp;ldquo;W&amp;rdquo;,Region_Code) ) ) )&lt;/p&gt;

&lt;p&gt;for(i in 1:nrow(wales) ) {
  match &amp;lt;- match(wales$Name[i],uk.map@data$NAME_2)
  wales$id[i] &amp;lt;- uk.map@data$ID_2[match]
}&lt;/p&gt;

&lt;p&gt;cities.name2 &amp;lt;- c(&amp;ldquo;Blackburn, UK&amp;rdquo;, &amp;ldquo;Port Talbot, UK&amp;rdquo;, &amp;ldquo;Northampton, UK&amp;rdquo;, &amp;ldquo;London, UK&amp;rdquo;)
cities.coordinates &amp;lt;- geocode(cities.name2, messaging = FALSE)
cities.lon &amp;lt;- cities.coordinates$lon
cities.lat &amp;lt;- cities.coordinates$lat&lt;/p&gt;

&lt;p&gt;uk &amp;lt;- rbind(england, ireland, scotland, wales)
uk$pct_Leave  &amp;lt;- 100*uk$Leave/uk$Valid
uk$pct_Remain &amp;lt;- 100*uk$Remain/uk$Valid&lt;/p&gt;

&lt;p&gt;uk.points &amp;lt;- fortify(uk.map, region = &amp;ldquo;ID_2&amp;rdquo;)
uk$id &amp;lt;- as.character(uk$id)
uk.plot &amp;lt;- left_join(uk.points,uk)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;All of this has given us &lt;em&gt;almost&lt;/em&gt; what we need. The areas in the Economist&amp;rsquo;s image don&amp;rsquo;t quite match up with the administrative districts from the Electoral Commission data, in the sense that many are amalgamations of admistrative districts. Since we don&amp;rsquo;t have any variable in our dataset describing this mapping, we&amp;rsquo;ll have to do this manually.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;uk.plot$Import_shock &amp;lt;- NA&lt;/p&gt;

&lt;p&gt;One &amp;lt;- c(&amp;ldquo;Cumbria&amp;rdquo;, &amp;ldquo;Lancashire&amp;rdquo;, &amp;ldquo;Northamptonshire&amp;rdquo;, &amp;ldquo;Leicestershire&amp;rdquo;, &amp;ldquo;Leicester&amp;rdquo;, &amp;ldquo;Blackburn with Darwen&amp;rdquo;, &amp;ldquo;Manchester&amp;rdquo;, &amp;ldquo;Rutland&amp;rdquo;)
Two &amp;lt;- c(&amp;ldquo;Telford and Wrekin&amp;rdquo;, &amp;ldquo;Derbyshire&amp;rdquo;, &amp;ldquo;West Midlands&amp;rdquo;, &amp;ldquo;Stoke-on-Trent&amp;rdquo;, &amp;ldquo;Shropshire&amp;rdquo;, &amp;ldquo;Staffordshire&amp;rdquo;, &amp;ldquo;Nottinghamshire&amp;rdquo;, &amp;ldquo;Derby&amp;rdquo;, &amp;ldquo;Nottingham&amp;rdquo;, &amp;ldquo;West Yorkshire&amp;rdquo;)
Three &amp;lt;- c(&amp;ldquo;Herefordshire&amp;rdquo;, &amp;ldquo;Worcestershire&amp;rdquo;, &amp;ldquo;Essex&amp;rdquo;, &amp;ldquo;Warwickshire&amp;rdquo;, &amp;ldquo;Southend-on-Sea&amp;rdquo;, &amp;ldquo;Thurrock&amp;rdquo;, &amp;ldquo;Havering&amp;rdquo;)
Four &amp;lt;- c(&amp;ldquo;Bridgend&amp;rdquo;, &amp;ldquo;Isle of Anglesey&amp;rdquo;, &amp;ldquo;Gwynedd&amp;rdquo;, &amp;ldquo;Ceredigion&amp;rdquo;, &amp;ldquo;Carmarthenshire&amp;rdquo;, &amp;ldquo;Pembrokeshire&amp;rdquo;, &amp;ldquo;Swansea&amp;rdquo;, &amp;ldquo;Rhondda Cynon Taf&amp;rdquo;, &amp;ldquo;Neath Port Talbot&amp;rdquo;, &amp;ldquo;Caerphilly&amp;rdquo;, &amp;ldquo;Merthyr Tydfil&amp;rdquo;, &amp;ldquo;Torfaen&amp;rdquo;, &amp;ldquo;Somerset&amp;rdquo;, &amp;ldquo;Dorset&amp;rdquo;, &amp;ldquo;Isle of Wight&amp;rdquo;, &amp;ldquo;Hampshire&amp;rdquo;, &amp;ldquo;Conwy&amp;rdquo;, &amp;ldquo;Suffolk&amp;rdquo;, &amp;ldquo;Durham&amp;rdquo;, &amp;ldquo;Tyne and Wear&amp;rdquo;, &amp;ldquo;Denbighshire&amp;rdquo;, &amp;ldquo;Cambridgeshire&amp;rdquo;, &amp;ldquo;Luton&amp;rdquo;, &amp;ldquo;Hertfordshire&amp;rdquo;, &amp;ldquo;Bedfordshire&amp;rdquo;, &amp;ldquo;Berkshire&amp;rdquo;, &amp;ldquo;Poole&amp;rdquo;, &amp;ldquo;Southampton&amp;rdquo;, &amp;ldquo;Portsmouth&amp;rdquo;, &amp;ldquo;Redcar and Cleveland&amp;rdquo;, &amp;ldquo;Stockton-on-Tees&amp;rdquo;, &amp;ldquo;Darlington&amp;rdquo;, &amp;ldquo;Hartlepool&amp;rdquo;, &amp;ldquo;Bornemouth&amp;rdquo;, &amp;ldquo;Blaenau Gwent&amp;rdquo;)
Five &amp;lt;- c(&amp;ldquo;Northumberland&amp;rdquo;, &amp;ldquo;Norfolk&amp;rdquo;, &amp;ldquo;South Yorkshire&amp;rdquo;, &amp;ldquo;Enfield&amp;rdquo;, &amp;ldquo;Brent&amp;rdquo;)
Six &amp;lt;- c(&amp;ldquo;South Ayrshire&amp;rdquo;, &amp;ldquo;North Ayshire&amp;rdquo;, &amp;ldquo;Dumfries and Galloway&amp;rdquo;, &amp;ldquo;South Lanarkshire&amp;rdquo;, &amp;ldquo;North Lanarkshire&amp;rdquo;, &amp;ldquo;East Ayrshire&amp;rdquo;, &amp;ldquo;Renfrewshire&amp;rdquo;, &amp;ldquo;West Dunbartonshire&amp;rdquo;, &amp;ldquo;East Renfrewshire&amp;rdquo;, &amp;ldquo;Glasgow City&amp;rdquo;, &amp;ldquo;East Dunbartonshire&amp;rdquo;, &amp;ldquo;Inverclyde&amp;rdquo;, &amp;ldquo;Lincolnshire&amp;rdquo;, &amp;ldquo;West Sussex&amp;rdquo;, &amp;ldquo;East Sussex&amp;rdquo;, &amp;ldquo;Brighton and Hove&amp;rdquo;, &amp;ldquo;Surrey&amp;rdquo;, &amp;ldquo;Oxfordshire&amp;rdquo;, &amp;ldquo;Buckinghamshire&amp;rdquo;, &amp;ldquo;Milton Keynes&amp;rdquo;, &amp;ldquo;Peterborough&amp;rdquo;, &amp;ldquo;Sutton&amp;rdquo;, &amp;ldquo;Croydon&amp;rdquo;)
Seven &amp;lt;- c(&amp;ldquo;Angus&amp;rdquo;, &amp;ldquo;Dundee City&amp;rdquo;, &amp;ldquo;Scottish Borders&amp;rdquo;, &amp;ldquo;East Lothian&amp;rdquo;, &amp;ldquo;Midlothian&amp;rdquo;, &amp;ldquo;Fife&amp;rdquo;, &amp;ldquo;Perth and Kinross&amp;rdquo;, &amp;ldquo;City of Edinburgh&amp;rdquo;, &amp;ldquo;Stirling&amp;rdquo;, &amp;ldquo;Falkirk&amp;rdquo;, &amp;ldquo;West Lothian&amp;rdquo;, &amp;ldquo;Clackmannanshire&amp;rdquo;, &amp;ldquo;Powys&amp;rdquo;, &amp;ldquo;Cheshire&amp;rdquo;, &amp;ldquo;Vale of Glamorgan&amp;rdquo;, &amp;ldquo;Newport&amp;rdquo;, &amp;ldquo;Cardiff&amp;rdquo;, &amp;ldquo;Warrington&amp;rdquo;, &amp;ldquo;Halton&amp;rdquo;, &amp;ldquo;Flintshire&amp;rdquo;, &amp;ldquo;Wrexham&amp;rdquo;, &amp;ldquo;Monmouthshire&amp;rdquo;, &amp;ldquo;Bromley&amp;rdquo;, &amp;ldquo;Hillingdon&amp;rdquo;, &amp;ldquo;Harrow&amp;rdquo;)
Eight &amp;lt;- c(&amp;ldquo;Devon&amp;rdquo;, &amp;ldquo;East Riding of Yorkshire&amp;rdquo;, &amp;ldquo;Kent&amp;rdquo;, &amp;ldquo;Merseyside&amp;rdquo;, &amp;ldquo;North East Lincolnshire&amp;rdquo;, &amp;ldquo;Swindon&amp;rdquo;, &amp;ldquo;Wiltshire&amp;rdquo;, &amp;ldquo;Gloucestershire&amp;rdquo;, &amp;ldquo;South Gloucestershire&amp;rdquo;, &amp;ldquo;North Somerset&amp;rdquo;, &amp;ldquo;Torbay&amp;rdquo;, &amp;ldquo;Bath and North East Somerset&amp;rdquo;, &amp;ldquo;Bristol&amp;rdquo;, &amp;ldquo;Kingston upon Hull&amp;rdquo;, &amp;ldquo;North Lincolnshire&amp;rdquo;, &amp;ldquo;Medway&amp;rdquo;)
Nine &amp;lt;- c(&amp;ldquo;Highlands&amp;rdquo;, &amp;ldquo;Argyll and Bute&amp;rdquo;, &amp;ldquo;North Yorkshire&amp;rdquo;, &amp;ldquo;Cornwall&amp;rdquo;, &amp;ldquo;Eilean Siar&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;uk.plot1 &amp;lt;- uk.plot %&amp;gt;%
  filter(Name != &amp;ldquo;Shetland Islands&amp;rdquo;) %&amp;gt;%
  filter(Country != &amp;ldquo;N. Ireland&amp;rdquo;) %&amp;gt;%
  mutate(Import_shock = if_else(Name %in% One, 1, if_else(Name %in% Two, 2, if_else(Name %in% Three, 3, if_else(Name %in% Four, 4, if_else(Name %in% Five, 5, if_else(Name %in% Six, 6, if_else(Name %in% Seven, 7, if_else(Name %in% Eight, 8, if_else(Name %in% Nine, 9, 9)))))))))) %&amp;gt;%
  filter(long &amp;gt; -10)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So, after all that data tidying, we&amp;rsquo;re ready to make our plot. Since the Economist uses the ITC Officina Sans font, you&amp;rsquo;ll need that on your computer (or something similar). With the &lt;code&gt;extrafont&lt;/code&gt; package, we can take avail of these, well, extra fonts.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;library(extrafont)
font_import()&lt;/p&gt;

&lt;h1 id=&#34;there-are-various-folders-on-my-mac-with-fonts-in-them&#34;&gt;There are various folders on my mac with fonts in them:&lt;/h1&gt;

&lt;p&gt;font_import(&amp;ldquo;/Users/robert/Library/Fonts/&amp;rdquo;)
font_import(&amp;ldquo;/System/Library/Fonts/&amp;rdquo;)
font_import(&amp;ldquo;/Library/Fonts/&amp;rdquo;)
loadfonts()&lt;/p&gt;

&lt;h1 id=&#34;see-what-s-available&#34;&gt;see what&amp;rsquo;s available:&lt;/h1&gt;

&lt;p&gt;fonts()
{% endhighlight %}
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The following code makes the plot that I wanted, with the image saved and the font that I need embedded in the pdf that is produced. In Rstudio, no text will appear, as this font is not supported. But it&amp;rsquo;ll be in the pdf.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;MM &amp;lt;- ggplot() +
  geom_polygon(data = uk.plot1, aes(x = long, y = lat, group = group, fill = Import_shock), colour = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;Reds&amp;rdquo;, breaks = pretty_breaks(n = 8)) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;black&amp;rdquo;, size = 2.5, shape = 21, fill = &amp;ldquo;black&amp;rdquo;) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;white&amp;rdquo;, size = 1, shape = 21, fill = &amp;ldquo;white&amp;rdquo;) +
  theme_nothing(legend = T) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.75, y=52.5, label=&amp;ldquo;WALES&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=1.12, y=53.65, label=&amp;ldquo;ENGLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-2.2, y=57.9, label=&amp;ldquo;SCOTLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.7, y=51.42, label=&amp;ldquo;Port Talbot&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=.3, y=52.15, label=&amp;ldquo;Northampton&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -3.3, xend = -2.5, y = 54, yend = 54) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -2.5, xend = -2.5, y = 54, yend = 53.85) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.22, y=54, label=&amp;ldquo;Blackburn&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  xlim(range(uk.plot1$long)) + ylim(range(uk.plot1$lat)) +
  theme(plot.background = element_rect(fill = &amp;ldquo;#A4D3EE&amp;rdquo;, colour = &amp;ldquo;#A4D3EE&amp;rdquo;), panel.background = element_rect(fill = &amp;ldquo;#A4D3EE&amp;rdquo;, colour = &amp;ldquo;#A4D3EE&amp;rdquo;), legend.position = &amp;ldquo;none&amp;rdquo;) +
  coord_map()&lt;/p&gt;

&lt;p&gt;ggsave(&amp;ldquo;Brexit_test.pdf&amp;rdquo;, MM)
embed_fonts(&amp;ldquo;Brexit_test.pdf&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;http://i.imgur.com/P43D0jh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not &lt;em&gt;exactly&lt;/em&gt; the same (I could &lt;em&gt;not&lt;/em&gt; get that legend to work right!), but I think it&amp;rsquo;s a pretty close match. Good, stuff, R :clap: .&lt;/p&gt;

&lt;p&gt;P.s. I know there are themes available to get close to the Economist&amp;rsquo;s image style, but I wanted do it myself :smiley:. Anyway, if you&amp;rsquo;d like to include the &lt;code&gt;theme_economist()&lt;/code&gt; function from the &lt;code&gt;ggthemes&lt;/code&gt; package, it&amp;rsquo;s easy:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;Eco &amp;lt;- ggplot() +
  geom_polygon(data = uk.plot1, aes(x = long, y = lat, group = group, fill = Import_shock), colour = &amp;ldquo;white&amp;rdquo;, size = 0.1) +
  scale_fill_distiller(palette = &amp;ldquo;Reds&amp;rdquo;, breaks = pretty_breaks(n = 8)) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;black&amp;rdquo;, size = 2.5, shape = 21, fill = &amp;ldquo;black&amp;rdquo;) +
  geom_point(aes(x = cities.lon, y = cities.lat), color = &amp;ldquo;white&amp;rdquo;, size = 1, shape = 21, fill = &amp;ldquo;white&amp;rdquo;) +
  theme_economist() +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.75, y=52.5, label=&amp;ldquo;WALES&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=1.12, y=53.65, label=&amp;ldquo;ENGLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-2.2, y=57.9, label=&amp;ldquo;SCOTLAND&amp;rdquo;, size=4, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.7, y=51.42, label=&amp;ldquo;Port Talbot&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=.3, y=52.15, label=&amp;ldquo;Northampton&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -3.3, xend = -2.5, y = 54, yend = 54) +
  annotate(&amp;ldquo;segment&amp;rdquo;, x = -2.5, xend = -2.5, y = 54, yend = 53.85) +
  annotate(&amp;ldquo;text&amp;rdquo;, x=-4.22, y=54, label=&amp;ldquo;Blackburn&amp;rdquo;, size=3.45, family = &amp;ldquo;ITCOfficinaSans LT Book&amp;rdquo;) +
  xlim(range(uk.plot1$long)) + ylim(range(uk.plot1$lat)) +
  theme(axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank(), panel.grid.major.y = element_blank(), legend.position = &amp;ldquo;none&amp;rdquo;) +
  coord_map()&lt;/p&gt;

&lt;p&gt;ggsave(&amp;ldquo;Brexit_test_Econ.pdf&amp;rdquo;, Eco)
embed_fonts(&amp;ldquo;Brexit_test_Econ.pdf&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The combination is better, actually:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/t5322ak.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we put them side by side, you can see that we didn&amp;rsquo;t actually do a bad job.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;imgur-embed-pub&#34; lang=&#34;en&#34; data-id=&#34;a/ivQ5t&#34;&gt;&lt;a href=&#34;//imgur.com/ivQ5t&#34;&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;//s.imgur.com/min/embed.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Update: there are (of course) also &lt;a href=&#34;http://rpsychologist.com/creating-a-typical-textbook-illustration-of-statistical-power-using-either-ggplot-or-base-graphics?utm_content=buffer9beb5&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34;&gt;other great examples&lt;/a&gt; of using ggplot2 to recreate images, in this case textbook statistical distributions&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stan or JAGS for Bayesian ideal-point IRT?</title>
      <link>/1/01/01/stan-or-jags-for-bayesian-ideal-point-irt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/stan-or-jags-for-bayesian-ideal-point-irt/</guid>
      <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Anybody who has ever tried to run even a moderately-sized Bayesian IRT model in R (for ideal points as in the political science literature, or otherwise) will know that these models can take a &lt;em&gt;long&lt;/em&gt; time. It&amp;rsquo;s not R&amp;rsquo;s fault: these are usually big models with lots of parameters, and naturally take longer.&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Not to mention the fact that Bayesian computation is more computationally intense than other methods. Historically (okay, I&amp;rsquo;m talking about the last twenty years, maybe &amp;lsquo;historically&amp;rsquo; is a little strong), the sampling software &lt;a href=&#34;http://www.mrc-bsu.cam.ac.uk/software/bugs/&#34;&gt;BUGS&lt;/a&gt; (&lt;strong&gt;B&lt;/strong&gt;ayesian &lt;strong&gt;I&lt;/strong&gt;nference &lt;strong&gt;U&lt;/strong&gt;sing &lt;strong&gt;G&lt;/strong&gt;ibbs &lt;strong&gt;S&lt;/strong&gt;ampling) and then &lt;a href=&#34;http://mcmc-jags.sourceforge.net/&#34;&gt;JAGS&lt;/a&gt; were used to run Bayesian models (JAGS is still pretty common, and BUGS too, though not as much). Lately, &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; has been gaining ground, certainly as regards more complex modelling.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;While the reasons for choosing Stan are often put down to speed, when running many types of models there is not actually a large difference, with JAGS actually being faster for some models, according to John Kruschke&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Given the lack of a big difference between JAGS/BUGS and Stan, which sampling software should we use for IRT models? Well, first of all, a large part of the literature utilises either JAGS or BUGS, indeed, code is publicly available for many of these models, helping to spread the use of these two modelling languages.&lt;sup id=&#34;a3&#34;&gt;&lt;a href=&#34;#fn3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; For beginners, this is a handy way to learn, and it&amp;rsquo;s how I learned. Indeed, the language of JAGS/BUGS (I&amp;rsquo;m just going to use &amp;lsquo;JAGS&amp;rsquo; to refer to both from now on) is a bit more intuitive for many people, and given the availability of others&amp;rsquo; code, beginning with these models can then be reduced to just tinkering with small details of code that is already written.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Stan, on the other hand, is newer and has a syntax that is in some ways quite different from JAGS. Variables need to be declared, as does their type (something not many R users are familiar with, I certainly wasn&amp;rsquo;t). The model code is imperative, not declarative&lt;sup id=&#34;a4&#34;&gt;&lt;a href=&#34;#fn4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, and there are specific &amp;lsquo;blocks&amp;rsquo; to the code. Stan has a different default sampler and is generally argued by its creators to be much faster. Well, in my experience, there is actually no contest. As much as I liked JAGS when I started out, Stan is simply incomparable to JAGS in terms of speed for these models&amp;ndash; Stan is much, much faster. I was analysing nominal vote data for the Brazilian Federal Senate&lt;sup id=&#34;a5&#34;&gt;&lt;a href=&#34;#fn5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; (these data have plenty of missing values, which are handled easily in JAGS but have to be deleted out in Stan) and, through the use of the &lt;a href=&#34;http://runjags.sourceforge.net/quickjags.html&#34;&gt;runjags&lt;/a&gt; package (and its &lt;code&gt;autorun&lt;/code&gt; option), I discovered that it would take around 28 hours to run my two-dimensional model to reach signs of convergence (or signs of non-convergence, as &lt;a href=&#34;pan.oxfordjournals.org/content/16/2/153.full.pdf&#34;&gt;Gill&lt;/a&gt; puts it). As I was in the middle of writing a PhD thesis with lots of these models to process, that just wasn&amp;rsquo;t an option. (Regardless, any time I let the model run like this, R crashed or became unresponsive, or the estimates were simply of bad quality.) So I started tinkering with the options in &lt;code&gt;runjags&lt;/code&gt;, trying different samplers etc. Then I noticed exactly &lt;em&gt;why&lt;/em&gt; JAGS is so slow for these models.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In order to run a model, JAGS first compiles a Directed Acyclic Graph (DAG) of all the nodes in the model (software such as &lt;a href=&#34;http://r-nimble.org/&#34;&gt;NIMBLE&lt;/a&gt; will let you print out the graph pretty easily). But since we have a &lt;em&gt;latent&lt;/em&gt; regression with an &lt;em&gt;unobserved&lt;/em&gt; regressor in the equation&lt;sup id=&#34;a6&#34;&gt;&lt;a href=&#34;#fn6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;
 {% raw %}
  $$y_{ij} = \beta_j\bf{x_i} - \alpha_j$$
 {% endraw %}&lt;/p&gt;

&lt;p&gt;then JAGS is &lt;a href=&#34;https://sourceforge.net/p/mcmc-jags/discussion/610037/thread/5c9e9026/&#34;&gt;unable&lt;/a&gt; to build such a DAG. Since it can&amp;rsquo;t build a DAG, it can&amp;rsquo;t surmise that there is conjugacy in the model and then exploit that through Gibbs sampling. So JAGS just uses the default Metropolis-Hastings sampler (and given that it is called &lt;strong&gt;J&lt;/strong&gt;ust &lt;strong&gt;A&lt;/strong&gt;nother &lt;strong&gt;Gibbs&lt;/strong&gt; &lt;strong&gt;S&lt;/strong&gt;ampler, it kind of misses the point of using JAGS in the first place). This means that all the gains available through Gibbs sampling are simply not available for latent models of this type with JAGS, and hence the sampling process runs &lt;em&gt;very&lt;/em&gt; slowly. I&amp;rsquo;m not sure the literature was ever aware of this fact, either. Many papers and books extoll the virtues of Gibbs sampling (and spend pages and pages deriving the conditional distributions involved) and then show the reader how to do it in JAGS or BUGS (see Simon Jackman&amp;rsquo;s &lt;a href=&#34;http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470011548.html&#34;&gt;book&lt;/a&gt; for an example)&lt;sup id=&#34;a7&#34;&gt;&lt;a href=&#34;#fn7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;, but unbeknownst to these authors, their JAGS programs are not using Gibbs sampling.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So that leaves us with Stan. Use it! :smile:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In a future post, I&amp;rsquo;ll show some examples of IRT ideal-point models in Stan. I have some on my &lt;a href=&#34;https://github.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models&#34;&gt;Github&lt;/a&gt;, and Pablo Barber√° also has some nice &lt;a href=&#34;https://github.com/pablobarbera/quant3materials/tree/master/bayesian&#34;&gt;examples&lt;/a&gt; (hat tip: I learned from him, amongst others. Thanks, Pablo!).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: &lt;a href=&#34;https://github.com/duarteguilherme/Quinn-Martin-Replication&#34;&gt;Guilherme Jardim Duarte&lt;/a&gt; also has some Bayesian IRT examples on his Github, in particular the rather tricky dynamic model of &lt;a href=&#34;http://mqscores.berkeley.edu/media/pa02.pdf&#34;&gt;Martin &amp;amp; Quinn&lt;/a&gt;,  have a look.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; For more on how these models can have &lt;em&gt;tons&lt;/em&gt; of parameters, see &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/ClintonJackmanRivers2004.pdf&#34;&gt;Clinton, Jackman, and Rivers (2004)&lt;/a&gt;: &amp;lsquo;The statistical analysis of roll-call data&amp;rsquo;, &lt;em&gt;American Political Science Review&lt;/em&gt;, Vol. 98, No. 2. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt;  &lt;a href=&#34;http://doingbayesiandataanalysis.blogspot.com.br/&#34;&gt;Kruschke&lt;/a&gt; mentions this in his book&amp;hellip;not sure where, exactly. &lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn3&#34;&gt;3&lt;/b&gt; See this paper by &lt;a href=&#34;https://www.jstatsoft.org/article/view/v036c01/v36c01.pdf&#34;&gt;Curtis&lt;/a&gt; (pdf downloads automatically) or the book by &lt;a href=&#34;https://www.crcpress.com/Analyzing-Spatial-Models-of-Choice-and-Judgment-with-R/Armstrong-II-Bakker-Carroll-Hare-Poole-Rosenthal/9781466517158&#34;&gt;Armstrong et. al&lt;/a&gt;. &lt;a href=&#34;#a3&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn4&#34;&gt;4&lt;/b&gt; See &lt;a href=&#34;http://stackoverflow.com/questions/129628/what-is-declarative-programming&#34;&gt;here&lt;/a&gt; for the difference.&lt;a href=&#34;#a4&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn5&#34;&gt;5&lt;/b&gt; You can read about this research &lt;a href=&#34;{{ site.url }}/assets/Explaining the Determinants of Foreign Policy Voting Behaviour in the Brazilian Houses of Legislature.pdf&#34;&gt;here&lt;/a&gt;.&lt;a href=&#34;#a5&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn6&#34;&gt;6&lt;/b&gt; This is the canonical statistical model for Bayesian IRT. The data ({% raw %}\(y_{ij}\){% endraw %}) are the votes, in binary form (1 = &amp;lsquo;Yes&amp;rsquo;; 2 = &amp;lsquo;No&amp;rsquo;); the {% raw %}\(\bf x_i\){% endraw %} are the ideal points of the legislators; and  {% raw %} \(\beta_j\){% endraw %} and {% raw %}\(\alpha_j\){% endraw %} are the &lt;em&gt;discrimination&lt;/em&gt; (slope) and &lt;em&gt;difficulty&lt;/em&gt; (intercept) parameters, respectively. See the article cited in footnote 1.
  &lt;a href=&#34;#a6&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn7&#34;&gt;7&lt;/b&gt; I don&amp;rsquo;t mean to denigrate Jackman&amp;rsquo;s book. It&amp;rsquo;s highly detailed and thorough, and he deserves a lot of credit for spearheading the use of these Bayesian IRT models in political science. I&amp;rsquo;ve cited his work numerous times, I&amp;rsquo;m a fan.&lt;a href=&#34;#a7&#34;&gt;‚Ü©&lt;/a&gt;
&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/v7y6SVt.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Suicides in Ireland</title>
      <link>/1/01/01/suicides-in-ireland/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/suicides-in-ireland/</guid>
      <description>

&lt;p&gt;The Irish radio station newstalk published &lt;a href=&#34;https://www.facebook.com/newstalkfm/videos/10155656582617907/&#34;&gt;this video&lt;/a&gt; the other day, in which director and actor Terry McMahon spoke out against the austerity programme running in Ireland since the aftermath of the financial crisis in 2008. Leaving aside his conflation of any type of business activity with immorality, McMahon claimed that &amp;ldquo;austerity is murder&amp;rdquo; and detailed some alarming facts about suicide numbers in Ireland, clearly linking the two (i.e., austerity = more suicide).&lt;/p&gt;

&lt;p&gt;Even though I &lt;strong&gt;really&lt;/strong&gt; hated the fact that irresponsible banks were socialized for their own recklessness, while the rest of the population suffered tax hikes and cuts to important services, there was something about this video that irritated me. McMahon states that we have let down &amp;ldquo;the best&amp;rdquo; of our society, being Padraig Pearse and his comrades of the 1916 Rising (which did not have popular support and took most Irish people by complete surprise). How, exactly? By not sticking to De Valera&amp;rsquo;s impoverishing mercantilism or by not leaving women in their constitutional place, the home? Leaving aside these irritations, I decided to take a closer look at the suicide claims made by McMahon. These data are publicly available, from the &lt;a href=&#34;http://nsrf.ie/statistics/suicide/&#34;&gt;National Suicide Research Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can do all this quite easily in R:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(rvest)
library(dplyr)
library(ggplot2)
library(lubridate)
page &amp;lt;- read_html(&amp;ldquo;&lt;a href=&#34;http://nsrf.ie/statistics/suicide/&amp;quot;&#34;&gt;http://nsrf.ie/statistics/suicide/&amp;quot;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;table &amp;lt;- html_nodes(page,
                    css = &amp;ldquo;#ac_3163_collapse1 &amp;gt; div &amp;gt; table:nth-child(2)&amp;ldquo;)&lt;/p&gt;

&lt;p&gt;table &amp;lt;- html_table(table)[[1]]&lt;/p&gt;

&lt;p&gt;colnames(table) &amp;lt;- c(&amp;ldquo;Year&amp;rdquo;, &amp;ldquo;Total_number&amp;rdquo;, &amp;ldquo;Total_rate_per_100000&amp;rdquo;,
                     &amp;ldquo;Male_number&amp;rdquo;, &amp;ldquo;Male_rate_per_100000&amp;rdquo;,
                     &amp;ldquo;Female&amp;rdquo;, &amp;ldquo;Female_rate_per_100000&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;ggplot(table, aes(x = Year)) +
  geom_line(aes(y = Male_rate_per_100000), colour = &amp;ldquo;navy&amp;rdquo;) +
  geom_line(aes(y = Female_rate_per_100000), colour = &amp;ldquo;goldenrod2&amp;rdquo;) +
  scale_x_continuous(breaks = c(2001, 2004, 2007, 2010, 2013, 2015)) +
  theme_classic() +
  labs(y = &amp;ldquo;Suicide Rate per 100,000&amp;rdquo;) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;Male&amp;rdquo;, x = 2002, y = 18) +
  annotate(&amp;ldquo;label&amp;rdquo;, label = &amp;ldquo;Female&amp;rdquo;, x = 2002, y = 6.5)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../figs/suicides/unnamed-chunk-1-1.png&#34; alt=&#34;center&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Judging from 2001 onwards, suicide among males has in fact gone down, from highs in 2001 (22.4 per 100,000), 2004 (20.2; both years well before the austerity programme) and 20.2 per 100,000 in 2011, two years after the start of the austerity programme. After 2012, suicide among males thankfully declines by relatively quite a lot.&lt;/p&gt;

&lt;p&gt;Another of McMahon&amp;rsquo;s claims is that more people committed suicide in 2016 than died in the Easter Rising of 1916. I&amp;rsquo;m not quite sure where he got these statistics. The National Suicide Research Foundation has until 2015, while the Central Statistics Office has the first two quarters of 2016 available on its website (&lt;a href=&#34;http://www.cso.ie/en/releasesandpublications/ep/p-vs/vitalstatisticsfirstquarter2016/&#34;&gt;first&lt;/a&gt; and &lt;a href=&#34;http://www.cso.ie/en/releasesandpublications/ep/p-vs/vitalstatisticssecondquarter2016/&#34;&gt;second&lt;/a&gt;). According to these figures, there were 91 suicides in the first quarter and 75 in the second, being 166 in total. If we divide this number in two as our best guess for quarter 3, we get 83. People think that suicides go up at Christmas, but according to the website statnews.com, that is not &lt;a href=&#34;https://www.statnews.com/2015/12/30/suicides-rise-after-christmas/&#34;&gt;true&lt;/a&gt;. Well, even allowing for 100 suicides in the 4th quarter, we get 166 + 83 + 100 = 349 (keep in mind this is quite an inflated guess, something more realistic would be 166 + 75 + 75 = 316). According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Easter_Rising&#34;&gt;Wikipedia&lt;/a&gt;, &amp;ldquo;almost 500 people were killed in the Easter Rising&amp;rdquo;. So McMahon is incorrect on this point.&lt;/p&gt;

&lt;p&gt;McMahon also said that during the last eight years of austerity more people have died by suicide in Ireland than died during the thirty-year-long troubles in Northern Ireland. A statistical breakdown of the deaths in the Troubles can be found &lt;a href=&#34;http://www.wesleyjohnston.com/users/ireland/past/troubles/troubles_stats.html&#34;&gt;here&lt;/a&gt;, which puts the total number of deaths at 3466. Using the data we got from the National Suicide Research Foundation:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
library(knitr)
kable(table[,1:3])
{% endhighlight %}&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Total_number&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Total_rate_per_100000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;519&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2002&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2003&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2004&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;493&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2005&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;481&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;458&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2008&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;506&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2009&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;552&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;495&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;554&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2012&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;541&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;487&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;459&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;451&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Summing these numbers for the years 2009 to 2015 (the austerity programme) is straightforward:&lt;/p&gt;

&lt;p&gt;{% highlight r %}
table %&amp;gt;%
  select(Year, Total_number) %&amp;gt;%
  filter(Year &amp;gt; 2008, Year &amp;lt;= 2015) %&amp;gt;%
  summarise(total = sum(Total_number))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight text %}&lt;/p&gt;

&lt;h2 id=&#34;total&#34;&gt;total&lt;/h2&gt;

&lt;h2 id=&#34;1-3539&#34;&gt;1  3539&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Here, McMahon is correct, which is shocking and sad (remember, we didn&amp;rsquo;t include 2016), but to actually tie these suicides to austerity causally, we would need a much more sophisticated approach. (Likewise with the decline since 2001.)&lt;/p&gt;

&lt;p&gt;The point of this post is not to argue for the austerity programme (the banks should have paid for their mistakes and should not have been rescued. If they truly were &amp;ldquo;too big to fail&amp;rdquo; in terms of the Irish economy, then we could have rescued them and then liquidated them, returning the money to the state.) It is also not to argue for/against NAMA. Occupying a building for a few weeks puts the debate at centre-stage, for which McMahon and co. should be congratulated. But if we are to have a debate about the problems introduced by austerity, we should at least get the numbers right. Suicide for both men and women has declined in recent years in Ireland, and more people died in the Easter Rising than by suicide in 2016. Yes, more people died by suicide since 2009 than in the Troubles, which is tragic. I&amp;rsquo;ll leave McMahon&amp;rsquo;s bizarre eulogies for an Ireland of poets and warriors, opposed to any type of commerce, aside (what finances the arts?). The crony capitalism that flourished in Ireland during the Bertie Ahern years damaged the country, no doubt. But no need to hark back to a simpler, poorer, time: just fix the mess and jail those responsible (including Ahern). But saying &amp;ldquo;austerity is murder&amp;rdquo; and evoking the &amp;lsquo;heroes&amp;rsquo; of 1916 is just pretty reckless, in my view.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Theme-Specific Voting in the European Parliament</title>
      <link>/1/01/01/theme-specific-voting-in-the-european-parliament/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/theme-specific-voting-in-the-european-parliament/</guid>
      <description>

&lt;p&gt;Since it&amp;rsquo;s &lt;a href=&#34;http://ec.europa.eu/eurostat/web/ess/european-statistics-day&#34;&gt;European Statistics Day&lt;/a&gt;, I thought I would make a quick post showing how to utilise some of the data that we have on the European Union in R. In particular, I will use European Parliament voting data from Simon Hix&amp;rsquo;s &lt;a href=&#34;http://personal.lse.ac.uk/hix/HixNouryRolandEPdata.HTM&#34;&gt;website&lt;/a&gt;. The data is freely available, so by copying and pasting the code below, you will be able to recreate the analysis I&amp;rsquo;ve done here.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to be using &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; to make theme-specific ideal points for members of the European Parliament. You will need to install Stan and a C++ compiler to replicate the analysis.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s load the R packages that we&amp;rsquo;re going to use. If you don&amp;rsquo;t have any of these, you will need to install them first, using either &lt;code&gt;install.packages(&amp;quot;name of package&amp;quot;)&lt;/code&gt; or by means of the &amp;lsquo;install&amp;rsquo; button on the Packages window of the RStudio IDE.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
library(data.table)
library(tidyverse)
library(dtplyr)
library(rstan)
library(stringi)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;After you download the data from Hix&amp;rsquo;s website, we can import it into R. I will then merge everything together.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;rm(list=ls())&lt;/p&gt;

&lt;p&gt;eu4 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2004Full.csv&amp;rdquo;, header=T))
eu5 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2005Full.csv&amp;rdquo;, header = T))
eu6 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2006Full.csv&amp;rdquo;, header = T))
eu7 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2007Full.csv&amp;rdquo;, header = T))
eu8 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2008Full.csv&amp;rdquo;, header = T))
eu9 &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/RCVS2009Full.csv&amp;rdquo;, header = T))&lt;/p&gt;

&lt;p&gt;eu &amp;lt;- eu4 %&amp;gt;%
  full_join(eu5) %&amp;gt;%
  full_join(eu6) %&amp;gt;%
  full_join(eu7) %&amp;gt;%
  full_join(eu8) %&amp;gt;%
  full_join(eu9) %&amp;gt;%
  select(-V1) %&amp;gt;%
  rename(voter = &lt;code&gt;Vote ID&lt;/code&gt;) %&amp;gt;%
  mutate(voter = stri_trans_general(voter, &amp;ldquo;Latin-ASCII&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;rm(eu4, eu5, eu6, eu7, eu8, eu9)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we have a data frame of each of the 940 legislators in the database, and their votes on 6200 votes. Next we&amp;rsquo;ll create some id variables that we will use when we send the data to Stan.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
EU &amp;lt;- gather(eu, vote_id, vote, &lt;code&gt;1&lt;/code&gt;:&lt;code&gt;6200&lt;/code&gt;) %&amp;gt;%
  mutate(vote_id = as.numeric(vote_id),
         voter_id = as.numeric(as.factor(voter)))
head(EU)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we have each voter (the M.E.P., &lt;code&gt;voter&lt;/code&gt;), the id of the bill being voted on (&lt;code&gt;vote_id&lt;/code&gt;), how the individual voted (&lt;code&gt;vote&lt;/code&gt;) and the id of each voter. In these data, 1 is a &amp;lsquo;yes&amp;rsquo; vote, while 0 is &amp;lsquo;no&amp;rsquo;. The full list from Hix&amp;rsquo;s website contains the following info:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The codes for the MEP vote decisions are as follows:
EP1, EP2 and EP5: 1=Yes, 2=No, 3=Abstain, 4=Present but did not vote, 0=Absent, 5=Not an MEP
EP3 and EP4: 1 = Yes, 2 = No, 3 = Abstain, 4 = Present but did not vote, 0 = either Absent or Not an MEP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hix &amp;amp; co. also provide us with information on the specific policy area for each vote. We can import it, tidy it up a little and merge it to the data we have.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
theme &amp;lt;- as_tibble(fread(&amp;rdquo;~/Downloads/ep6/vc.csv&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;theme &amp;lt;- theme %&amp;gt;%
  rename(vote_id = &lt;code&gt;Vote Id&lt;/code&gt;) %&amp;gt;%
  select(vote_id, Title, &lt;code&gt;Policy Area&lt;/code&gt;, Result) %&amp;gt;%
  rename(topic = &lt;code&gt;Policy Area&lt;/code&gt;) %&amp;gt;%
  mutate(topic_id = as.numeric(as.factor(topic)))&lt;/p&gt;

&lt;p&gt;rollcalls &amp;lt;- full_join(EU, theme) %&amp;gt;%
  mutate(vote = ifelse(vote==1, 1, ifelse(vote==0, 0, NA))) %&amp;gt;%
  filter(!is.na(vote))
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we need to prepare the data for Stan. Our model is a basic &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall09/cos597A/papers/ClintonJackmanRivers2004.pdf&#34;&gt;2-parameter Item-Response theory model&lt;/a&gt; often used for &lt;a href=&#34;http://robertmyles.github.io/Bayesian-IRT-in-R-and-Stan.html&#34;&gt;creating ideal points&lt;/a&gt;. We write this in the Stan modelling language and save it as a string in R. In mathematical notation, the model is:&lt;/p&gt;

&lt;p&gt;$$y_{ijk} = \beta&lt;em&gt;j \theta&lt;/em&gt;{ik} - \alpha_j,$$&lt;/p&gt;

&lt;p&gt;where &lt;em&gt;i&lt;/em&gt; is an index of voters, &lt;em&gt;j&lt;/em&gt; an index of votes, and &lt;em&gt;k&lt;/em&gt; an index of topics. $$\theta_{ik}$$ is our main object of interest: the ideal point of MEP &lt;em&gt;i&lt;/em&gt; on topic &lt;em&gt;k&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For those not familiar with Stan, the following Stan code has a &lt;code&gt;data&lt;/code&gt; block, in which we declare what our variables are and their type (these are created in the section after). Then we have a parameters block where we declare our parameters.&lt;/p&gt;

&lt;p&gt;Lastly, we have the model block where we have our model and the priors for each parameter. In an IRT model like this, we need to constrain the ideal points of at least 2 legislators. Since I am not an expert on these MEPs, I am just going to do this for the first two in the database (&lt;code&gt;theta[1]&lt;/code&gt; and &lt;code&gt;theta[2]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
mep_model &amp;lt;- &amp;ldquo;
data {
  int&lt;lower=1&gt; J;               //MEPs
  int&lt;lower=1&gt; M;               //Proposals
  int&lt;lower=1&gt; K;               //no. of topics
  int&lt;lower=1&gt; N;               //no. of observations
  vector[K] m0;                 // prior mean for theta
  cov_matrix[K] M0;             // prior covar. for theta
  int&lt;lower=1, upper=J&gt; j[N];   //MEP for observation n
  int&lt;lower=1, upper=M&gt; m[N];   //proposal for observation n
  int&lt;lower=1, upper=K&gt; k[N];   //topic for observation n
  int&lt;lower=0, upper=1&gt; Y[N];   //vote of observation n
}
parameters {
  real alpha[M];
  real beta[M];
  vector[K] theta[J];
}
model {
  beta ~ normal(0, 10);
  alpha ~ normal(0, 10);
  for (n in 1:N)
  Y[n] ~ bernoulli_logit(theta[j[n], k[n]]*beta[m[n]] - alpha[m[n]]);
  theta ~ multi_normal(m0, M0);
  theta[1,1] ~ normal(1, .01);
  theta[2,1] ~ normal(-1, .01);
}&amp;rdquo;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Above, we have variables declared in our Stan model. Here, I define these objects in R. All of this then goes as a list to Stan.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
library(rstan)&lt;/p&gt;

&lt;p&gt;N &amp;lt;- nrow(rollcalls)
M &amp;lt;- max(rollcalls$vote_id)
K &amp;lt;- max(rollcalls$topic_id)
J &amp;lt;- max(rollcalls$voter_id)
Y &amp;lt;- rollcalls$vote
m &amp;lt;- rollcalls$vote_id
k &amp;lt;- rollcalls$topic_id
j &amp;lt;- rollcalls$voter_id&lt;/p&gt;

&lt;h1 id=&#34;mean-and-covariances-for-theta&#34;&gt;Mean and Covariances for theta&lt;/h1&gt;

&lt;p&gt;m0 &amp;lt;- rep(0, times=K)
M0 &amp;lt;- matrix(0, K, K)
diag(M0) &amp;lt;- 1&lt;/p&gt;

&lt;p&gt;stan_data &amp;lt;- list(J=J, N=N, M=M, j=j,
                  Y=Y, m=m, K=K, k=k,
                  m0=m0, M0=M0)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Next, we run our model with Stan. Here I use Stan&amp;rsquo;s new [ADVI]() feature, but the Stan folks don&amp;rsquo;t recommend this for inference. However, for a blog post it&amp;rsquo;s okay :smile:.&lt;/p&gt;

&lt;p&gt;ADVI is much faster than the already comparatively fast NUTS sampling that Stan does. Here we have a lot of data, though, so this next part will take &lt;strong&gt;a few hours&lt;/strong&gt; to run. If you don&amp;rsquo;t fancy waiting so long, subset the data (maybe choose just one year) and run the Stan code on the smaller dataset.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
Stan_Model &amp;lt;- stan_model(model_name = &amp;ldquo;meps&amp;rdquo;, model_code = mep_model)&lt;/p&gt;

&lt;p&gt;Res1 &amp;lt;- vb(Stan_Model, data = stan_data, seed = 1234,
          init = &amp;ldquo;random&amp;rdquo;)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So one thing that we could do with the estimates from this model is plot the ideal points of an MEP as they vary over the themes that he/she voted on.&lt;/p&gt;

&lt;p&gt;What we will do is extract the elements of the summary that we want and then create the summary that we need to start making figures.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
summary &amp;lt;- list(summary(Res1, pars=&amp;ldquo;theta&amp;rdquo;))
summary &amp;lt;- summary[[1]][1]
summary &amp;lt;- as_data_frame(summary[[1]]) %&amp;gt;%
  mutate(names = theta_names,
         voters = rep(unique(rollcalls$voter), each=21),
         index = as.character(str_extract_all(names, &amp;ldquo;\.[0-9]*$&amp;ldquo;)),
         index = gsub(&amp;rdquo;\.&amp;ldquo;, &amp;ldquo;&amp;rdquo;, index),
         index = as.integer(index))&lt;/p&gt;

&lt;p&gt;topics &amp;lt;- unique(rollcalls$topic)
index &amp;lt;- unique(summary$index)
topic_index &amp;lt;- tibble(topic = topics, index = index)&lt;/p&gt;

&lt;p&gt;mep_summary &amp;lt;- full_join(summary, topic_index) %&amp;gt;%
  select(-c(names, index))&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The following graphs are of Adamos Adamou and Filip Adwent, for the simple reason that they are the first names in the database. First, we create a plot for Adamou and then for Adwent, then we combine them. In the following code, I customize the font, but none of that is necessary.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
adamou &amp;lt;- mep_summary %&amp;gt;% filter(voters==&amp;ldquo;ADAMOU, Adamos&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;ggplot(adamou, aes(x = mean, y = topic)) +
  geom_segment(aes(yend = topic), color = &amp;ldquo;#104E8B&amp;rdquo;,
               xend = 0, alpha = 0.3) +
  geom_point(size = 4, color = &amp;ldquo;#104E8B&amp;rdquo;) + theme_bw() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;, axis.title.y = element_blank(),
        axis.title.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, face=&amp;lsquo;bold&amp;rsquo;),
        axis.text.y = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12),
        axis.text.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12)) +
  xlab(&amp;ldquo;Ideal Points, Adamos Adamou&amp;rdquo;) +
  geom_vline(xintercept = 0, linetype = &amp;ldquo;dashed&amp;rdquo;)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/C4zpATc.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
adwent &amp;lt;- mep_summary %&amp;gt;% filter(voters==&amp;ldquo;ADWENT, Filip&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;ggplot(adwent, aes(x = mean, y = topic)) +
  geom_segment(aes(yend = topic), color = &amp;ldquo;#8B1A1A&amp;rdquo;,
               xend = 0, alpha = 0.3) +
  geom_point(size = 4, color = &amp;ldquo;#8B1A1A&amp;rdquo;) + theme_bw() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;, axis.title.y = element_blank(),
        axis.title.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, face=&amp;lsquo;bold&amp;rsquo;),
        axis.text.y = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12),
        axis.text.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12)) +
  xlab(&amp;ldquo;Ideal Points, Filip Adwent&amp;rdquo;) +
  geom_vline(xintercept = 0, linetype = &amp;ldquo;dashed&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/gKFgL5L.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;We can put these two together and see how they compare:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;p&gt;ggplot(adamou, aes(x = mean, y = topic)) +
  geom_segment(aes(yend = topic), color = &amp;ldquo;#104E8B&amp;rdquo;,
               xend = 0, alpha = 0.3) +
  geom_segment(data = adwent, aes(yend = topic),
               xend = 0, colour = &amp;ldquo;#8B1A1A&amp;rdquo;,
               alpha = 0.3) +
  geom_point(size = 4, color = &amp;ldquo;#104E8B&amp;rdquo;) + theme_bw() +
  theme(legend.position = &amp;ldquo;none&amp;rdquo;, axis.title.y = element_blank(),
        axis.title.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, face=&amp;lsquo;bold&amp;rsquo;),
        axis.text.y = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12),
        axis.text.x = element_text(family = &amp;ldquo;Georgia&amp;rdquo;, size = 12)) +
  xlab(&amp;ldquo;Ideal Points, Adamos Adamou &amp;amp; Filip Adwent&amp;rdquo;) +
  geom_point(data = adwent, aes(x = mean, y =topic),
             size = 4, color = &amp;ldquo;#8B1A1A&amp;rdquo;) +
  geom_vline(xintercept = 0, linetype = &amp;ldquo;dashed&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/kBq6WGv.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;And of course you can customise these ggplot figures any way you like.&lt;/p&gt;

&lt;p&gt;Happy European Statistics Day! :dancers:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips and Tricks for R Markdown html</title>
      <link>/1/01/01/tips-and-tricks-for-r-markdown-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/tips-and-tricks-for-r-markdown-html/</guid>
      <description>

&lt;p&gt;Here are a couple of little tips and tricks that I&amp;rsquo;ve picked up for use with RMarkdown html documents (including presentations and notebooks). This post is aimed at the R user who doesn&amp;rsquo;t know much, if anything, about html and css.&lt;/p&gt;

&lt;h2 id=&#34;background-images&#34;&gt;Background images&lt;/h2&gt;

&lt;p&gt;Sometimes it&amp;rsquo;s useful (or just nice) to have a background image of some sort in a presentation or notebook. This could be the logo of your university or company, for example. To do this for a R Markdown document, you will need to do three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a separate .css file,&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;have/create an image, made suitably transparent,&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;change the YAML in the R Markdown document.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create a css file in any text editor. In this example I&amp;rsquo;m calling it &amp;lsquo;custom.css&amp;rsquo;. Include these lines (my image is called &lt;code&gt;results.jpg&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{
   background-image: url(&#39;results.jpg&#39;);
   min-height: 500px;
    /* Set background image to fixed (don&#39;t scroll along with the page) */
    background-attachment: fixed;
    background-position: right top;
    /* Set the background image to no repeat */
    background-repeat: no-repeat;
    /* Scale the background image to be as large as possible */
    background-size: cover;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The image itself will need to be quite transparent. You can do that with imagemagick. On a mac terminal, the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;convert IMAGE -fill white -colorize 50% NEW_IMAGE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, we just need to change our YAML at the top of the R Markdown document like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;---
title: &amp;quot;R Notebooks&amp;quot;
output:
  html_notebook:
    css: custom.css
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll have something interesting like this:&lt;/p&gt;

&lt;p&gt;&lt;img src = &#39;http://i.imgur.com/slwkLCg.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;This image could of course be anything, like a company logo, for example. You could also leave a large portion of it white to place the image in the corner or side of the screen.&lt;/p&gt;

&lt;h2 id=&#34;two-columns&#34;&gt;Two columns&lt;/h2&gt;

&lt;p&gt;Another useful thing that we can do with css is create two columns, particularly useful in a presentation. In order to do that, add the following lines to the css file you&amp;rsquo;re using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#left {
  left:-8.33%;
  text-align: left;
  float: left;
  width:50%;
  z-index:-10;
}

#right {
  left:31.25%;
  top: 75px;
  float: right;
  text-align: right;
  z-index:-10;
  width:50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you want to use these columns in your R Markdown document, use them like so, with a bit of html:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;left&amp;quot;&amp;gt;
  #content
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;right&amp;quot;&amp;gt;
  #content
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;div id=&amp;quot;left&amp;quot;&amp;gt;
$$y_i \backsim Normal(\mu_i, \sigma)$$
$$\mu_i = \alpha + \beta x_i$$
$$\sigma \backsim Uniform(0, 1)$$
$$\beta \backsim Normal(0, 10)$$
$$\alpha \backsim Normal(0, 10)$$
&amp;lt;/div&amp;gt;

&amp;lt;div id=&amp;quot;right&amp;quot;&amp;gt;
- `Likelihood`
- `Linear model`
- `sigma prior`
- `beta prior`
- `alpha prior`
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produces this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://i.imgur.com/Kpvf8mX.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;Likewise, an external css file can be used to change defaults. I think the default R code snippet text size is a little small in the R Notebooks, as is all the text in an R Notebook if you&amp;rsquo;re using them for presentations. You can easily change the defaults by putting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{ /* Normal  */
   font-size: 16px;
}
code.r{ /* Code block */
  font-size: 14px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the css file, which will make the normal text and the R code text bigger. If you want to make all the text slightly bigger in the entire document without an external css file, you can just put &lt;font&gt; tags at the start and end of the R Markdown document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;font size=6&amp;gt;
# content
&amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, bits of html can come in handy when you want to change little elements of the document. &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; will give you a vertical space, and using &lt;code&gt;&amp;lt;bdi&amp;gt;&lt;/code&gt; tags can be useful for changing the style of particular words, especially useful for words that are presented as &amp;lsquo;code&amp;rsquo; in back ticks. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;bdi style=&amp;quot;color:#36648B&amp;quot;&amp;gt;`variable_1`&amp;lt;/bdi&amp;gt;.

&amp;lt;bdi style=&amp;quot;font-size:70%;&amp;quot;&amp;gt;(**`?dplyr::select`**)&amp;lt;/bdi&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will make &amp;lsquo;variable_1&amp;rsquo; appear in code-style text and be blue (&lt;bdi style=&#34;color:#36648B&#34;&gt;&lt;code&gt;variable_1&lt;/code&gt;&lt;/bdi&gt;), whereas &amp;lsquo;?dplyr::select&amp;rsquo; will be bold and 70% of the size that it would otherwise be. (&lt;bdi style=&#34;font-size:70%;&#34;&gt;(&lt;strong&gt;&lt;code&gt;?dplyr::select&lt;/code&gt;&lt;/strong&gt;)&lt;/bdi&gt;)&lt;/p&gt;

&lt;h2 id=&#34;revealjs-logos&#34;&gt;revealjs logos&lt;/h2&gt;

&lt;p&gt;The image of the two columns above was part of a revealjs presentation done in R Markdown. revealjs gives you really slick options for presentations, but can be a lot of extra work in terms of customizing the output. Logos, for example, which are so common (and necessary) in presentations, are not included by default and can be tricky and annoying to include.&lt;/p&gt;

&lt;p&gt;We can get what we want with a little html and some YAML options. In the example below, I used an external html file called &lt;code&gt;Logo_prefix.html&lt;/code&gt;, which is referenced in the &lt;code&gt;includes:&lt;/code&gt; section of the YAML header. The html file contains the following, which uses an image called &lt;code&gt;logo.png&lt;/code&gt;. The size can be adjusted using the &lt;code&gt;style=&amp;quot;&amp;quot;&lt;/code&gt; part below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;div class=&amp;quot;bottombar&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;image class=&amp;quot;logo&amp;quot; src=&amp;quot;logo.png&amp;quot; style=&amp;quot;width:180px; height:85px;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the RMarkdown YAML I used (for a course in statistics in R in Portuguese; the &lt;code&gt;r Sys.Date()&lt;/code&gt; is a nice trick to put the current date on the presentation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;---
title: &amp;quot;Introdu√ß√£o a estat√≠stica no `R`, Dia 2&amp;quot;
author: &amp;quot;Robert McDonnell&amp;quot;
date: &amp;quot;`r Sys.Date()`&amp;quot;
output:
  revealjs::revealjs_presentation:
    theme: sky
    highlight: pygments
    css: custom.css
    includes:
      before_body: Logo_prefix.html
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This includes a small logo in the upper right corner of every slide. To get this to work properly, you will need to dig into the css of the particular revealjs theme that you are using (here I&amp;rsquo;m using sky), I can&amp;rsquo;t even remember exactly how I did that&amp;hellip; like I said, customizing revealjs can be annoying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Navigation in R with RSelenium</title>
      <link>/1/01/01/web-navigation-in-r-with-rselenium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/web-navigation-in-r-with-rselenium/</guid>
      <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;It goes almost without saying that the internet itself is the richest database available to us. From a 2014 &lt;a href=&#34;http://aci.info/2014/07/12/the-data-explosion-in-2014-minute-by-minute-infographic/&#34;&gt;blog post&lt;/a&gt;, it was claimed that &lt;em&gt;every minute&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook users share nearly 2.5 million pieces of content.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Twitter users tweet nearly 300,000 times.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Instagram users post nearly 220,000 new photos.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;YouTube users upload 72 hours of new video content.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Apple users download nearly 50,000 apps.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Email users send over 200 million messages.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Amazon generates over $80,000 in online sales.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of the accuracy of these claims, it is obvious to everyone that there is tons of information on the web. For researchers, then, the question is: how can you access all this information? You can of course go to specific, dedicated databases and download what you&amp;rsquo;re looking for, for example from the World Bank &lt;a href=&#34;http://databank.worldbank.org/data/home.aspx&#34;&gt;databank&lt;/a&gt;. However, there are drawbacks to this approach. It can become tiresome when you need to collect lots of data on different items (the World Bank databank is well organised, but not all databases are like that&amp;hellip;to put it politely). Some only let you download small, specific sections of a bigger database, meaning you have to return time and time again to the starting page to enter new information in order to retrieve the data you want. (Another thing is that we&amp;rsquo;re not quite utilising the web &lt;em&gt;itself&lt;/em&gt; as the database either.)&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;To deal with the first problem, you can automate the search process by driving a web browser with R.&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; This is different from &amp;lsquo;web-scraping&amp;rsquo;. Web-scraping takes the webpage as a html document and allows you to read information from it. It&amp;rsquo;s quite a straightforward process, with plenty of R packages around to help you do it. &lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt; in particular is quite easy, although I&amp;rsquo;ve found the &lt;a href=&#34;https://cran.r-project.org/web/packages/XML/XML.pdf&#34;&gt;XML&lt;/a&gt; package to be more powerful. (Web-scraping deals with the second issue above, in that it does treat the web itself as a database.)&lt;/p&gt;

&lt;p&gt;To drive a web browser in R, there are two packages (that I&amp;rsquo;m aware of) that can be used. One is &lt;a href=&#34;https://github.com/ropensci/RSelenium&#34;&gt;RSelenium&lt;/a&gt; by John Harrison, and &lt;a href=&#34;https://github.com/crubba/Rwebdriver&#34;&gt;Rwebdriver&lt;/a&gt; by Christian Rubba. I prefer &lt;code&gt;RSelenium&lt;/code&gt; and so I&amp;rsquo;ll use this package in the examples below.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have it already installed, you&amp;rsquo;ll need to download this package and load it into R.&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
install.packages(&amp;ldquo;RSelenium&amp;rdquo;)
library(&amp;ldquo;RSelenium&amp;rdquo;)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You will also need to download the Selenium standalone server. You can get it from &lt;a href=&#34;http://www.seleniumhq.org/download/&#34;&gt;here&lt;/a&gt;. Opening this file automatically from &lt;code&gt;RSelenium&lt;/code&gt; can be problematic&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, and so I&amp;rsquo;ve found the most straightforward way is to manually click on it and open it that way before you start.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;To get started with &lt;code&gt;RSelenium&lt;/code&gt;, you&amp;rsquo;ll need to give your browser somewhere to go. For this example, I&amp;rsquo;m going to go to the funding management section of Brazilian National Health Service, the &lt;em&gt;Fundo Nacional de Sa√∫de&lt;/em&gt;. From here, I&amp;rsquo;m going to get data for every municipality in every state over a period of some years. To do this manually would be a serious headache and would most likely lead to me making errors by forgetting where I am, which state is next, what municipality I just downloaded, and so on. Actually, you can be guaranteed I&amp;rsquo;d make those mistakes.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
URL &amp;lt;- &amp;ldquo;&lt;a href=&#34;http://www.fns.saude.gov.br/indexExterno.jsf&amp;quot;&#34;&gt;http://www.fns.saude.gov.br/indexExterno.jsf&amp;quot;&lt;/a&gt;
#checkForServer(dir=&amp;rdquo;[DIRECTORY WHERE THE SELENIUM SERVER IS]&amp;ldquo;, update=FALSE)
#checkForServer(dir=&amp;rdquo;[DIRECTORY WHERE THE SELENIUM SERVER IS]&amp;ldquo;, update=TRUE) # if you want to update
#startServer(dir=&amp;rdquo;[DIRECTORY WHERE THE SELENIUM SERVER IS]&amp;ldquo;) #none of these three are necessary if you click on the server first and manually open it.&lt;/p&gt;

&lt;p&gt;fprof &amp;lt;- makeFirefoxProfile(list(browser.download.dir = &amp;ldquo;[DOWNLOAD DIRECTORY]&amp;ldquo;,&lt;br /&gt;
browser.download.folderList = 2L,&lt;br /&gt;
browser.download.manager.showWhenStarting=FALSE,&lt;br /&gt;
browser.helperApps.neverAsk.saveToDisk = &amp;ldquo;application/octet-stream&amp;rdquo;))&lt;/p&gt;

&lt;p&gt;remDr &amp;lt;- remoteDriver(extraCapabilities=fprof)
remDr$open()&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So now your browser should be open. Here I&amp;rsquo;ve used a profile for Firefox because I will download files and I don&amp;rsquo;t want to deal with the download window that pops up in Firefox (you need to enter your download folder where it says &amp;lsquo;&lt;code&gt;[DOWNLOAD DIRECTORY]&lt;/code&gt;&amp;rsquo;, by the way. And you can also run &lt;code&gt;RSelenium&lt;/code&gt; on Chrome and &lt;a href=&#34;http://rpubs.com/johndharrison/13885&#34;&gt;other browsers&lt;/a&gt;, and even use a &lt;a href=&#34;https://rpubs.com/johndharrison/RSelenium-headless&#34;&gt;headless browser&lt;/a&gt; which speeds things up.) If you didn&amp;rsquo;t need to deal with download boxes and pop-ups and the like, you only need &lt;code&gt;remDr &amp;lt;- remoteDriver$new()&lt;/code&gt;, which will automatically open up a Firefox browser window. These particular files were recognised by Firefox as being binary files, and so I have disabled the download box for files of the type &amp;ldquo;application/octet-stream&amp;rdquo;. Other file types need a different setting.&lt;/p&gt;

&lt;p&gt;This website has a drop-down box on the left hand side that we&amp;rsquo;re going to use. What we will input into this is, in turn, a list of years, states, and municipalities. After that we will click on &amp;ldquo;Consultar&amp;rdquo; (for those of you who don&amp;rsquo;t speak Portuguese, I&amp;rsquo;m quite sure you can figure out what that means). Clicking this will bring us to a new page, from which we can download the data we&amp;rsquo;re looking for in a .csv file.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s create our inputs:&lt;br /&gt;
{% highlight R linenos=table %}
InputYear &amp;lt;- list(&amp;ldquo;2016&amp;rdquo;, &amp;ldquo;2015&amp;rdquo;, &amp;ldquo;2014&amp;rdquo;, &amp;ldquo;2013&amp;rdquo;, &amp;ldquo;2012&amp;rdquo;, &amp;ldquo;2011&amp;rdquo;, &amp;ldquo;2010&amp;rdquo;, &amp;ldquo;2009&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Input &amp;lt;- list(&amp;ldquo;ACRE&amp;rdquo;, &amp;ldquo;ALAGOAS&amp;rdquo;, &amp;ldquo;AMAPA&amp;rdquo;, &amp;ldquo;AMAZONAS&amp;rdquo;, &amp;ldquo;BAHIA&amp;rdquo;, &amp;ldquo;CEARA&amp;rdquo;, &amp;ldquo;DISTRITO FEDERAL&amp;rdquo;, &amp;ldquo;ESPIRITO SANTO&amp;rdquo;, &amp;ldquo;GOIAS&amp;rdquo;, &amp;ldquo;MARANHAO&amp;rdquo;, &amp;ldquo;MATO GROSSO&amp;rdquo;, &amp;ldquo;MATO GROSSO DO SUL&amp;rdquo;, &amp;ldquo;MINAS GERAIS&amp;rdquo;, &amp;ldquo;PARA&amp;rdquo;, &amp;ldquo;PARAIBA&amp;rdquo;, &amp;ldquo;PARANA&amp;rdquo;, &amp;ldquo;PERNAMBUCO&amp;rdquo;, &amp;ldquo;PIAUI&amp;rdquo;, &amp;ldquo;RIO DO JANEIRO&amp;rdquo;, &amp;ldquo;RIO GRANDE DO NORTE&amp;rdquo;, &amp;ldquo;RIO GRANDE DO SUL&amp;rdquo;, &amp;ldquo;RONDONIA&amp;rdquo;, &amp;ldquo;RORAIMA&amp;rdquo;, &amp;ldquo;SANTA CATARINA&amp;rdquo;, &amp;ldquo;SAO PAULO&amp;rdquo;, &amp;ldquo;SERGIPE&amp;rdquo;, &amp;ldquo;TOCANTINS&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Input_Mun &amp;lt;- &amp;ldquo;TODOS DA UF&amp;rdquo; #this will select all municipalities&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In order to get all this done, I will use a for loop in R which will first loop over the years, and then states, thereby selecting all states in a given year. In the following code, you will see &lt;code&gt;RSelenium&lt;/code&gt; commands that are quite different to regular commands in R. First of all, &lt;code&gt;RSelenium&lt;/code&gt; operates by way of two environments: one is remoteDriver environment, the other a webElement environment. These have specific options available to them (see the help section on each for a list and explanations). Some of the most useful are &lt;code&gt;findElement()&lt;/code&gt; (an option of remoteDriver), &lt;code&gt;sendKeystoElement()&lt;/code&gt; and &lt;code&gt;clickElement()&lt;/code&gt; (both options of webElement, as &lt;code&gt;remDr$findElement&lt;/code&gt; returns an object of webElement class). We will use these to navigate around the page and click on specific elements.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Speaking of elements on a page, this is actually the most crucial part of the process to get right (and can be the most frustrating). Some have recommended &lt;a href=&#34;http://selectorgadget.com/&#34;&gt;selectorgadget&lt;/a&gt;, but finding elements can be done in Firefox or Chrome without selectorgadget &amp;ndash; you just right-click the element in question and select &amp;ldquo;Inspect&amp;rdquo; or &amp;ldquo;Inspect Element&amp;rdquo;. This will bring up a chaotic-looking panel, full of html, css and javascript code. Luckily, there are easy options in Firefox and Chrome for finding what we need. After you right-click the element that you want (the one you would have clicked if you were navigating the page manually), click &amp;ldquo;Inspect&amp;rdquo; and then this element of the html code will be highlighted. Right-click on this again and you will see the option to copy. In Chrome, you will have the option to copy the xpath or css selector (&amp;ldquo;selector&amp;rdquo;); in Firefox you can copy the css selector (&amp;ldquo;unique selector&amp;rdquo;). I have used other options below to give more examples, such as &amp;lsquo;id&amp;rsquo;. This can be copied directly from the html code, and &amp;lsquo;class&amp;rsquo; and &amp;lsquo;name&amp;rsquo; can be used in a similar fashion. In general, css selectors are the easiest to work with.&lt;/p&gt;

&lt;p&gt;A quick note on some other aspects of the code. &lt;code&gt;Sys.sleep&lt;/code&gt; is used in order to be nice&amp;ndash; you don&amp;rsquo;t want to bombard the website with all of your requests in rapid-fire fashion; after all, they may block you. So this spaces out our commands. This is also useful for when you may have to wait for an element to load on the page before you can click on it. I have used &lt;code&gt;paste()&lt;/code&gt; in order to include the loop counters in the css selector&amp;ndash; just a little trick to make things easier. Some elements have &lt;code&gt;\\&lt;/code&gt; in the code: this is because the original had a single backslash, which is an escape character in R, and so the string is unreadable. Hence the added backslash.  You will also see the use of &lt;code&gt;try()&lt;/code&gt; &amp;ndash; in this case, there is a state that does not load like the others (the Federal District) and so this automated process will not work here. &lt;code&gt;try()&lt;/code&gt; allows R to try anyway, and if it fails, the loop just continues to the next iteration.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
for(i in 1:length(InputYear)){
  for(j in 1:length(Input)){
    remDr$navigate(URL)
    #Year:
    webElem &amp;lt;- remDr$findElement(using = &amp;ldquo;id&amp;rdquo;, value = &amp;ldquo;formIndex:j_idt48&amp;rdquo;)
    webElem$clickElement() #click on the drop-down year box
    Sys.sleep(2)
    webElem &amp;lt;- remDr$findElement(using = &amp;ldquo;id&amp;rdquo;, value=&amp;ldquo;formIndex:j_idt48_input&amp;rdquo;)
    Sys.sleep(2)
    webElem$sendKeysToElement(InputYear[i]) #send the year to the box
    webElem &amp;lt;- remDr$findElement(using = &amp;ldquo;css&amp;rdquo;, value=&amp;ldquo;li.ui-state-active&amp;rdquo;)
    webElem$clickElement() #click on the active element (the year we sent)
    Sys.sleep(2)
    #State:
    webElem &amp;lt;- remDr$findElement(using = &amp;ldquo;id&amp;rdquo;, value = &amp;ldquo;formIndex:sgUf&amp;rdquo;)
    webElem$clickElement()
    Sys.sleep(2)
    webElem$sendKeysToElement(Input[j]) #enter the state into the drop-down box
    CSS &amp;lt;- paste(&amp;ldquo;#formIndex\3a sgUf_panel &amp;gt; div &amp;gt; ul &amp;gt; li:nth-child(&amp;ldquo;, j+2, &amp;ldquo;)&amp;rdquo;, sep=&amp;ldquo;&amp;rdquo;)
    webElem &amp;lt;- remDr$findElement(using = &amp;ldquo;css&amp;rdquo;, value = CSS)
    Sys.sleep(1)
    webElem$clickElement()
    Sys.sleep(3)
    #Municipality:
    webElem &amp;lt;- remDr$findElement(using = &amp;lsquo;id&amp;rsquo;, value = &amp;lsquo;formIndex:cbMunicipio&amp;rsquo;)
    webElem$clickElement()
    Sys.sleep(2)
    webElem &amp;lt;- remDr$findElement(using = &amp;lsquo;css&amp;rsquo;, value=&amp;lsquo;#formIndex\3a cbMunicipio_panel &amp;gt; div &amp;gt; ul &amp;gt; li:nth-child(2)&amp;lsquo;)
    webElem$sendKeysToElement(list(Input_Mun))
    webElem$clickElement()
    Sys.sleep(4)
    #&amp;ldquo;Consultar&amp;rdquo;:
    webElem &amp;lt;- remDr$findElement(using = &amp;lsquo;xpath&amp;rsquo;, value = &amp;lsquo;//&lt;em&gt;[@id=&amp;ldquo;formIndex:j_idt60&amp;rdquo;]&amp;lsquo;)
    Sys.sleep(2)
    webElem$clickElement()
    Sys.sleep(6)
    #Download the .csv:
    webElem &amp;lt;- try(remDr$findElement(using = &amp;lsquo;xpath&amp;rsquo;, value = &amp;lsquo;//&lt;/em&gt;[@id=&amp;ldquo;formIndex&amp;rdquo;]/div[4]/input&amp;rsquo;), silent=T)
    try(webElem$clickElement(), silent=T)
    Sys.sleep(3)
}}&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So after all this, we&amp;rsquo;ll have a bunch of .csv files in out download folder, that you can import into R and mess around with. To load them all in together, you could use the following code:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}
library(&amp;ldquo;readr&amp;rdquo;)
setwd(&amp;rdquo;[THE DOWNLOAD FOLDER YOU USED]&amp;ldquo;)
fileNames &amp;lt;- list.files(path = getwd(), pattern = &amp;ldquo;*.csv&amp;rdquo;)
data &amp;lt;- rbindlist(lapply(fileNames, read_csv2,&lt;br /&gt;
col_names=c(&amp;ldquo;Ano&amp;rdquo;, &amp;ldquo;UF_MUNICIPIO&amp;rdquo;, &amp;ldquo;IBGE&amp;rdquo;, &amp;ldquo;ENTIDADE&amp;rdquo;, &amp;ldquo;CPF_CNPJ&amp;rdquo;,&lt;br /&gt;
&amp;ldquo;Bloco&amp;rdquo;, &amp;ldquo;Componente&amp;rdquo;, &amp;ldquo;Acao_Servico_Estrategia&amp;rdquo;, &amp;ldquo;Competencia_Parcela&amp;rdquo;,&lt;br /&gt;
&amp;ldquo;No_OB&amp;rdquo;, &amp;ldquo;Data_OB&amp;rdquo;, &amp;ldquo;Banco_OB&amp;rdquo;, &amp;ldquo;Agencia_OB&amp;rdquo;, &amp;ldquo;Conta_OB&amp;rdquo;, &amp;ldquo;Valor_Total&amp;rdquo;,&lt;br /&gt;
&amp;ldquo;Desconto&amp;rdquo;, &amp;ldquo;Valor_Liquido&amp;rdquo;, &amp;ldquo;Observacao&amp;rdquo;, &amp;ldquo;Processo&amp;rdquo;, &amp;ldquo;Tipo Repasse&amp;rdquo;,&lt;br /&gt;
&amp;ldquo;No_Proposta&amp;rdquo;), skip = 1, locale=locale(decimal_mark=&amp;ldquo;,&amp;rdquo;, grouping_mark=&amp;ldquo;.&amp;rdquo;)))&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;And there you go, all the data you wanted scraped automatically from the web. In this example, we were downloading a file, but you could be navigating around in order to arrive at a certain page and then to scrape the contents of that page. You can do that in a number of ways, by combining &lt;code&gt;RSelenium&lt;/code&gt; and other packages, such as &lt;code&gt;XML&lt;/code&gt; and &lt;code&gt;rvest&lt;/code&gt;. For a solution using only &lt;code&gt;RSelenium&lt;/code&gt;, we can first create an empty dataframe and then fill it with the &lt;code&gt;getElementText()&lt;/code&gt; option of the webElement class. So, for example, I was getting vote proposal content from the Brazilian Senate. I used &lt;code&gt;RSelenium&lt;/code&gt; to navigate to the pages that I wanted, as is shown above, and then I stored the Content and the Index of the vote (which were stored on the page as html text elements) as entries in the Index dataframe, using &lt;code&gt;webElem$getElementText()&lt;/code&gt;. Afterwards, I used various combinations of &lt;code&gt;stringr&lt;/code&gt; package functions and &lt;code&gt;gsub&lt;/code&gt; to clean up the text.&lt;br /&gt;
{% highlight R linenos=table %}
Index &amp;lt;- data.frame(Content=NA, Index=NA)&lt;br /&gt;
Index[i,1] &amp;lt;- webElem$getElementText()&lt;br /&gt;
   &amp;hellip;&lt;br /&gt;
Index[i,2] &amp;lt;- webElem$getElementText()&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;You can also get the html and parse it using &lt;code&gt;XML&lt;/code&gt;:&lt;br /&gt;
{% highlight R linenos=table %}
elemtxt &amp;lt;- webElem$getElementAttribute(&amp;ldquo;outerHTML&amp;rdquo;)&lt;br /&gt;
elemxml &amp;lt;- htmlTreeParse(elemtxt, asText=TRUE, encoding=&amp;ldquo;UTF-8&amp;rdquo;, useInternalNodes=TRUE)&lt;br /&gt;
Text &amp;lt;- html_text(elemxml, trim=TRUE)&lt;br /&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;And then you have the text from the webpage stored as data in R. Magic! :metal:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; It is often argued that R is not the best for this application, with Python often offered as a better alternative. In my experience, I&amp;rsquo;ve found R to be pretty good for this sort of thing, with delays being caused more by the browser/net speed than R. The scripts can be ugly, but using Selenium in Python looks pretty similar anyway. &lt;a href=&#34;http://stackoverflow.com/questions/17540971/how-to-use-selenium-with-python&#34;&gt;This question&lt;/a&gt; on Stack Overflow gives some instructions. &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt; See &lt;a href=&#34;https://github.com/ropensci/RSelenium/issues/54&#34;&gt;this&lt;/a&gt; discussion. &lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;
&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/v7y6SVt.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write your thesis or paper in R Markdown!</title>
      <link>/1/01/01/write-your-thesis-or-paper-in-r-markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/write-your-thesis-or-paper-in-r-markdown/</guid>
      <description>

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;There are many reasons why you would want to use some variant of Markdown for writing, and indeed, posts are common on the net as to why you should.&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#fn1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; A simple summary of the reasons are that Markdown is: 1) easy; 2) easy; 3) yup, you guessed it &amp;ndash; it&amp;rsquo;s easy.&lt;/p&gt;

&lt;p&gt;One variant of Markdown is R Markdown, developed by the &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt; team, and in particular the genius that is &lt;a href=&#34;http://yihui.name/knitr/&#34;&gt;Yihui Xie&lt;/a&gt;, creator of the &lt;code&gt;knitr&lt;/code&gt; R package. R Markdown is pretty much like regular Markdown, except you get a whole load of nice extra features, including the ability to run code chunks, produce .pdfs and presentations, and even .docx (if you really, really want to&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;). Indeed, the ioslides presentation format lets you use the power of html and css to make browser-based presentations.&lt;/p&gt;

&lt;p&gt;But surely academic papers require certain formats, and sometimes mathematical expressions and funny Greek letters? Well, sure. Academic papers, particularly theses, often have set formats that you must adhere to. And since Markdown is quite a simple language, it doesn&amp;rsquo;t have the advanced power of {% raw %}\(\LaTeX\){% endraw %} to position things in specific ways.&lt;/p&gt;

&lt;h3 id=&#34;raw-latex-endraw-in-r-markdown&#34;&gt;{% raw %}\(\LaTeX\){% endraw %} in R Markdown&lt;/h3&gt;

&lt;p&gt;Enter R Markdown! Although you might (depends on the Markdown) have to do something like &lt;code&gt;{% raw %}\\(\LaTeX\\){% endraw %}&lt;/code&gt; to get the word {% raw %}\(\LaTeX\){% endraw %} in your Markdown, with R Markdown it&amp;rsquo;s just &lt;code&gt;$ \LaTeX $&lt;/code&gt;. I used Mathjax characters in my thesis, and all worked fine using this method (&lt;a href=&#34;http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm&#34;&gt;here&amp;rsquo;s&lt;/a&gt; a nice link showing all the possible characters you can create with Mathjax). Nice &amp;lsquo;n&amp;rsquo; easy, lemon squeezy. Inline {% raw %}\(\LaTeX\){% endraw %} expressions get one &lt;code&gt;$&lt;/code&gt;, centred equations get two: &lt;code&gt;$$&lt;/code&gt;, and both need the equivalent to finish the expression. For example, in my first &lt;a href=&#34;http://robertmyles.github.io//post1.html&#34;&gt;post&lt;/a&gt;, I had the equation:&lt;/p&gt;

&lt;p&gt;{% raw %}
  $$y_{ij} = \beta_j\boldsymbol{x_i} - \alpha_j.$$
 {% endraw %}&lt;/p&gt;

&lt;p&gt;In R Markdown, this is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$ y_{ij} = \beta_j\boldsymbol{x_i} - \alpha_j.$$&lt;/code&gt; Simple!&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s math and funny characters done. What else can we do in R Markdown?&lt;/p&gt;

&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;

&lt;p&gt;Well, all the image-placement power of {% raw %}\(\LaTeX\){% endraw %} is also available. So &lt;code&gt;\begin{figure}&lt;/code&gt; (or subfigure and wrapfigure), &lt;code&gt;\centering&lt;/code&gt;, &lt;code&gt;\includegraphics&lt;/code&gt; and &lt;code&gt;\caption&lt;/code&gt; all work as they should. I found minipage to be particularly helpful. You can use &lt;code&gt;\&lt;/code&gt; with two spaces after it to organise blank space, or &lt;code&gt;\newpage&lt;/code&gt; to force a new page.&lt;/p&gt;

&lt;p&gt;Of course, that supposing that you want to use {% raw %}\(\LaTeX\){% endraw %} for images. R Markdown&amp;rsquo;s own syntax for images is quite simple: &lt;code&gt;![Caption](file.png)&lt;/code&gt;, where &amp;lsquo;Caption&amp;rsquo; is your image caption and &amp;lsquo;file.png&amp;rsquo; your image file (you can use other formats, such as .pdf too). However, positioning may become a problem using this image-placing syntax. It&amp;rsquo;s worth taking the extra time to learn the {% raw %}\(\LaTeX\){% endraw %} if you don&amp;rsquo;t know it.&lt;/p&gt;

&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Tables are a &lt;em&gt;little&lt;/em&gt; annoying sometimes in any Markdown. It depends. If the simple one works for you, then great &amp;ndash; they&amp;rsquo;re quick and easy. If you have to use grid tables, things take longer (for some reason, only grid tables worked for me sometimes). There&amp;rsquo;s a &lt;a href=&#34;http://pandoc.org/README.html#tables&#34;&gt;simple guide&lt;/a&gt; on the pandoc site, since it is pandoc that is actually converting to and fro in all these different formats (pandoc is amazing). But a basic one is &lt;em&gt;really&lt;/em&gt; simple (from the pandoc site):&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/TcbAp2U.png&#34; alt=&#34;Table&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The table numbers will automatically increment, and the caption is set after the &lt;code&gt;:&lt;/code&gt; part. Indeed, &lt;code&gt;table&lt;/code&gt; is not even needed, using &lt;code&gt;:&lt;/code&gt; with give you a caption with &lt;code&gt;Table 1:&lt;/code&gt;, for your first table in the document.&lt;/p&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;There may be a need for you to display code segments, particularly in a quantitative paper or thesis. Again, it&amp;rsquo;s very simple. In R Markdown, you do the following:&lt;/p&gt;

&lt;p&gt;{% highlight R linenos=table %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;readr&amp;quot;)
data &amp;lt;- read_csv(&amp;quot;example.csv&amp;quot;)
data &amp;lt;- data[1:6, ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Which should produce:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;readr&amp;quot;)
data &amp;lt;- read_csv(&amp;quot;example.csv&amp;quot;)
data &amp;lt;- data[1:6, ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This useful for plotting simple graphs and things like that. The example I&amp;rsquo;ve shown &lt;em&gt;wouldn&amp;rsquo;t&lt;/em&gt; be a particularly good idea, since R will load in &lt;code&gt;example.csv&lt;/code&gt; every time you produce the pdf using the &amp;lsquo;knit&amp;rsquo; button in RStudio. The &lt;code&gt;{r}&lt;/code&gt; prt also has optional arguments, such as &lt;code&gt;eval&lt;/code&gt;, which can be set to &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;, and tells R Markdown whether to evaluate the expression or not (useful for examples where you want to show the code but not run it).&lt;/p&gt;

&lt;h3 id=&#34;chapters-and-headings&#34;&gt;Chapters and Headings&lt;/h3&gt;

&lt;p&gt;Chapters and Headings are laughably simple in any Markdown, and R Markdown is no exception. &lt;code&gt;# Header 1&lt;/code&gt; will create the largest-sized header, &lt;code&gt;## Header 2&lt;/code&gt; a smaller one, and so on. To have these numbered, we&amp;rsquo;ll have to use another excellent feature of Markdown, the YAML block that goes on the top of the document.&lt;/p&gt;

&lt;h3 id=&#34;the-yaml-block&#34;&gt;The YAML block&lt;/h3&gt;

&lt;p&gt;The YAML block is what makes your R Markdown document possibly really fancy. It&amp;rsquo;s here that the {% raw %}\(\LaTeX\){% endraw %} packages are loaded, and here that you can specify various options that will have an impact on your document. So what the hell &lt;em&gt;is&lt;/em&gt; a YAML block, anyway? Well, maybe the easiest way to explain that is to show you mine&lt;sup id=&#34;a3&#34;&gt;&lt;a href=&#34;#fn3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; from my PhD &lt;a href=&#34;{{ site.url }}/assets/Explaining the Determinants of Foreign Policy Voting Behaviour in the Brazilian Houses of Legislature.pdf&#34;&gt;thesis&lt;/a&gt;. It starts and ends with &lt;code&gt;---&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;highlight-r-linenos-table&#34;&gt;{% highlight R linenos=table %}&lt;/h2&gt;

&lt;p&gt;title: &amp;ldquo;Explaining the Determinants of Foreign Policy Voting Behaviour in the Brazilian Houses of Legislature, with a Focus on the Senate&amp;rdquo;
author: &amp;ldquo;Robert Myles McDonnell&amp;rdquo;
date: &amp;ldquo;&amp;rdquo;
fontsize: 12pt
header-includes:
   - \usepackage{booktabs}
   - \usepackage{dcolumn}
   - \usepackage{wrapfig}
   - \usepackage{subcaption}
   - \usepackage{caption}
   - \usepackage[font=small,labelfont=bf]{caption}
   - \hypersetup{colorlinks=false}
documentclass: &amp;ldquo;article&amp;rdquo;
output:
  pdf_document:
    fig_caption: yes
    fig_height: 6
    fig_width: 7
    latex_engine: pdflatex
    number_sections: yes
    toc: yes
    toc_depth: 4
    citation_package: &amp;ldquo;natbib&amp;rdquo;
linestretch: 2
mainfont: &amp;ldquo;Linux Libertine O&amp;rdquo;
bibliography: ThesisLibrary.bib
csl: american-political-science-association.csl&lt;/p&gt;

&lt;h2 id=&#34;biblio-style-apalike&#34;&gt;biblio-style: apalike&lt;/h2&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So, that&amp;rsquo;s quite extended, but maybe you won&amp;rsquo;t need all these things. One important thing to remember with the YAML block is that indentation &lt;em&gt;matters&lt;/em&gt;. When you have something like &lt;code&gt;output:&lt;/code&gt;, then the line &lt;code&gt;pdf document:&lt;/code&gt; is &lt;strong&gt;two&lt;/strong&gt; spaces indented. &lt;code&gt;fig_caption: yes&lt;/code&gt; is &lt;strong&gt;two more&lt;/strong&gt; spaces indented (four in total) and so are the other options to pdf_document. If you get your spacing wrong, it won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;Many of the options are self-explanatory: &lt;code&gt;linestretch&lt;/code&gt; is line-spacing, for example. One important option is &lt;code&gt;toc&lt;/code&gt; and its option &lt;code&gt;toc_depth&lt;/code&gt;. This is the &lt;strong&gt;t&lt;/strong&gt;able &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;c&lt;/strong&gt;ontents. &lt;code&gt;toc_depth&lt;/code&gt; is telling R Markdown how many levels you&amp;rsquo;d like: Chapter 4.1, Chapter 4.1.1 etc. More advanced elements can be changed too. For example, this thesis had a &lt;code&gt;documentclass&lt;/code&gt; of article, but you can write your own document class and therefore produce radically different documents. One example is an R Markdown &lt;a href=&#34;https://github.com/danielkrizian/resume_template&#34;&gt;version&lt;/a&gt; of Friggeri&amp;rsquo;s popular CV template. Other examples are rapidly proliferating on the web. The RStudio team have a new R package &lt;a href=&#34;https://github.com/rstudio/rticles&#34;&gt;rticles&lt;/a&gt; that has document templates for various academic journal styles. Load &amp;lsquo;em up, and you&amp;rsquo;ve already got an easy R Markdown template for the journal in question. And for papers, enable the &lt;code&gt;abstract:&lt;/code&gt; option in the YAML header, write your abstract there, and voil√†! You&amp;rsquo;ve got yourself a nice abstract.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;So if writing your thesis (or a paper) in Microsoft Word or something similar sounds like an ordeal, and you&amp;rsquo;re really not such an expert on {% raw %}\(\LaTeX\){% endraw %}, maybe you should consider doing it in R Markdown. It has all the easiness of Markdown, with a couple of nice extras that help you make a quality document. See my thesis if you don&amp;rsquo;t believe me! :wink:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Update:&lt;br /&gt;
A colleague asked me how I produced the first few pages of my thesis, and I realised that I forgot to mention that you can include other documents, for example tex files, that may need to be part of your thesis. Many theses have strict guidelines for the introductory pages, which can be included in your R Markdown file as part of the YAML header section. The option is &lt;code&gt;includes&lt;/code&gt;, and it has the sub-options &lt;code&gt;in_header&lt;/code&gt;, &lt;code&gt;before_body&lt;/code&gt; and &lt;code&gt;after body&lt;/code&gt;. Like before, the spacing is meaningful in the YAML header, so these sub-options will need to be indented two spaces. For introductory pages of a thesis, your tex file will go in &lt;code&gt;before_body&lt;/code&gt;. (I have to admit that this option never worked well for me, I simply merged the .pdf produced from the tex file and the .pdf produced from the R Markdown document with Preview in OS X, but for others, it seems to work fine.) See &lt;a href=&#34;http://rmarkdown.rstudio.com/markdown_document_format.html&#34;&gt;here&lt;/a&gt; for examples. See &lt;a href=&#34;https://github.com/danilofreire/kcl-thesis-template-markdown&#34;&gt;here&lt;/a&gt; for a Markdown template for King&amp;rsquo;s College London&amp;rsquo;s PhD guidelines, by &lt;a href=&#34;http://danilofreire.com/&#34;&gt;Danilo Freire&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn1&#34;&gt;1&lt;/b&gt; For example, &lt;a href=&#34;http://markdown-guide.readthedocs.org/en/latest/basics.html&#34;&gt;this cheatsheet&lt;/a&gt; &lt;a href=&#34;#a1&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn2&#34;&gt;2&lt;/b&gt; In my experience, I think you&amp;rsquo;re just going to end up editing these in Word anyway so I don&amp;rsquo;t know that it&amp;rsquo;s worth the bother to do in RStudio. You can if you want, I suppose.&lt;a href=&#34;#a2&#34;&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b id=&#34;fn3&#34;&gt;3&lt;/b&gt; I&amp;rsquo;m including extra things here that I used over the process of making the thesis pdf, but it wasn&amp;rsquo;t what I used exactly in the end. I had some problems, that I can&amp;rsquo;t recall right now, with rendering bibliographical items so I switched to the default LaTeX renderer, pdflatex. Using this means you can&amp;rsquo;t use other fonts, like the Linux Libertine font above.&lt;a href=&#34;#a3&#34;&gt;‚Ü©&lt;/a&gt;
&lt;link rel=&#34;image_src&#34; href=&#34;http://i.imgur.com/vywFhKA.png?1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
